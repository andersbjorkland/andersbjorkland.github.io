<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
    <title></title>
    <link href="https://abjork.land/atom.xml" rel="self" type="application/atom+xml"/>
    <link href="https://abjork.land"/>
    <generator uri="https://www.getzola.org/">Zola</generator>
    <updated>2024-04-11T00:00:00+00:00</updated>
    <id>https://abjork.land/atom.xml</id>
    <entry xml:lang="en">
        <title>Optimizing Travel Routes: Applying Genetic Algorithms to the Traveling Salesman Problem</title>
        <published>2024-04-11T00:00:00+00:00</published>
        <updated>2024-04-11T00:00:00+00:00</updated>
        <author>
          <name>Anders Björkland</name>
        </author>
        <link rel="alternate" href="https://abjork.land/articles/elixir/optimizing-travel-routes-applying-genetic-algorithms/" type="text/html"/>
        <id>https://abjork.land/articles/elixir/optimizing-travel-routes-applying-genetic-algorithms/</id>
        <content type="html">&lt;div class=&quot;article-header&quot;&gt;
    










&lt;img
        alt=&quot;133&quot;
        src=&quot;https:&amp;#x2F;&amp;#x2F;abjork.land&amp;#x2F;processed_images&amp;#x2F;hero.cbe9b583434775d6.png&quot;
        srcset=&quot;https:&amp;#x2F;&amp;#x2F;abjork.land&amp;#x2F;processed_images&amp;#x2F;hero.383d1420643becd7.png 240w,
                    https:&amp;#x2F;&amp;#x2F;abjork.land&amp;#x2F;processed_images&amp;#x2F;hero.cbe9b583434775d6.png 400w,
                    https:&amp;#x2F;&amp;#x2F;abjork.land&amp;#x2F;processed_images&amp;#x2F;hero.2de9699b222a5cc0.png 600w&quot;
        sizes=&quot;(max-width: 240px) 200px,
                    (max-width: 400px) 360px,
                    600px&quot;
&#x2F;&gt;


    &lt;div class=&quot;text-content&quot;&gt;
        &lt;h1 class=&quot;article-title&quot;&gt;
            &lt;div class=&quot;title&quot;&gt;Optimizing Travel Routes&lt;&#x2F;div&gt;
            
                &lt;div class=&quot;subtitle&quot;&gt;Applying Genetic Algorithms to the Traveling Salesman Problem&lt;&#x2F;div&gt;
            
        &lt;&#x2F;h1&gt;
    &lt;&#x2F;div&gt;
    

 

 

&lt;div class=&quot;tag-list absolute&quot;&gt;
    
        
        &lt;div&gt;&lt;a href=&quot;https:&#x2F;&#x2F;abjork.land&#x2F;tags&#x2F;elixir&#x2F;&quot; class=&quot;hover-bold&quot;&gt;elixir&lt;&#x2F;a&gt;&lt;&#x2F;div&gt;
        
        &lt;div&gt;&lt;a href=&quot;https:&#x2F;&#x2F;abjork.land&#x2F;tags&#x2F;livebook&#x2F;&quot; class=&quot;hover-bold&quot;&gt;livebook&lt;&#x2F;a&gt;&lt;&#x2F;div&gt;
        
        &lt;div&gt;&lt;a href=&quot;https:&#x2F;&#x2F;abjork.land&#x2F;tags&#x2F;algorithms&#x2F;&quot; class=&quot;hover-bold&quot;&gt;algorithms&lt;&#x2F;a&gt;&lt;&#x2F;div&gt;
        
    
&lt;&#x2F;div&gt;



&lt;&#x2F;div&gt;&lt;div class=&quot;author-container&quot;&gt;
    &lt;p&gt;Written by Anders Björkland, Web Developer at &lt;a href=&quot;https:&amp;#x2F;&amp;#x2F;www.umain.com&amp;#x2F;&quot;&gt;Umain&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;section class=&quot;article-summary&quot;&gt;&lt;em&gt;Have you ever watched a delivery driver crisscrossing your neighborhood and wondered if they were taking the most efficient route? That&#x27;s the Traveling Salesman Problem in action! This classic challenge has entertained mathematicians and coders alike for ages. In this article, we&#x27;ll see how to tackle it using the power of Elixir and genetic algorithms, mimicking nature&#x27;s process of evolution to find surprisingly good routes.&lt;&#x2F;em&gt;&lt;&#x2F;section&gt;
&lt;p&gt;I was looking out my window and saw a delivery truck passing by on the street the other day. This got me thinking about a classic algorithm challenge: &lt;em&gt;The Traveler Salesman Problem&lt;&#x2F;em&gt; (TSP for short).&lt;&#x2F;p&gt;
&lt;p&gt;The challenge goes like this: &lt;em&gt;A salesman has a list of cities they need to visit. They must visit each of them and return to their starting position. &lt;strong&gt;What is the shortest route they can take?&lt;&#x2F;strong&gt;&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;

    






    



    
    &lt;div class=&quot;image-container &quot;&gt;
        &lt;div&gt;
            &lt;img
                alt=&quot;city plots&quot;
                src=&quot;cities-map.svg&quot;
                height=&quot;332&quot; 
                width=&quot;416&quot;
            &#x2F;&gt;
        &lt;&#x2F;div&gt;
        &lt;div&gt;&lt;&#x2F;div&gt;
    &lt;&#x2F;div&gt;


&lt;p&gt;This is of course a problem that has been solved in multiple ways,  thousands upon thousands of times over. The delivery driver has a route already preprogrammed - they don&#x27;t need my help mulling it over. &lt;em&gt;So why am I thinking about it?&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;p&gt;One could say such everyday problems are more fun when applying algorithms to solve them, and I am looking for a reason to pull out my algorithmic toolbox. It&#x27;s a fair statement! I recently put a new tool in that toolbox and I&#x27;ve been on the lookout for a reason to go nuts with it.&lt;&#x2F;p&gt;
&lt;p&gt;There are some interesting tools I can use, but there is a specific one I&#x27;m on the lookout for. So let me just quickly rifle through it:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Brute force&lt;&#x2F;strong&gt;: The hammer of all hammers, &lt;em&gt;brute forcing&lt;&#x2F;em&gt; is not elegant but it gets the job done... eventually. If we were to use brute force to solve TSP we would be calculating each possible solution and then select the best one. The number of possible solutions to TSP is given by the formula &lt;code&gt;(n-1)!&#x2F;2&lt;&#x2F;code&gt;. It&#x27;s a factorial representing each possible combination of visits to the cities, and as it loops back to the beginning, the direction of the loop does not matter. So if the salesman had to visit &lt;code&gt;18&lt;&#x2F;code&gt; cities, this would be &lt;code&gt;(18-1)!&#x2F;2)&lt;&#x2F;code&gt; which comes out to &lt;code&gt;1.8 × 10&lt;sup&gt;14&lt;&#x2F;sup&gt;&lt;&#x2F;code&gt; possible solutions. It&#x27;s entirely possible, but I rifle on.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Nearest neighbor&lt;&#x2F;strong&gt;: A screwdriver in comparison, this algorithm is focused on the here-and-now with disregard for the larger picture. With a &lt;em&gt;nearest neighbor&lt;&#x2F;em&gt; the salesman would always travel to whichever city is closest to the city they are currently in. While this might see them cover a larger distance than brute forcing, it is much faster and can be good enough. But if you&#x27;ve read &lt;a href=&quot;https:&#x2F;&#x2F;abjork.land&#x2F;articles&#x2F;elixir&#x2F;intro-to-genetic-algorithms-with-elixir&#x2F;&quot;&gt;my previous article&lt;&#x2F;a&gt;, you might suspect that I&#x27;m on the lookout for another tool.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Genetic Algorithm&lt;&#x2F;strong&gt;: Now this is what I&#x27;m talking about! Genetic Algorithms (&lt;em&gt;GA&lt;&#x2F;em&gt;) might find the best possible route, but they might also find a solution that is just good enough. This is my hammer, saw, and ruler - all combined. It might look a bit freakish, but it&#x27;s so versatile and fun to use! GA is inspired by evolutionary processes. Survival of the fittest and mutations will play a role in it finding a good enough solution. As long as we can define the solution as a &amp;quot;chromosome&amp;quot; and a way to measure the &amp;quot;fitness&amp;quot;, GA will be possible to use.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;

    






    



    
        
    
    

    
    
    
    
    &lt;div class=&quot;image-container &quot;&gt;
        &lt;img
                alt=&quot;A quokka holding a weird metal-wood tool&quot;
                src=&quot;quokka-work.png&quot;
                srcset=&quot;https:&amp;#x2F;&amp;#x2F;abjork.land&amp;#x2F;processed_images&amp;#x2F;quokka-work.a84fd94b25289714.webp 240w,
                            https:&amp;#x2F;&amp;#x2F;abjork.land&amp;#x2F;processed_images&amp;#x2F;quokka-work.f18e52dc9338f3d1.webp 400w,
                            https:&amp;#x2F;&amp;#x2F;abjork.land&amp;#x2F;processed_images&amp;#x2F;quokka-work.5b40e40166623de3.webp 600w&quot;
                sizes=&quot;(max-width: 240px) 200px,
                            (max-width: 400px) 360px,
                            600px&quot;
        &#x2F;&gt;
        &lt;div class=&quot;image-subtext&quot;&gt;&lt;&#x2F;div&gt;
    &lt;&#x2F;div&gt;


&lt;p&gt;So how would I use a Genetic Algorithm (GA) to find a short enough route for the salesman? Let&#x27;s consider this; is it possible to describe a possible solution as a &amp;quot;chromosome&amp;quot;? I will say an emphatic &lt;strong&gt;yes!&lt;&#x2F;strong&gt; A route can be described as a series of cities in the order they will be visited. If we have the 3 cities &lt;em&gt;1&lt;&#x2F;em&gt;, &lt;em&gt;2&lt;&#x2F;em&gt;, and &lt;em&gt;3&lt;&#x2F;em&gt;, then a chromosome could be a list: &lt;code&gt;[1, 2, 3]&lt;&#x2F;code&gt; or &lt;code&gt;[2, 1, 3]&lt;&#x2F;code&gt;, and so on. As long as there are coordinates for each city it will be possible to calculate the distance between them, a.k.a: their &amp;quot;fitness&amp;quot; (where shorter is better).&lt;&#x2F;p&gt;
&lt;p&gt;Knowing that I have a reasonable enough representation of a possible solution and a way to measure its fitness, let me share with you the plan!&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-plan&quot;&gt;The Plan&lt;&#x2F;h2&gt;
&lt;p&gt;There is a classic movie series here in Sweden called &amp;quot;The Jönsson Gang&amp;quot;. It&#x27;s about a gang of mainly 3 thieves aiming for heists beyond their competence. Their leader, Charles Ingvar Jönsson, had an iconic line: &amp;quot;I have a plan!&amp;quot; His plans were very detailed, and would probably work most of the time. That is, if he and his gang weren&#x27;t distracted by anything from a hotdog to a beer. Well, let me tell you: &lt;strong&gt;I have a plan and I&#x27;m all out of sausages!&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;


    


&lt;div class=&quot;quote &quot;&gt;
    &lt;cite&gt;
        &lt;p&gt;Less on the nose than &amp;quot;The Purge&amp;quot;, and I can’t ask for more than that.&lt;&#x2F;p&gt;

    &lt;&#x2F;cite&gt;
    
&lt;&#x2F;div&gt;
&lt;p&gt;We are going to need:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;Chromosomes&lt;&#x2F;em&gt; and a way to generate them for the initial population.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;Fitness function&lt;&#x2F;em&gt; that will be able to give a measure to the &lt;em&gt;chromosomes&#x27;&lt;&#x2F;em&gt; &amp;quot;fitness&amp;quot;.
Which means we need a function to measure the distance between each city in the &lt;em&gt;chromosome&lt;&#x2F;em&gt;, and not forget to measure the distance between the last city in the &lt;em&gt;chromosome&lt;&#x2F;em&gt; with the first. &lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;Parents&lt;&#x2F;em&gt; and how we select them. OK, that sounds weird, but if we are going to have a new generation of chromosomes we need something to base them off of. 
And we are not going to select them completely at random. This is not a singles&#x27; cruise!&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;Crossover&lt;&#x2F;em&gt; (and I&#x27;m so glad that this is the term chosen) between pairs of parents&#x27; chromosomes. 
Each pair of parents will produce 2 &lt;em&gt;offsprings&lt;&#x2F;em&gt;, where first offspring will select from parent &lt;em&gt;a&lt;&#x2F;em&gt; first, and second offspring will select from parent &lt;em&gt;b&lt;&#x2F;em&gt; first.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;Mutation&lt;&#x2F;em&gt; of chromosomes. This is a natural part of the &lt;em&gt;parents&lt;&#x2F;em&gt; producing offspring. This will introduce a unique trait to an offspring that is not necessarily found in the parent. If we are lucky we might see some Super Mutants! &lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;Pruning&lt;&#x2F;em&gt; of the population. The least fit chromosomes will leave place to the next generation. This dispassionately called process is less on the nose than &amp;quot;The Purge&amp;quot;, and I can&#x27;t ask for more than that.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;The Evolutionary Loop&lt;&#x2F;strong&gt;&lt;&#x2F;em&gt;! Each part that I&#x27;ve described is part of evolution. All that is left is passing on the new generation to the next and let nature have its fun. Since I&#x27;m not as elegant as dear &lt;em&gt;Charles Ingvar Jönsson&lt;&#x2F;em&gt; I will set a generational limit instead of a goal-oriented threshold for the loop.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;chromosomes-are-potential-solutions&quot;&gt;Chromosomes are potential solutions&lt;&#x2F;h3&gt;
&lt;p&gt;With the Travelling Salesman Problem the solution is a route, and a route is nothing but a series of places to visit. And by randomly selecting cities to visit, there is a potential that these routes collectively hold the key to the shortest route. And eventually, through evolution, the collection of randomly generated routes, survival of the fittest, and mutation, a generation will produce a good enough route.&lt;&#x2F;p&gt;
&lt;p&gt;I think I&#x27;ve teased you enough. It&#x27;s time to bring in &lt;code&gt;the code&lt;&#x2F;code&gt; (using &lt;code&gt;Elixir&lt;&#x2F;code&gt;)! I will represent the cities as a list of coordinates, and the chromosomes shall be the indices for each city. &lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;elixir&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-elixir &quot;&gt;&lt;code class=&quot;language-elixir&quot; data-lang=&quot;elixir&quot;&gt;&lt;span&gt;  @&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cities &lt;&#x2F;span&gt;&lt;span&gt;[
&lt;&#x2F;span&gt;&lt;span&gt;    %{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;x: 10&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;y: 20&lt;&#x2F;span&gt;&lt;span&gt;}, %{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;x: 5&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;y: 15&lt;&#x2F;span&gt;&lt;span&gt;}, %{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;x: 12&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;y: 1&lt;&#x2F;span&gt;&lt;span&gt;},
&lt;&#x2F;span&gt;&lt;span&gt;    %{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;x: 20&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;y: 10&lt;&#x2F;span&gt;&lt;span&gt;}, %{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;x: 7&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;y: 14&lt;&#x2F;span&gt;&lt;span&gt;}, %{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;x: 15&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;y: 3&lt;&#x2F;span&gt;&lt;span&gt;},
&lt;&#x2F;span&gt;&lt;span&gt;    %{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;x: 15&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;y: 12&lt;&#x2F;span&gt;&lt;span&gt;}, %{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;x: 15&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;y: 10&lt;&#x2F;span&gt;&lt;span&gt;}, %{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;x: 20&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;y: 8&lt;&#x2F;span&gt;&lt;span&gt;},
&lt;&#x2F;span&gt;&lt;span&gt;    %{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;x: 2&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;y: 14&lt;&#x2F;span&gt;&lt;span&gt;},  %{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;x: 3&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;y: 11&lt;&#x2F;span&gt;&lt;span&gt;}, %{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;x: 14&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;y: 7&lt;&#x2F;span&gt;&lt;span&gt;},
&lt;&#x2F;span&gt;&lt;span&gt;    %{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;x: 5&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;y: 11&lt;&#x2F;span&gt;&lt;span&gt;}, %{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;x: 5&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;y: 23&lt;&#x2F;span&gt;&lt;span&gt;}, %{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;x: 20&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;y: 23&lt;&#x2F;span&gt;&lt;span&gt;}, 
&lt;&#x2F;span&gt;&lt;span&gt;    %{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;x: 7&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;y: 23&lt;&#x2F;span&gt;&lt;span&gt;}, %{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;x: 16&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;y: 12&lt;&#x2F;span&gt;&lt;span&gt;}, %{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;x: 25&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;y: 12&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;  ]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;A chromosome is the length of the list, with each &lt;em&gt;gene&lt;&#x2F;em&gt; representing the index to one of the cities. The foundation is laid when I initialize the population. Let me show you:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;elixir&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-elixir &quot;&gt;&lt;code class=&quot;language-elixir&quot; data-lang=&quot;elixir&quot;&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;initialize_population&lt;&#x2F;span&gt;&lt;span&gt;(population_size) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;do
&lt;&#x2F;span&gt;&lt;span&gt;    chromosome_template = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Enum&lt;&#x2F;span&gt;&lt;span&gt;.to_list(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;..(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Enum&lt;&#x2F;span&gt;&lt;span&gt;.count(@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cities&lt;&#x2F;span&gt;&lt;span&gt;) - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;))
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Enum&lt;&#x2F;span&gt;&lt;span&gt;.map(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;..population_size, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn&lt;&#x2F;span&gt;&lt;span&gt; _ -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Enum&lt;&#x2F;span&gt;&lt;span&gt;.shuffle(chromosome_template) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Not to toot my own horn here, but doesn’t that look very simple? I introduce the &lt;code&gt;chromosome_template&lt;&#x2F;code&gt; that contains all the indices and shuffle it until I have created enough chromosomes.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;While we are talking about population and chromosomes, let me just warn you that we will see an addition on top of this. I will store a chromosome along with its distance (introduced just below this paragraph) in a map so we get a &lt;code&gt;chromosome_data&lt;&#x2F;code&gt; variable with a value like &lt;code&gt;%{chromosome: [0,1,2], distance: 4.321}&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h3 id=&quot;the-shorter-the-better-the-fitness-function-edition&quot;&gt;The shorter the better - the fitness function edition&lt;&#x2F;h3&gt;
&lt;p&gt;Just like Bilbo, it&#x27;s not enough to go &amp;quot;there&amp;quot; - you need to have &amp;quot;and back again&amp;quot; too! The traveling salesman will be visiting each city and then return to their starting city, making a complete loop. The fitness function will sum up all the distances between each city and return that.&lt;&#x2F;p&gt;
&lt;p&gt;A city&#x27;s coordinate is represented by a map: &lt;code&gt;%{x: 10, y: 20}&lt;&#x2F;code&gt;. When we have two cities they can be: &lt;code&gt;%{x: 10, y: 20}&lt;&#x2F;code&gt; and &lt;code&gt;%{x: 5, y: 15}&lt;&#x2F;code&gt;. The distance between the cities requires a touch of math (or &lt;em&gt;magic&lt;&#x2F;em&gt; if you just want to skim this). The distance between two coordinated in a 2D field can be calculated with the help of Pythagoras: &lt;em&gt;a^2^ + b^2^ = c^2^&lt;&#x2F;em&gt; (or 2D Euclidean). And reframed for the two cities it would be the same as &lt;code&gt;(x&lt;sub&gt;1&lt;&#x2F;sub&gt; - x&lt;sub&gt;2&lt;&#x2F;sub&gt;)&lt;sup&gt;2&lt;&#x2F;sup&gt; + (y&lt;sub&gt;1&lt;&#x2F;sub&gt; - y&lt;sub&gt;2&lt;&#x2F;sub&gt;)&lt;sup&gt;2&lt;&#x2F;sup&gt; = c&lt;sup&gt;2&lt;&#x2F;sup&gt;&lt;&#x2F;code&gt;. Then the distance is &lt;code&gt;d=√(c&lt;sup&gt;2&lt;&#x2F;sup&gt;)&lt;&#x2F;code&gt;. And when we insert the values: &lt;code&gt;d=√((10-5)&lt;sup&gt;2&lt;&#x2F;sup&gt; + (20-15)&lt;sup&gt;2&lt;&#x2F;sup&gt;)≈7&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Representing this calculation in code:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;elixir&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-elixir &quot;&gt;&lt;code class=&quot;language-elixir&quot; data-lang=&quot;elixir&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;  # Calculate the distance between two cities 
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;distance&lt;&#x2F;span&gt;&lt;span&gt;(%{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;x:&lt;&#x2F;span&gt;&lt;span&gt; x1, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;y:&lt;&#x2F;span&gt;&lt;span&gt; y1}, %{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;x:&lt;&#x2F;span&gt;&lt;span&gt; x2, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;y:&lt;&#x2F;span&gt;&lt;span&gt; y2}) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;do
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;    # Using 2D Euclidean distance
&lt;&#x2F;span&gt;&lt;span&gt;    dx = abs(x1 - x2)
&lt;&#x2F;span&gt;&lt;span&gt;    dy = abs(y1 - y2)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    (dx ** &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;) + (dy ** &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    |&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:math&lt;&#x2F;span&gt;&lt;span&gt;.sqrt()
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;


    


&lt;div class=&quot;quote &quot;&gt;
    &lt;cite&gt;
        &lt;p&gt;&lt;em&gt;Oh, the pattern matching&lt;&#x2F;em&gt; - unpacking values to variables right there in the function definitions!&lt;&#x2F;p&gt;

    &lt;&#x2F;cite&gt;
    
&lt;&#x2F;div&gt;
&lt;p&gt;This calculation should be done between each city in a chromosome. If you like some recursion and pattern matching, you will like this bit:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;elixir&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-elixir &quot;&gt;&lt;code class=&quot;language-elixir&quot; data-lang=&quot;elixir&quot;&gt;&lt;span&gt;​​  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def&lt;&#x2F;span&gt;&lt;span&gt; distances([first, second]) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;do
&lt;&#x2F;span&gt;&lt;span&gt;    city1 = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Enum&lt;&#x2F;span&gt;&lt;span&gt;.at(@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cities&lt;&#x2F;span&gt;&lt;span&gt;, first)
&lt;&#x2F;span&gt;&lt;span&gt;    city2 = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Enum&lt;&#x2F;span&gt;&lt;span&gt;.at(@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cities&lt;&#x2F;span&gt;&lt;span&gt;, second)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    distance(city1, city2)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;distances&lt;&#x2F;span&gt;&lt;span&gt;([first, second | tail]) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;do
&lt;&#x2F;span&gt;&lt;span&gt;    city1 = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Enum&lt;&#x2F;span&gt;&lt;span&gt;.at(@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cities&lt;&#x2F;span&gt;&lt;span&gt;, first)
&lt;&#x2F;span&gt;&lt;span&gt;    city2 = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Enum&lt;&#x2F;span&gt;&lt;span&gt;.at(@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cities&lt;&#x2F;span&gt;&lt;span&gt;, second)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    distance(city1, city2) + distances([second | tail])
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;em&gt;Oh, the pattern matching&lt;&#x2F;em&gt; - unpacking values to variables right there in the function definitions! The first distances function will catch when a list is passed to it that contains only two elements, so it will return only the distance between the two cities in the list. But the second function will continue calling itself as long as there are more elements in the list.&lt;&#x2F;p&gt;
&lt;p&gt;And if you are thinking that this does not measure the loop-back distance, you are correct! I saved that fun tidbit for the &lt;code&gt;fitness_function&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;elixir&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-elixir &quot;&gt;&lt;code class=&quot;language-elixir&quot; data-lang=&quot;elixir&quot;&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;fitness_function&lt;&#x2F;span&gt;&lt;span&gt;(chromosome) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;do
&lt;&#x2F;span&gt;&lt;span&gt;    last_to_first_elements = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Enum&lt;&#x2F;span&gt;&lt;span&gt;.take(chromosome, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;) ++ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Enum&lt;&#x2F;span&gt;&lt;span&gt;.take(chromosome, -&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;) 
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    there = distances(chromosome)
&lt;&#x2F;span&gt;&lt;span&gt;    and_back = distances(last_to_first_elements)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    there + and_back
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;On top of taking the distance between the cities in a chromosome, the &lt;code&gt;fitness_function&lt;&#x2F;code&gt; will also take the last and first element and get its distance. Finally it will add up the distance there and back again and return the sum on a silver platter.&lt;&#x2F;p&gt;
&lt;p&gt;With this tidbit, each chromosome can be neatly packaged together with its distance in a data-package. A bit like this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;elixir&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-elixir &quot;&gt;&lt;code class=&quot;language-elixir&quot; data-lang=&quot;elixir&quot;&gt;&lt;span&gt;    population = initialize_population(population_size)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    chromosome_datas = 
&lt;&#x2F;span&gt;&lt;span&gt;      population
&lt;&#x2F;span&gt;&lt;span&gt;      |&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Enum&lt;&#x2F;span&gt;&lt;span&gt;.map(
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn&lt;&#x2F;span&gt;&lt;span&gt; chromosome -&amp;gt; %{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;chromosome:&lt;&#x2F;span&gt;&lt;span&gt; chromosome, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;distance:&lt;&#x2F;span&gt;&lt;span&gt; fitness_function(chromosome)} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;span&gt;        )
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;blockquote&gt;
&lt;p&gt;As &lt;code&gt;initialize_population&lt;&#x2F;code&gt; returns a list of chromosomes, it can be enumerated on and return new elements that package the chromosome with the distance returned from the &lt;code&gt;fitness_function&lt;&#x2F;code&gt;. Doing it this way means we will have the chromosome&#x27;s fitness readily at hand. I do not consider &lt;em&gt;distance&lt;&#x2F;em&gt; or &lt;em&gt;fitness&lt;&#x2F;em&gt; a part of the chromosome, but rather additional data about the chromosome. &lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h3 id=&quot;the-not-a-singles-cruise-way-of-selecting-parents&quot;&gt;The not-a-singles-cruise way of selecting parents&lt;&#x2F;h3&gt;
&lt;p&gt;&amp;quot;So you want offspring but want someone to do it for you?&amp;quot; Good news, I’ve got the recipe for you! Given that there is a population of random chromosomes, it would be neat if the next generation were a bit better than the one previous. While I personally would like to say that &lt;em&gt;millennials&lt;&#x2F;em&gt; have it all figured out, we can still improve upon this generation. But for this to work we want to give a higher chance to chromosomes with shorter routes to produce offspring. This will mean that the offspring inherits the parents&#x27; good qualities (or bad, but that&#x27;s why we want to prefer the parents with shorter routes).&lt;&#x2F;p&gt;


    


&lt;div class=&quot;quote &quot;&gt;
    &lt;cite&gt;
        &lt;p&gt;Selecting parents is not as much a cruise fare as it is a casino.&lt;&#x2F;p&gt;

    &lt;&#x2F;cite&gt;
    
&lt;&#x2F;div&gt;
&lt;p&gt;There is this thing called &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Fitness_proportionate_selection&quot;&gt;roulette wheel selection&lt;&#x2F;a&gt;. To give a higher chance for the chromosomes with shorter distances to be selected I will just give them a larger pie of the wheel than the chromosome with longer distances. When I spin the wheel, every chromosome has the chance of being the winner but the likelihood that it falls on a chromosome with a longer route is smaller.&lt;&#x2F;p&gt;
&lt;p&gt;My foolproof plan for this is to summarize every route&#x27;s distance and make an inverse ratio for them. On each spin of the &lt;em&gt;wheel&lt;&#x2F;em&gt;, there is a chance that a chromosome will be selected. The higher the inverse ratio is, the higher the chance that the wheel will stop at the chromosome.&lt;&#x2F;p&gt;
&lt;p&gt;In Elixir, I would do it like this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;elixir&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-elixir &quot;&gt;&lt;code class=&quot;language-elixir&quot; data-lang=&quot;elixir&quot;&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;general_inverse_fitness&lt;&#x2F;span&gt;&lt;span&gt;(population_data) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;do
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Enum&lt;&#x2F;span&gt;&lt;span&gt;.reduce(population_data, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn&lt;&#x2F;span&gt;&lt;span&gt; data, acc -&amp;gt; acc + &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span&gt;&#x2F; data.distance &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;select_parents&lt;&#x2F;span&gt;&lt;span&gt;(population_data, num_parents \\ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;do
&lt;&#x2F;span&gt;&lt;span&gt;    general_inverse_fitness =  general_inverse_fitness(population_data)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Enum&lt;&#x2F;span&gt;&lt;span&gt;.map(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;..num_parents, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn&lt;&#x2F;span&gt;&lt;span&gt; _ -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Select n parents
&lt;&#x2F;span&gt;&lt;span&gt;      random_value = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:rand&lt;&#x2F;span&gt;&lt;span&gt;.uniform() * general_inverse_fitness
&lt;&#x2F;span&gt;&lt;span&gt;      select_chromosome(population_data, random_value, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;defp &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;select_chromosome&lt;&#x2F;span&gt;&lt;span&gt;(population_data, target_fitness, acc_fitness) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;do
&lt;&#x2F;span&gt;&lt;span&gt;    [chromosome_data | tail] = population_data
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;    # The greater value from the distance function the less the new distance will be, 
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;    # so we promote the shorter routes before the longer routes
&lt;&#x2F;span&gt;&lt;span&gt;    new_fitness = acc_fitness + &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span&gt;&#x2F; chromosome_data.distance
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; new_fitness &amp;gt;= target_fitness &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;do
&lt;&#x2F;span&gt;&lt;span&gt;      chromosome_data
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else
&lt;&#x2F;span&gt;&lt;span&gt;      select_chromosome(tail, target_fitness, new_fitness)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The &lt;code&gt;select_parents&lt;&#x2F;code&gt; function is the entry-point. It will first summarize the inverse distances. In general the sum will become larger the shorter the distances are but it will depend on population size (meaning as a standalone metric it is not useful for comparing between different population sizes, but is meaningful within the population that it is used).&lt;&#x2F;p&gt;
&lt;p&gt;With the &lt;code&gt;general_inverse_fitness&lt;&#x2F;code&gt;, the function can continue with selecting parents. Whenever a new parent is selected, a new random value will be the target that a chromosome should achieve. If a chromosome does not achieve the target it will add to an accumulator that is added to the next chromosome&#x27;s calculation. This is like the slowing of the roulette wheel. So selecting parents is not as much a cruise fare as it is a casino! &lt;&#x2F;p&gt;
&lt;h3 id=&quot;crossover-and-mutation-the-offsprings&quot;&gt;Crossover and mutation: The Offsprings&lt;&#x2F;h3&gt;
&lt;p&gt;Before we let the parents do what defines them in the evolutionary process, let&#x27;s consider who should be pairing up with who? In the previous step I let the roulette wheel select parents. I will let the order in which they were selected define the pair of parents. Though it could be any kind of parental constellation - we are not limited to two parents, really - I feel like I want to keep it simple.&lt;&#x2F;p&gt;
&lt;p&gt;Each pair of two parents will combine their chromosomes with each other in a &lt;em&gt;crossover&lt;&#x2F;em&gt; process. &lt;strong&gt;This part is important!&lt;&#x2F;strong&gt; So if you&#x27;ve skimmed this far, focus-up!&lt;&#x2F;p&gt;
&lt;p&gt;In a &lt;em&gt;crossover&lt;&#x2F;em&gt; I will take a random length of genes from one parent starting from a random position. The genes will be a subarray of cities, preserving the order from the parent chromosome. Then I will assemble a new chromosome and fill in the blanks for each element that is missing from the first subarray.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Example&lt;&#x2F;strong&gt; 
A chromosome has length 6, the &lt;em&gt;crossover&lt;&#x2F;em&gt; will have a starting index of 2, and subarray length of 3. &lt;&#x2F;p&gt;
&lt;p&gt;Parent Chromosome A:                 [2, 0, 1, 3, 4, 5]&lt;br &#x2F;&gt;
Parent Chromosome B:                 [1, 2, 3, 5, 4, 0]&lt;&#x2F;p&gt;
&lt;p&gt;Subarray 1:                          [_, _, 1, 3, 4, _]&lt;&#x2F;p&gt;
&lt;p&gt;Available genes from Chromosome B:   [2, 5, 0]&lt;br &#x2F;&gt;
Fill in blanks with available genes: [2, 5, 1, 3, 4, 0]&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;


    


&lt;div class=&quot;quote &quot;&gt;
    &lt;cite&gt;
        &lt;p&gt;A beautiful snowflake, if you may. Or a Super Mutant!&lt;&#x2F;p&gt;

    &lt;&#x2F;cite&gt;
    
&lt;&#x2F;div&gt;
&lt;p&gt;By combining the chromosomes this way I can preserve some of the route information and find new ones. But whichever parent&#x27;s chromosome is selected first will have a higher impact for the new chromosome. For this reason I will crossover each pair of parents twice. Both parents&#x27; chromosomes will get to go first. It will be less fuss that way!&lt;&#x2F;p&gt;
&lt;p&gt;But an offspring is not only the combination of parents&#x27; chromosomes. Each offspring has the potential of being unique: a beautiful snowflake, if you may. Or a Super Mutant!&lt;&#x2F;p&gt;
&lt;p&gt;This is the role of &lt;em&gt;&lt;strong&gt;mutation&lt;&#x2F;strong&gt;&lt;&#x2F;em&gt;. To randomly introduce new characteristics to a chromosome. What my mutation function will do is to select at least one gene from the crossover chromosome and insert it at a random position. &lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;elixir&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-elixir &quot;&gt;&lt;code class=&quot;language-elixir&quot; data-lang=&quot;elixir&quot;&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;crossover&lt;&#x2F;span&gt;&lt;span&gt;(chromosome_1, chromosome_2) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;do
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;    # 1. We select the parts of chromosome_1 randomly (the order is important)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;    #    It can be [_, _, B, C, A, _]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;    #    which means first selection will be [B, C, A], leaving D, E, F 
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    cut_point_1 = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:rand&lt;&#x2F;span&gt;&lt;span&gt;.uniform(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Enum&lt;&#x2F;span&gt;&lt;span&gt;.count(chromosome_1) - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;) 
&lt;&#x2F;span&gt;&lt;span&gt;    cut_point_2 = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:rand&lt;&#x2F;span&gt;&lt;span&gt;.uniform(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Enum&lt;&#x2F;span&gt;&lt;span&gt;.count(chromosome_1) - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;) 
&lt;&#x2F;span&gt;&lt;span&gt;    [start_point, end_point] = [cut_point_1, cut_point_2] |&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Enum&lt;&#x2F;span&gt;&lt;span&gt;.sort()
&lt;&#x2F;span&gt;&lt;span&gt;    selection = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Enum&lt;&#x2F;span&gt;&lt;span&gt;.slice(chromosome_1, start_point..end_point) 
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;    # 2. We want to get the relationships that is present in chromosome_2
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;    #    It can be [B, C, D, F, E, A]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;    #    Be mindful that we do not want to select either A, B, or C again. 
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;    #    This means that we should filter out every used gene: [D, F, E]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;    #    and start filling the missing pieces with the genes that are left.
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    available_genes = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Enum&lt;&#x2F;span&gt;&lt;span&gt;.filter(chromosome_2, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn&lt;&#x2F;span&gt;&lt;span&gt; gene -&amp;gt; !&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Enum&lt;&#x2F;span&gt;&lt;span&gt;.member?(selection, gene) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    {prefix, suffix} = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Enum&lt;&#x2F;span&gt;&lt;span&gt;.split(available_genes, start_point)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;    # 3. And then we assemble the chromosome from the different parts, 
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;    #    combining chromosome_1 and chromosome_2 genes
&lt;&#x2F;span&gt;&lt;span&gt;    
&lt;&#x2F;span&gt;&lt;span&gt;    prefix ++ selection ++ suffix
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;mutation&lt;&#x2F;span&gt;&lt;span&gt;(chromosome) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;do
&lt;&#x2F;span&gt;&lt;span&gt;    chromosome_length = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Enum&lt;&#x2F;span&gt;&lt;span&gt;.count(chromosome)
&lt;&#x2F;span&gt;&lt;span&gt;    portion_of_mutation = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0.1
&lt;&#x2F;span&gt;&lt;span&gt;    least_num_of_mutations = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    num_of_mutations = 
&lt;&#x2F;span&gt;&lt;span&gt;      round(chromosome_length * portion_of_mutation) 
&lt;&#x2F;span&gt;&lt;span&gt;      |&amp;gt; max(least_num_of_mutations)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;    # For each number of mutations
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;    # - Take random element
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;    # - Insert at random position
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    mutating_genes = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Enum&lt;&#x2F;span&gt;&lt;span&gt;.take_random(chromosome, num_of_mutations)
&lt;&#x2F;span&gt;&lt;span&gt;    
&lt;&#x2F;span&gt;&lt;span&gt;    template = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Enum&lt;&#x2F;span&gt;&lt;span&gt;.filter(chromosome, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn&lt;&#x2F;span&gt;&lt;span&gt; gene -&amp;gt; !&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Enum&lt;&#x2F;span&gt;&lt;span&gt;.member?(mutating_genes, gene) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Enum&lt;&#x2F;span&gt;&lt;span&gt;.reduce(mutating_genes, template, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn&lt;&#x2F;span&gt;&lt;span&gt; mutating_gene, acc -&amp;gt; 
&lt;&#x2F;span&gt;&lt;span&gt;      random_pos = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Enum&lt;&#x2F;span&gt;&lt;span&gt;.count(acc) - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span&gt;|&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:rand&lt;&#x2F;span&gt;&lt;span&gt;.uniform()
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;List&lt;&#x2F;span&gt;&lt;span&gt;.insert_at(acc, random_pos, mutating_gene)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;I would be amiss if I didn&#x27;t point out that changing the position of just one element in the chromosome will have a huge impact on the overall chromosome information. One element contains not only the order a city is being visited, but it&#x27;s also information about a connection from one city via the element to the next city. So keeping the mutation to minimal changes is good, as it otherwise would be resulting in a chromosome that is far different from either parent.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;making-space-for-the-new-generation&quot;&gt;Making space for the new generation&lt;&#x2F;h3&gt;


    


&lt;div class=&quot;quote &quot;&gt;
    &lt;cite&gt;
        &lt;p&gt;Dear &lt;em&gt;Charles&lt;&#x2F;em&gt; would be pretty terrified if he knew what I am about to do.&lt;&#x2F;p&gt;

    &lt;&#x2F;cite&gt;
    
&lt;&#x2F;div&gt;
&lt;p&gt;&lt;em&gt;Charles Ingvar Jönsson&lt;&#x2F;em&gt; would probably know about the Swedish proverb: &amp;quot;Finns det hjärterum så finns det stjärterum&amp;quot;. It means that one can always make space for anyone that wants to join, even if it is crowded: the crowd just needs to squeeze together more. So dear &lt;em&gt;Charles&lt;&#x2F;em&gt; would be pretty terrified if he knew what I am about to do.&lt;&#x2F;p&gt;
&lt;p&gt;In nature the population size would continuously fluctuate. But in my synthetically created world the size will be constant. That means: for any number of new offsprings, as many of the old population need to scoot over, and out!&lt;&#x2F;p&gt;
&lt;p&gt;There are many ways this can be done. Some are more imaginative than others. &lt;em&gt;The Purge&lt;&#x2F;em&gt; might have an idea on how this should be done. But I will just sort the old population by their &lt;em&gt;fitness&lt;&#x2F;em&gt; and keep just so many as are needed to keep a constant population size when the new generation is added. &lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;elixir&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-elixir &quot;&gt;&lt;code class=&quot;language-elixir&quot; data-lang=&quot;elixir&quot;&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;prune&lt;&#x2F;span&gt;&lt;span&gt;(sorted_population_data, prune_count) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;do
&lt;&#x2F;span&gt;&lt;span&gt;    preserve_count = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Enum&lt;&#x2F;span&gt;&lt;span&gt;.count(sorted_population_data) - prune_count
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Enum&lt;&#x2F;span&gt;&lt;span&gt;.take(sorted_population_data, preserve_count)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Prune. That sounds pretty &lt;em&gt;cold&lt;&#x2F;em&gt;. But that&#x27;s the process where I simply &amp;quot;cut off&amp;quot; some branches that, in this case, are too long. This allows our population to become ever more fit for its task.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;em&gt;The snapshot of the process: &lt;code&gt;prune(sorted_population_data, num_parents) ++ offsprings&lt;&#x2F;code&gt;&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;evolving-a-better-fit&quot;&gt;Evolving a better fit&lt;&#x2F;h3&gt;
&lt;p&gt;The goal is to find a good-enough chromosome, or route, for our salesman. Each component plays a crucial part to get to that goal. But it&#x27;s a process that requires many trial and errors. That&#x27;s why there is randomness and pruning involved. The randomness allows the algorithm to try new and innovative routes never before considered. And while many of them are utterly poor, somewhere a nugget of gold is found.&lt;&#x2F;p&gt;
&lt;p&gt;The evolutionary loop will take in a population of chromosomes, select a cadre of parents and let them reproduce, followed by pruning the population to make space for the next generation. This new population will be passed on to another go at evolution. I reason that it is possible to have this loop continue until a good enough fit has been reached (such as when improvements from one generation to the next are stagnating). However, I&#x27;ve decided to use a hard generational limit instead because I&#x27;m feeling lazy.&lt;&#x2F;p&gt;
&lt;p&gt;Once the generational limit is reached, the chromosome with the shortest route in the current population will be returned.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;elixir&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-elixir &quot;&gt;&lt;code class=&quot;language-elixir&quot; data-lang=&quot;elixir&quot;&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;evolve&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;      sorted_population_data, 
&lt;&#x2F;span&gt;&lt;span&gt;      generation_n,  
&lt;&#x2F;span&gt;&lt;span&gt;      %{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;generation_limit:&lt;&#x2F;span&gt;&lt;span&gt; generation_limit}
&lt;&#x2F;span&gt;&lt;span&gt;    ) when generation_n == generation_limit &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;do
&lt;&#x2F;span&gt;&lt;span&gt;    
&lt;&#x2F;span&gt;&lt;span&gt;    [chromosome_data] = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Enum&lt;&#x2F;span&gt;&lt;span&gt;.take(sorted_population_data, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    total_fitness = general_inverse_fitness(sorted_population_data)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    %{
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;distance:&lt;&#x2F;span&gt;&lt;span&gt; chromosome_data.distance, 
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;chromosome:&lt;&#x2F;span&gt;&lt;span&gt; chromosome_data.chromosome, 
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;generation:&lt;&#x2F;span&gt;&lt;span&gt; generation_n, 
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;population_fitness:&lt;&#x2F;span&gt;&lt;span&gt; total_fitness
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;evolve&lt;&#x2F;span&gt;&lt;span&gt;(sorted_population_data, generation_n, memo) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;do
&lt;&#x2F;span&gt;&lt;span&gt;    %{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;num_parents:&lt;&#x2F;span&gt;&lt;span&gt; num_parents} = memo
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    parents = select_parents(sorted_population_data, num_parents)
&lt;&#x2F;span&gt;&lt;span&gt;    offsprings = 
&lt;&#x2F;span&gt;&lt;span&gt;      parents 
&lt;&#x2F;span&gt;&lt;span&gt;      |&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Enum&lt;&#x2F;span&gt;&lt;span&gt;.chunk_every(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;      |&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Enum&lt;&#x2F;span&gt;&lt;span&gt;.flat_map(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span&gt;[parent_1, parent_2] -&amp;gt; 
&lt;&#x2F;span&gt;&lt;span&gt;        [
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;TSP&lt;&#x2F;span&gt;&lt;span&gt;.crossover(parent_1.chromosome, parent_2.chromosome) |&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;TSP&lt;&#x2F;span&gt;&lt;span&gt;.mutation(),
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;TSP&lt;&#x2F;span&gt;&lt;span&gt;.crossover(parent_2.chromosome, parent_1.chromosome) |&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;TSP&lt;&#x2F;span&gt;&lt;span&gt;.mutation()
&lt;&#x2F;span&gt;&lt;span&gt;        ]
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;      |&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Enum&lt;&#x2F;span&gt;&lt;span&gt;.map(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn&lt;&#x2F;span&gt;&lt;span&gt; chromosome -&amp;gt; 
&lt;&#x2F;span&gt;&lt;span&gt;        %{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;chromosome:&lt;&#x2F;span&gt;&lt;span&gt; chromosome, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;distance:&lt;&#x2F;span&gt;&lt;span&gt; fitness_function(chromosome)}
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    new_population_data = 
&lt;&#x2F;span&gt;&lt;span&gt;      prune(sorted_population_data, num_parents) ++ offsprings
&lt;&#x2F;span&gt;&lt;span&gt;      |&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Enum&lt;&#x2F;span&gt;&lt;span&gt;.sort_by(
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn&lt;&#x2F;span&gt;&lt;span&gt; chromosome_data -&amp;gt; chromosome_data.distance &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:asc
&lt;&#x2F;span&gt;&lt;span&gt;      )
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    evolve(new_population_data, generation_n + &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, memo)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;run&lt;&#x2F;span&gt;&lt;span&gt;(population_size \\ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;100&lt;&#x2F;span&gt;&lt;span&gt;, generation_limit \\ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;250&lt;&#x2F;span&gt;&lt;span&gt;, reproduction_rate \\ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0.3&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;do
&lt;&#x2F;span&gt;&lt;span&gt;    population = initialize_population(population_size)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    population_data = 
&lt;&#x2F;span&gt;&lt;span&gt;      population
&lt;&#x2F;span&gt;&lt;span&gt;      |&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Enum&lt;&#x2F;span&gt;&lt;span&gt;.map(
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn&lt;&#x2F;span&gt;&lt;span&gt; chromosome -&amp;gt; %{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;chromosome:&lt;&#x2F;span&gt;&lt;span&gt; chromosome, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;distance:&lt;&#x2F;span&gt;&lt;span&gt; fitness_function(chromosome)} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;span&gt;        )
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    sorted_population = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Enum&lt;&#x2F;span&gt;&lt;span&gt;.sort_by(
&lt;&#x2F;span&gt;&lt;span&gt;      population_data,
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn&lt;&#x2F;span&gt;&lt;span&gt; %{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;distance:&lt;&#x2F;span&gt;&lt;span&gt; distance} -&amp;gt; distance  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:asc
&lt;&#x2F;span&gt;&lt;span&gt;    )
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    num_parents = num_parents(population_size, reproduction_rate)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    evolve(
&lt;&#x2F;span&gt;&lt;span&gt;      sorted_population, 
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, 
&lt;&#x2F;span&gt;&lt;span&gt;      %{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;num_parents:&lt;&#x2F;span&gt;&lt;span&gt; num_parents, 
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;generation_limit:&lt;&#x2F;span&gt;&lt;span&gt; generation_limit
&lt;&#x2F;span&gt;&lt;span&gt;      }
&lt;&#x2F;span&gt;&lt;span&gt;    )
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Let&#x27;s say that someone like me created all these components and put them in a module called &lt;code&gt;TSP&lt;&#x2F;code&gt; (Traveling Salesman Problem in short). The way I would initiate the evolution would be to call the &lt;code&gt;run&lt;&#x2F;code&gt; function like this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;elixir&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-elixir &quot;&gt;&lt;code class=&quot;language-elixir&quot; data-lang=&quot;elixir&quot;&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;TSP&lt;&#x2F;span&gt;&lt;span&gt;.run(aggregator_pid, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;100&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1000&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0.3&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The response would be:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;elixir&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-elixir &quot;&gt;&lt;code class=&quot;language-elixir&quot; data-lang=&quot;elixir&quot;&gt;&lt;span&gt;%{
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;distance: 87.68567015836446&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;chromosome: &lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;9&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;13&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;15&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;14&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;17&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;8&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;16&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;6&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;7&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;11&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;12&lt;&#x2F;span&gt;&lt;span&gt;],
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;generation: 1000&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;population_fitness: 0.946812150303661
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;To me, this looks like a functional algorithm. But don&#x27;t take my word for it. Take these graphs instead:&lt;&#x2F;p&gt;
&lt;div class=&quot;layout-grid mb-4&quot;&gt;

    



    



    



    
    &lt;div class=&quot;image-container &quot;&gt;
        &lt;div&gt;
            &lt;img
                alt=&quot;&quot;
                src=&quot;pop-fitness-rate-0_3.svg&quot;
                height=&quot;254&quot; 
                width=&quot;265&quot;
            &#x2F;&gt;
        &lt;&#x2F;div&gt;
        &lt;div&gt;&lt;&#x2F;div&gt;
    &lt;&#x2F;div&gt;


  

    



    



    



    
    &lt;div class=&quot;image-container &quot;&gt;
        &lt;div&gt;
            &lt;img
                alt=&quot;&quot;
                src=&quot;distance-rate-0_3.svg&quot;
                height=&quot;254&quot; 
                width=&quot;269&quot;
            &#x2F;&gt;
        &lt;&#x2F;div&gt;
        &lt;div&gt;&lt;&#x2F;div&gt;
    &lt;&#x2F;div&gt;



&lt;&#x2F;div&gt;
&lt;p&gt;In general, a population&#x27;s (inverse) fitness will increase over time, but it will fluctuate as new and untested offsprings are introduced to the mix. A &lt;em&gt;shortest distance&lt;&#x2F;em&gt; may remain the current best alternative for generations upon generations, until the seeming equalibirum is punctuated by a burst of improvement. By combining these views, we can see that the population is ever improving - even if we can&#x27;t detect it right away by the currently shortest route.&lt;&#x2F;p&gt;
&lt;p&gt;Here&#x27;s a peak at the routes (and at which generation) the algorithm discovered them during one run of the code:&lt;&#x2F;p&gt;
&lt;div class=&quot;layout-row center mt-4&quot;&gt;



&lt;video width=&quot;600&quot; height=&quot;337&quot; muted controls&gt;
    &lt;source src=&quot;https:&amp;#x2F;&amp;#x2F;abjork.land&amp;#x2F;articles&amp;#x2F;elixir&amp;#x2F;optimizing-travel-routes-applying-genetic-algorithms&amp;#x2F;best-route-gen.webm&quot; type=&quot;video&amp;#x2F;webm&quot;&gt;
    
    Your browser does not support this video
&lt;&#x2F;video&gt;   
&lt;&#x2F;div&gt;

&lt;div class=&quot;layout-row center&quot;&gt;
    &lt;p&gt;&lt;em&gt;&lt;code&gt;population_size=100, generation_limit=1000, reproduction_rate=0.3&lt;&#x2F;code&gt;&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;

&lt;&#x2F;div&gt;
&lt;h2 id=&quot;testing-different-scenarios&quot;&gt;Testing different scenarios&lt;&#x2F;h2&gt;
&lt;p&gt;The complete code and &lt;a href=&quot;https:&#x2F;&#x2F;gist.github.com&#x2F;andersbjorkland&#x2F;3ee7c4dc426fc0d0ab358bb6158080f1&quot;&gt;livebook document can be found as a Github Gist&lt;&#x2F;a&gt;. You are free to copy it and experiment with it as you see fit. I&#x27;ve certainly experimented with it, so let me share a few scenarios with you!&lt;&#x2F;p&gt;
&lt;p&gt;Each scenario has either population changed, or parent ratio. Each scenario is showing two charts. The first chart shows how the sum of a population&#x27;s general (inverse) fitness increases over the generations. The second chart shows the distance of each generation&#x27;s shortest route.&lt;&#x2F;p&gt;
&lt;p&gt;Some patterns can be seen for these scenarios. They all follow a taper-off curve, almost a logarithmic curve, for the population fitness; meaning the population see some major improvements through the initial generations and then the improvements are much smaller between generations later on. Another seeming pattern is the impact that a population size have. Small populations might struggle to find routes shorter than 100 before hitting the 1000:th generation. A similar is observed with a small parent ratio.&lt;&#x2F;p&gt;
&lt;div class=&quot;layout-row center&quot;&gt;&lt;b&gt;When population is small&lt;&#x2F;b&gt; (&lt;code&gt;population=50, parent_ratio=0.3&lt;&#x2F;code&gt;)&lt;&#x2F;div&gt;  
&lt;div class=&quot;layout-grid mb-4&quot;&gt;

    



    



    



    
    &lt;div class=&quot;image-container &quot;&gt;
        &lt;div&gt;
            &lt;img
                alt=&quot;&quot;
                src=&quot;pop-fitness-pop-50-0_3.svg&quot;
                height=&quot;254&quot; 
                width=&quot;265&quot;
            &#x2F;&gt;
        &lt;&#x2F;div&gt;
        &lt;div&gt;&lt;&#x2F;div&gt;
    &lt;&#x2F;div&gt;


  

    



    



    



    
    &lt;div class=&quot;image-container &quot;&gt;
        &lt;div&gt;
            &lt;img
                alt=&quot;&quot;
                src=&quot;distance-pop-50-0_3.svg&quot;
                height=&quot;254&quot; 
                width=&quot;269&quot;
            &#x2F;&gt;
        &lt;&#x2F;div&gt;
        &lt;div&gt;&lt;&#x2F;div&gt;
    &lt;&#x2F;div&gt;



&lt;&#x2F;div&gt;
&lt;div class=&quot;layout-row center&quot;&gt;&lt;b&gt;When population is large&lt;&#x2F;b&gt; (&lt;code&gt;population=300, parent_ratio=0.3&lt;&#x2F;code&gt;)&lt;&#x2F;div&gt;  
&lt;div class=&quot;layout-grid mb-4&quot;&gt;

    



    



    



    
    &lt;div class=&quot;image-container &quot;&gt;
        &lt;div&gt;
            &lt;img
                alt=&quot;&quot;
                src=&quot;pop-fitness-pop-300-0_3.svg&quot;
                height=&quot;248&quot; 
                width=&quot;265&quot;
            &#x2F;&gt;
        &lt;&#x2F;div&gt;
        &lt;div&gt;&lt;&#x2F;div&gt;
    &lt;&#x2F;div&gt;


  

    



    



    



    
    &lt;div class=&quot;image-container &quot;&gt;
        &lt;div&gt;
            &lt;img
                alt=&quot;&quot;
                src=&quot;distance-pop-300-0_3.svg&quot;
                height=&quot;254&quot; 
                width=&quot;269&quot;
            &#x2F;&gt;
        &lt;&#x2F;div&gt;
        &lt;div&gt;&lt;&#x2F;div&gt;
    &lt;&#x2F;div&gt;



&lt;&#x2F;div&gt;
&lt;div class=&quot;layout-row center&quot;&gt;&lt;b&gt;When parent ratio is small&lt;&#x2F;b&gt; (&lt;code&gt;population=100, parent_ratio=0.1&lt;&#x2F;code&gt;)&lt;&#x2F;div&gt;  
&lt;div class=&quot;layout-grid mb-4&quot;&gt;

    



    



    



    
    &lt;div class=&quot;image-container &quot;&gt;
        &lt;div&gt;
            &lt;img
                alt=&quot;&quot;
                src=&quot;pop-fitness-rate-0_01.svg&quot;
                height=&quot;254&quot; 
                width=&quot;265&quot;
            &#x2F;&gt;
        &lt;&#x2F;div&gt;
        &lt;div&gt;&lt;&#x2F;div&gt;
    &lt;&#x2F;div&gt;


  

    



    



    



    
    &lt;div class=&quot;image-container &quot;&gt;
        &lt;div&gt;
            &lt;img
                alt=&quot;&quot;
                src=&quot;distance-rate-0_01.svg&quot;
                height=&quot;254&quot; 
                width=&quot;269&quot;
            &#x2F;&gt;
        &lt;&#x2F;div&gt;
        &lt;div&gt;&lt;&#x2F;div&gt;
    &lt;&#x2F;div&gt;



&lt;&#x2F;div&gt;  
&lt;div class=&quot;layout-row center&quot;&gt;&lt;b&gt;When parent ratio is large&lt;&#x2F;b&gt; (&lt;code&gt;population=100, parent_ratio=0.75&lt;&#x2F;code&gt;)&lt;&#x2F;div&gt;  
&lt;div class=&quot;layout-grid mb-4&quot;&gt;

    



    



    



    
    &lt;div class=&quot;image-container &quot;&gt;
        &lt;div&gt;
            &lt;img
                alt=&quot;&quot;
                src=&quot;pop-fitness-rate-0_75.svg&quot;
                height=&quot;254&quot; 
                width=&quot;265&quot;
            &#x2F;&gt;
        &lt;&#x2F;div&gt;
        &lt;div&gt;&lt;&#x2F;div&gt;
    &lt;&#x2F;div&gt;


  

    



    



    



    
    &lt;div class=&quot;image-container &quot;&gt;
        &lt;div&gt;
            &lt;img
                alt=&quot;&quot;
                src=&quot;distance-rate-0_75.svg&quot;
                height=&quot;254&quot; 
                width=&quot;269&quot;
            &#x2F;&gt;
        &lt;&#x2F;div&gt;
        &lt;div&gt;&lt;&#x2F;div&gt;
    &lt;&#x2F;div&gt;



&lt;&#x2F;div&gt;  
&lt;h2 id=&quot;reflecting-on-the-generations-past&quot;&gt;Reflecting on the generations past&lt;&#x2F;h2&gt;
&lt;p&gt;Genetic Algorithms are useful when we might want a solution that is &amp;quot;good enough&amp;quot;, or if we don&#x27;t know what a good solution might even look like. I was lucky today that I withstood the temptation of chasing a hotdog and managed to arrive at a solution (Charles Ingvar Jönsson would be proud, as well as the traveling salesman). I can&#x27;t say if you managed to withstand it, but I&#x27;m happy that you allowed me to draw a route for you.&lt;&#x2F;p&gt;
&lt;p&gt;I find Genetic Algorithms incredibly fun to work with. This has been the second time that I&#x27;m exploring the subject and I would like to do it again. Besides finding solutions to interesting problems I also find these additional benefits:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Trying different data representations and structures can unlock huge perfomance improvements - which is fun!&lt;&#x2F;li&gt;
&lt;li&gt;Recursion, pattern matching, and (if you check out the &lt;a href=&quot;https:&#x2F;&#x2F;gist.github.com&#x2F;andersbjorkland&#x2F;3ee7c4dc426fc0d0ab358bb6158080f1&quot;&gt;Livebook document&lt;&#x2F;a&gt;) concurrency! Working with Genetic Algorithms is a good exercise to deepen Elixir skills.&lt;&#x2F;li&gt;
&lt;li&gt;Fitting each different component together in a recursive loop that makes sense is very satisfying!&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;I hope you had a good time reading this, and hopefully learned something new. I sure did! &lt;&#x2F;p&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>Intro to Genetic Algorithms with Elixir</title>
        <published>2024-03-21T00:00:00+00:00</published>
        <updated>2024-03-25T00:00:00+00:00</updated>
        <author>
          <name>Anders Björkland</name>
        </author>
        <link rel="alternate" href="https://abjork.land/articles/elixir/intro-to-genetic-algorithms-with-elixir/" type="text/html"/>
        <id>https://abjork.land/articles/elixir/intro-to-genetic-algorithms-with-elixir/</id>
        <content type="html">&lt;div class=&quot;article-header&quot;&gt;
    










&lt;img
        alt=&quot;133&quot;
        src=&quot;https:&amp;#x2F;&amp;#x2F;abjork.land&amp;#x2F;processed_images&amp;#x2F;hero.9c60893338d633b5.jpg&quot;
        srcset=&quot;https:&amp;#x2F;&amp;#x2F;abjork.land&amp;#x2F;processed_images&amp;#x2F;hero.38c6b3a9afd8a180.jpg 240w,
                    https:&amp;#x2F;&amp;#x2F;abjork.land&amp;#x2F;processed_images&amp;#x2F;hero.9c60893338d633b5.jpg 400w,
                    https:&amp;#x2F;&amp;#x2F;abjork.land&amp;#x2F;processed_images&amp;#x2F;hero.0dc6effd0a792513.jpg 600w&quot;
        sizes=&quot;(max-width: 240px) 200px,
                    (max-width: 400px) 360px,
                    600px&quot;
&#x2F;&gt;


    &lt;div class=&quot;text-content&quot;&gt;
        &lt;h1 class=&quot;article-title&quot;&gt;
            &lt;div class=&quot;title&quot;&gt;Intro to Genetic Algorithms with Elixir&lt;&#x2F;div&gt;
            
        &lt;&#x2F;h1&gt;
    &lt;&#x2F;div&gt;
    

 

 

&lt;div class=&quot;tag-list absolute&quot;&gt;
    
        
        &lt;div&gt;&lt;a href=&quot;https:&#x2F;&#x2F;abjork.land&#x2F;tags&#x2F;elixir&#x2F;&quot; class=&quot;hover-bold&quot;&gt;elixir&lt;&#x2F;a&gt;&lt;&#x2F;div&gt;
        
        &lt;div&gt;&lt;a href=&quot;https:&#x2F;&#x2F;abjork.land&#x2F;tags&#x2F;livebook&#x2F;&quot; class=&quot;hover-bold&quot;&gt;livebook&lt;&#x2F;a&gt;&lt;&#x2F;div&gt;
        
        &lt;div&gt;&lt;a href=&quot;https:&#x2F;&#x2F;abjork.land&#x2F;tags&#x2F;algorithms&#x2F;&quot; class=&quot;hover-bold&quot;&gt;algorithms&lt;&#x2F;a&gt;&lt;&#x2F;div&gt;
        
    
&lt;&#x2F;div&gt;



&lt;&#x2F;div&gt;&lt;div class=&quot;author-container&quot;&gt;
    &lt;p&gt;Written by Anders Björkland, Web Developer at &lt;a href=&quot;https:&amp;#x2F;&amp;#x2F;www.umain.com&amp;#x2F;&quot;&gt;Umain&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Genetic_algorithm&quot;&gt;Genetic Algorithms (GA)&lt;&#x2F;a&gt; are algorithms inspired by the evolutionary process found in nature. Sometimes these are called Stochastic Algorithms as they make use of randomness to find an optimal solution, but with features such a &amp;quot;natural selection&amp;quot; to remove less suitable solutions while generating new possible ones. &lt;&#x2F;p&gt;
&lt;p&gt;Genetic Algorithms are found in &lt;a href=&quot;https:&#x2F;&#x2F;ieeexplore.ieee.org&#x2F;document&#x2F;537939&quot;&gt;route optimzation problems&lt;&#x2F;a&gt;, in engineering (e.g. &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Evolved_antenna&quot;&gt;evolved antennas&lt;&#x2F;a&gt;), in &lt;a href=&quot;https:&#x2F;&#x2F;arxiv.org&#x2F;pdf&#x2F;1707.05377.pdf&quot;&gt;epidemic mitigation&lt;&#x2F;a&gt;, and much more. &lt;&#x2F;p&gt;
&lt;p&gt;In this article we will solve a simple problem: &amp;quot;what is the target phrase?&amp;quot;. This is not a real-world problem, but suitable enough to showcase each component of a Genetic Algorithm; like a &amp;quot;Hello World&amp;quot; of Genetic Algorithms. With the foundation provided by this, I hope this can give you a better understanding of GAs, and an appreciation for using Elixir with them.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;anatomy-of-a-genetic-algorithm&quot;&gt;Anatomy of a Genetic Algorithm&lt;&#x2F;h2&gt;
&lt;p&gt;A genetic algorithm will try to promote the possible soultions (&lt;em&gt;chromosomes&lt;&#x2F;em&gt;) with the best &amp;quot;fitness&amp;quot; and combine them into a new possible solution, which will inherit features of both. While it does this, it may introduce some mutations (small changes that were not part of its &amp;quot;parents&amp;quot; chromosomes). &lt;&#x2F;p&gt;
&lt;p&gt;In essence, these are the genetic algorithm&#x27;s components:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Chromosomes&lt;&#x2F;em&gt;&lt;br &#x2F;&gt;
possible solutions&lt;&#x2F;li&gt;
&lt;li&gt;Initial population&lt;br &#x2F;&gt;
&lt;em&gt;random chromosomes&lt;&#x2F;em&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Fitness evaluation&lt;&#x2F;li&gt;
&lt;li&gt;Selection&lt;br &#x2F;&gt;
&lt;em&gt;better fitness score are more likely to be chosen as &amp;quot;parents&amp;quot;&lt;&#x2F;em&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Crossover&lt;br &#x2F;&gt;
&lt;em&gt;&amp;quot;mating&amp;quot; of parents to produce an &amp;quot;offspring&amp;quot;, a new chromosome&lt;&#x2F;em&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Mutation&lt;br &#x2F;&gt;
&lt;em&gt;small random changes in a chromosome&lt;&#x2F;em&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Evolution Loop&lt;br &#x2F;&gt;
&lt;em&gt;repeating the steps of &lt;strong&gt;selection&lt;&#x2F;strong&gt; -&amp;gt; &lt;strong&gt;crossover&lt;&#x2F;strong&gt; -&amp;gt; &lt;strong&gt;mutation&lt;&#x2F;strong&gt; to arrive at a chromosome that is the best fit for the problem at the hand&lt;&#x2F;em&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;We will add an &amp;quot;elitism&amp;quot; component to this which will make sure that the best possible solutions are never discarded. This is a component that may act dynamic depending on where we are in the evolution loop. But initially we will keep it static. &lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;For anyone who has set up a Livebook application and want to experiment, just &lt;a href=&quot;https:&#x2F;&#x2F;gist.github.com&#x2F;andersbjorkland&#x2F;99a96a26135fea7438ef90cfc354e1ed&quot;&gt;grab the source from my &lt;strong&gt;gist&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt; (copy) and click &lt;em&gt;Open&lt;&#x2F;em&gt;&#x2F;&lt;em&gt;From source&lt;&#x2F;em&gt;. 
If you haven&#x27;t set up a Livebook application, read about how to do that in my article &lt;a href=&quot;https:&#x2F;&#x2F;abjork.land&#x2F;articles&#x2F;elixir&#x2F;interactive-documents-with-livebook&#x2F;#hosting-livebook-on-hugging-face&quot;&gt;Interactive documents with Livebook&lt;&#x2F;a&gt;. You can set it up on free hosting via Hugging Face. &lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h3 id=&quot;the-target-phrase&quot;&gt;The target phrase&lt;&#x2F;h3&gt;
&lt;p&gt;Our goal is via random chromosomes start selecting the best fit ones to crossover with each other. They will be selected based on how well they fit with the target phrase. It will be a phrase based on characters from &#x27;a&#x27; to &#x27;z&#x27;, with space included. Let&#x27;s define this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;elixir&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-elixir &quot;&gt;&lt;code class=&quot;language-elixir&quot; data-lang=&quot;elixir&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;defmodule &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;GeneticString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;do
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;  # We define the target phrase here but it might as well be passed in via the evolve function.
&lt;&#x2F;span&gt;&lt;span&gt;  @&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;target_phrase &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;The solution is yet to emerge&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;  # Defines which characters can be present in the target phrase
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;defp &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;possible_characters&lt;&#x2F;span&gt;&lt;span&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;do
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Enum&lt;&#x2F;span&gt;&lt;span&gt;.to_list(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;?a&lt;&#x2F;span&gt;&lt;span&gt;..&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;?z&lt;&#x2F;span&gt;&lt;span&gt;) ++
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Enum&lt;&#x2F;span&gt;&lt;span&gt;.to_list(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;?A&lt;&#x2F;span&gt;&lt;span&gt;..&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;?Z&lt;&#x2F;span&gt;&lt;span&gt;) ++
&lt;&#x2F;span&gt;&lt;span&gt;      [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;?_&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;?\s&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;the-first-chromosome&quot;&gt;The first chromosome&lt;&#x2F;h3&gt;
&lt;p&gt;The first step towards arriving at a solution is a function to generate a random chromosome. It will produce a chromosome of length &lt;code&gt;length&lt;&#x2F;code&gt; by random characters present in &lt;code&gt;possible_characters&lt;&#x2F;code&gt;. This function will be used to generate the initial population.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;elixir&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-elixir &quot;&gt;&lt;code class=&quot;language-elixir&quot; data-lang=&quot;elixir&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;defmodule &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;GeneticString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;do
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;  # ...
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;  # Generate a random chromosome (potential solution)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;defp &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;random_chromosome&lt;&#x2F;span&gt;&lt;span&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;do
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Enum&lt;&#x2F;span&gt;&lt;span&gt;.map(
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;..&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;.length(@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;target_phrase&lt;&#x2F;span&gt;&lt;span&gt;),  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# We will help the GA along the way by letting it set correct length
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn&lt;&#x2F;span&gt;&lt;span&gt; _ -&amp;gt; possible_characters() |&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Enum&lt;&#x2F;span&gt;&lt;span&gt;.random() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;span&gt;    )
&lt;&#x2F;span&gt;&lt;span&gt;    |&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;List&lt;&#x2F;span&gt;&lt;span&gt;.to_string()
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;evaluating-fitness&quot;&gt;Evaluating fitness&lt;&#x2F;h3&gt;
&lt;p&gt;The fitness evaluation is an important part in the genetic algorithm. It will tell the algorithm when it is moving closer towards a solution. In our case, we will do a fairly simple evalutaion. The fitness score will represent how many characters are correctly placed in the chromosome when compared to &lt;code&gt;target_phrase&lt;&#x2F;code&gt;. A more evolved fitness evaluation might take into account its length as well as maybe its &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Levenshtein_distance&quot;&gt;Levenshtein distance&lt;&#x2F;a&gt;, and so on. &lt;&#x2F;p&gt;
&lt;p&gt;We will see that our fitness evaluation will also take a map, a &amp;quot;memo&amp;quot; of already evaluated chromosomes. This way an already evaluated chromosome will not have to be calculated again. This would be a trade-off between memory&#x2F;retrieval and calculation cycles.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;elixir&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-elixir &quot;&gt;&lt;code class=&quot;language-elixir&quot; data-lang=&quot;elixir&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;defmodule &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;GeneticString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;do
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;  # ...
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;  # Calculate fitness based on if a character is placed in the correct n:th place.
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;defp &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;fitness_calc&lt;&#x2F;span&gt;&lt;span&gt;(chromosome) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;do
&lt;&#x2F;span&gt;&lt;span&gt;    chromosome
&lt;&#x2F;span&gt;&lt;span&gt;    |&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;.graphemes()
&lt;&#x2F;span&gt;&lt;span&gt;    |&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Enum&lt;&#x2F;span&gt;&lt;span&gt;.zip(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;.graphemes(@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;target_phrase&lt;&#x2F;span&gt;&lt;span&gt;))
&lt;&#x2F;span&gt;&lt;span&gt;    |&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Enum&lt;&#x2F;span&gt;&lt;span&gt;.count(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span&gt;{char1, char2} -&amp;gt; char1 == char2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;  # Either retrieve fitness score for a chromosome or calculate it and place it in the map
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;defp &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;fitness&lt;&#x2F;span&gt;&lt;span&gt;(chromosome, memo \\ %{}) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;do
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Map&lt;&#x2F;span&gt;&lt;span&gt;.get(memo, chromosome) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;do
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;nil &lt;&#x2F;span&gt;&lt;span&gt;-&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;        fitness = fitness_calc(chromosome)
&lt;&#x2F;span&gt;&lt;span&gt;        updated_memo = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Map&lt;&#x2F;span&gt;&lt;span&gt;.put(memo, chromosome, fitness)
&lt;&#x2F;span&gt;&lt;span&gt;        {fitness, updated_memo}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;      fitness -&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;        {fitness, memo}
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;  # Updates the fitness map for all chromosomes
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;defp &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;memoize_fitness&lt;&#x2F;span&gt;&lt;span&gt;([], memo), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;do:&lt;&#x2F;span&gt;&lt;span&gt; memo
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;defp &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;memoize_fitness&lt;&#x2F;span&gt;&lt;span&gt;([chromosome | tail], memo) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;do
&lt;&#x2F;span&gt;&lt;span&gt;    {_, new_memo} = fitness(chromosome, memo)
&lt;&#x2F;span&gt;&lt;span&gt;    memoize_fitness(tail, new_memo)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;parents-offsprings-and-mutations&quot;&gt;Parents, offsprings and mutations&lt;&#x2F;h3&gt;
&lt;p&gt;We have now defined fitness and chromosomes. Let&#x27;s go to the next part, which is selecting parents to produce offsprings via the components &lt;code&gt;crossover&lt;&#x2F;code&gt; and &lt;code&gt;mutation&lt;&#x2F;code&gt;. The idea is to get at least one parent from the ones with the best fitness score, and the other parent from the broader population. Once selected, these will be passed to the crossover function to produce the offspring, and a mutation function that will introduce a bit of variation. Currently we will only make a mutation in one randomly chosen spot.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;elixir&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-elixir &quot;&gt;&lt;code class=&quot;language-elixir&quot; data-lang=&quot;elixir&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;defmodule &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;GeneticString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;do
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;  # ...
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;  # Randomly select two &amp;quot;parents&amp;quot; from the provided list of chromosomes
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;defp &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;select_parents&lt;&#x2F;span&gt;&lt;span&gt;([]), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;do: &lt;&#x2F;span&gt;&lt;span&gt;[]
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;defp &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;select_parents&lt;&#x2F;span&gt;&lt;span&gt;(possible_parents) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;do
&lt;&#x2F;span&gt;&lt;span&gt;    possible_parents
&lt;&#x2F;span&gt;&lt;span&gt;    |&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Enum&lt;&#x2F;span&gt;&lt;span&gt;.shuffle()
&lt;&#x2F;span&gt;&lt;span&gt;    |&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Enum&lt;&#x2F;span&gt;&lt;span&gt;.take(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;  # Combine first part of one chromosome to the second part of another. 
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;  # The resulting chromosome will have features from both &amp;quot;parents&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;defp &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;crossover&lt;&#x2F;span&gt;&lt;span&gt;(chromosome1, chromosome2) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;do
&lt;&#x2F;span&gt;&lt;span&gt;    crossover_point = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Enum&lt;&#x2F;span&gt;&lt;span&gt;.random(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;..(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;.length(chromosome1) - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;))
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;.slice(chromosome1, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, crossover_point) &amp;lt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;.slice(chromosome2, crossover_point, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;.length(chromosome2) - crossover_point)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;  # Introduce a random mutation to a chromsome. 
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;  # The spot where the mutation will happen is randomly chosen, as is the possible character introduced.
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;defp &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;mutation&lt;&#x2F;span&gt;&lt;span&gt;(chromosome) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;do
&lt;&#x2F;span&gt;&lt;span&gt;    mutation_point = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Enum&lt;&#x2F;span&gt;&lt;span&gt;.random(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;..(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;.length(chromosome) - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;))
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;.slice(chromosome, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, mutation_point) &amp;lt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;List&lt;&#x2F;span&gt;&lt;span&gt;.to_string([possible_characters() |&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Enum&lt;&#x2F;span&gt;&lt;span&gt;.random()]) &amp;lt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;.slice(
&lt;&#x2F;span&gt;&lt;span&gt;        chromosome,
&lt;&#x2F;span&gt;&lt;span&gt;        mutation_point + &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;.length(chromosome) - (mutation_point + &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;      )
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;evolution-the-iterative-process-to-produce-best-fit-chromosome&quot;&gt;Evolution - the iterative process to produce best fit chromosome&lt;&#x2F;h3&gt;
&lt;p&gt;We will be using a evolve mechanism where we will initialize a starter population with a radom chromosomes and set an &lt;em&gt;elitism rate&lt;&#x2F;em&gt;. These initial values will be passed into a recursive evolve mechanism (our evolution loop). Once we&#x27;ve either gotten a perfect fitness score, or we have hit the generation limit, we will return the best suited chromosome. &lt;&#x2F;p&gt;
&lt;p&gt;(While we are at it we will also bundle in which iteration - &lt;em&gt;n&lt;&#x2F;em&gt;:th generation - we were at when the chromosome was produced.)&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;elixir&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-elixir &quot;&gt;&lt;code class=&quot;language-elixir&quot; data-lang=&quot;elixir&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;defmodule &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;GeneticString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;do
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;  # ...
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;  # Recursive function that will continue evolving the chromosomes until a perfect fitness score is reached, 
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;  # or the generation limit has been reached.
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;defp &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;evolve_mechanism&lt;&#x2F;span&gt;&lt;span&gt;(generation, %{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;population: &lt;&#x2F;span&gt;&lt;span&gt;[best_match | _]}, _elitism, _fitness_memo)
&lt;&#x2F;span&gt;&lt;span&gt;      when generation.limit == generation.i,
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;do:&lt;&#x2F;span&gt;&lt;span&gt; %{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;chromosome:&lt;&#x2F;span&gt;&lt;span&gt; best_match, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;generation:&lt;&#x2F;span&gt;&lt;span&gt; generation.i}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;defp &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;evolve_mechanism&lt;&#x2F;span&gt;&lt;span&gt;(generation, population_data, elitism, fitness_memo) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;do
&lt;&#x2F;span&gt;&lt;span&gt;    memoized_fitness = memoize_fitness(population_data.population, fitness_memo)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;    # Sort population based on fitness
&lt;&#x2F;span&gt;&lt;span&gt;    sorted_population =
&lt;&#x2F;span&gt;&lt;span&gt;      population_data.population
&lt;&#x2F;span&gt;&lt;span&gt;      |&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Enum&lt;&#x2F;span&gt;&lt;span&gt;.sort_by(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn&lt;&#x2F;span&gt;&lt;span&gt; chromosome -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Map&lt;&#x2F;span&gt;&lt;span&gt;.get(memoized_fitness, chromosome) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:desc&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;    # Select number of population that will have a higher chance to survive, and produce offspring
&lt;&#x2F;span&gt;&lt;span&gt;    elite_population =
&lt;&#x2F;span&gt;&lt;span&gt;      sorted_population
&lt;&#x2F;span&gt;&lt;span&gt;      |&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Enum&lt;&#x2F;span&gt;&lt;span&gt;.take(elitism.count)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    rest_population = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Enum&lt;&#x2F;span&gt;&lt;span&gt;.drop(sorted_population, elitism.count) |&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Enum&lt;&#x2F;span&gt;&lt;span&gt;.shuffle()
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    possible_parents = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;case&lt;&#x2F;span&gt;&lt;span&gt; length(elite_population) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;do
&lt;&#x2F;span&gt;&lt;span&gt;      x when x &amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2 &lt;&#x2F;span&gt;&lt;span&gt;-&amp;gt; elite_population ++ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Enum&lt;&#x2F;span&gt;&lt;span&gt;.take(sorted_population, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;      _ -&amp;gt; elite_population
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;span&gt;    [parent1, parent2] = select_parents(possible_parents)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;    # Produce offspring by combining parents and introduce a mutation
&lt;&#x2F;span&gt;&lt;span&gt;    offspring = crossover(parent1, parent2) |&amp;gt; mutation()
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;    # Keep an elite-num of chromosome, and drop less fortunate chromomse before appending the offspring
&lt;&#x2F;span&gt;&lt;span&gt;    new_population =
&lt;&#x2F;span&gt;&lt;span&gt;      (elite_population ++ rest_population)
&lt;&#x2F;span&gt;&lt;span&gt;      |&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Enum&lt;&#x2F;span&gt;&lt;span&gt;.drop(-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;      |&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Kernel&lt;&#x2F;span&gt;&lt;span&gt;.++([offspring])
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    [elite | _] = new_population
&lt;&#x2F;span&gt;&lt;span&gt;    fitness_score = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Map&lt;&#x2F;span&gt;&lt;span&gt;.get(memoized_fitness, elite)
&lt;&#x2F;span&gt;&lt;span&gt;    max_score = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;.length(@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;target_phrase&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;    # If perfect fitness score, then return the elite chromosome.
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;case&lt;&#x2F;span&gt;&lt;span&gt; fitness_score &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;do
&lt;&#x2F;span&gt;&lt;span&gt;      x when x == max_score -&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;        %{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;chromosome:&lt;&#x2F;span&gt;&lt;span&gt; elite, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;generation:&lt;&#x2F;span&gt;&lt;span&gt; generation.i}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;      _ -&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;        evolve_mechanism(
&lt;&#x2F;span&gt;&lt;span&gt;          %{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;i:&lt;&#x2F;span&gt;&lt;span&gt; generation.i + &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;limit:&lt;&#x2F;span&gt;&lt;span&gt; generation.limit},
&lt;&#x2F;span&gt;&lt;span&gt;          %{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;population:&lt;&#x2F;span&gt;&lt;span&gt; new_population, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;size:&lt;&#x2F;span&gt;&lt;span&gt; population_data.size},
&lt;&#x2F;span&gt;&lt;span&gt;          elitism,  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Might be switched for adaptive elitism
&lt;&#x2F;span&gt;&lt;span&gt;          memoized_fitness
&lt;&#x2F;span&gt;&lt;span&gt;        )
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The &lt;code&gt;evolve_mechanism&lt;&#x2F;code&gt; function is recursive in that it will call itself as long as we either haven&#x27;t gotten a perfect fitness or we have hit a generation limit.&lt;&#x2F;p&gt;
&lt;p&gt;Now it&#x27;s finally time to define our entry-point to this genetic algorithm. &lt;code&gt;evolve&lt;&#x2F;code&gt; will set up some initial values and start the &lt;code&gt;evolve-mechanism&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;elixir&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-elixir &quot;&gt;&lt;code class=&quot;language-elixir&quot; data-lang=&quot;elixir&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;defmodule &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;GeneticString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;do
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;  # ...
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;  #  Our ENTRY POINT to the evolution
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;evolve&lt;&#x2F;span&gt;&lt;span&gt;(population_size, generation_limit \\ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;100&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;do
&lt;&#x2F;span&gt;&lt;span&gt;    population = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Enum&lt;&#x2F;span&gt;&lt;span&gt;.map(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;..population_size, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn&lt;&#x2F;span&gt;&lt;span&gt; _ -&amp;gt; random_chromosome() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    elitism_rate = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0.01
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    evolve_mechanism(
&lt;&#x2F;span&gt;&lt;span&gt;      %{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;i: 0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;limit:&lt;&#x2F;span&gt;&lt;span&gt; generation_limit}, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# generation data
&lt;&#x2F;span&gt;&lt;span&gt;      %{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;population:&lt;&#x2F;span&gt;&lt;span&gt; population, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;size:&lt;&#x2F;span&gt;&lt;span&gt; population_size}, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# population data
&lt;&#x2F;span&gt;&lt;span&gt;      %{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;rate:&lt;&#x2F;span&gt;&lt;span&gt; elitism_rate, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;count:&lt;&#x2F;span&gt;&lt;span&gt; floor(elitism_rate * population_size)}, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# elitism data (suitable for adding an adaptive mechanism)
&lt;&#x2F;span&gt;&lt;span&gt;      %{} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# fitness map
&lt;&#x2F;span&gt;&lt;span&gt;    )
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We can call our Genetic Algorithm with the following command: &lt;code&gt;GeneticString.evolve(50, 20000)&lt;&#x2F;code&gt;. This will set the initial population to &lt;code&gt;50&lt;&#x2F;code&gt; and sets the generation limit to &lt;code&gt;20000&lt;&#x2F;code&gt;. The result will be a map like this: &lt;code&gt;%{generation: 6367, chromosome: &amp;quot;The solution is yet to emerge&amp;quot;}&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Our Genetic Algorithm has multiple points where we can experiment with its different parameters. Instead of a static &lt;code&gt;elitism_rate&lt;&#x2F;code&gt; we can involve a more dynamic or adaptive format. We can also experiment with number of offsprings and parents as well. There are a lot of ways to tweak just this simple Genetic Algorithm, but for now, let&#x27;s explore how it would be like to have elitism that is adjusted according to how far along the generations has come towards the generational limit.&lt;&#x2F;p&gt;
&lt;p&gt;First we will add a new function that will update the elitism:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;elixir&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-elixir &quot;&gt;&lt;code class=&quot;language-elixir&quot; data-lang=&quot;elixir&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;defmodule &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;GeneticString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;do
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;  # ...
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;defp &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;adjust_elitism&lt;&#x2F;span&gt;&lt;span&gt;(elitism, generation, population_size) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;do
&lt;&#x2F;span&gt;&lt;span&gt;    progress = generation.i &#x2F; generation.limit
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    rate = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;case&lt;&#x2F;span&gt;&lt;span&gt; progress &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;do
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;      # Less of population considered for elite (aka, in this case, available for reproduction)
&lt;&#x2F;span&gt;&lt;span&gt;      x when x &amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0.2 &lt;&#x2F;span&gt;&lt;span&gt;-&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;        max(elitism.rate - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0.05&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0.01&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;      # In later generations, a larger proportion of population will be included in elite population
&lt;&#x2F;span&gt;&lt;span&gt;      _ -&amp;gt; 
&lt;&#x2F;span&gt;&lt;span&gt;        min(elitism.rate + &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0.01&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0.25&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    %{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;rate:&lt;&#x2F;span&gt;&lt;span&gt; rate, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;count:&lt;&#x2F;span&gt;&lt;span&gt; floor(rate * population_size)}
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Then we will update our &lt;code&gt;evolution_mechanism&lt;&#x2F;code&gt; so that in its recursive call will be updating the elitism:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;elixir&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-elixir &quot;&gt;&lt;code class=&quot;language-elixir&quot; data-lang=&quot;elixir&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;defmodule &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;GeneticString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;do
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;  # ...
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;defp &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;evolve_mechanism&lt;&#x2F;span&gt;&lt;span&gt;(generation, population_data, elitism, fitness_memo) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;do
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;    # ...
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;case&lt;&#x2F;span&gt;&lt;span&gt; fitness_score &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;do
&lt;&#x2F;span&gt;&lt;span&gt;      x when x == max_score -&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;        %{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;chromosome:&lt;&#x2F;span&gt;&lt;span&gt; elite, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;generation:&lt;&#x2F;span&gt;&lt;span&gt; generation.i}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;      _ -&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;        evolve_mechanism(
&lt;&#x2F;span&gt;&lt;span&gt;          %{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;i:&lt;&#x2F;span&gt;&lt;span&gt; generation.i + &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;limit:&lt;&#x2F;span&gt;&lt;span&gt; generation.limit},
&lt;&#x2F;span&gt;&lt;span&gt;          %{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;population:&lt;&#x2F;span&gt;&lt;span&gt; new_population, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;size:&lt;&#x2F;span&gt;&lt;span&gt; population_data.size},
&lt;&#x2F;span&gt;&lt;span&gt;          adjust_elitism(elitism, generation, population_data.size),  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# We change this row to update elitism
&lt;&#x2F;span&gt;&lt;span&gt;          memoized_fitness
&lt;&#x2F;span&gt;&lt;span&gt;        )
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;I test ran our genetic algorithm first with a static elitism, then with an adjusted elitism. Each was run 1000-times. I plotted their density curves and gathered their core descriptive statistics. Let&#x27;s see the result:&lt;&#x2F;p&gt;
&lt;p&gt;
&lt;div class=&quot;layout-row center&quot;&gt;
    &lt;p&gt;&lt;em&gt;n:th generation (static elitism)&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;

&lt;&#x2F;div&gt;







    



    
    &lt;div class=&quot;image-container center mt-0&quot;&gt;
        &lt;div&gt;
            &lt;img
                alt=&quot;Density curve of n-th generation required for a genetic algorithm (GA) to find a perfect fit. Here is a GA with static elitism rate. The curve is centered (median) around 6763 with a standard deviation of 2497. The curve is right-tailed.&quot;
                src=&quot;static_elitism.svg&quot;
                height=&quot;354&quot; 
                width=&quot;491&quot;
            &#x2F;&gt;
        &lt;&#x2F;div&gt;
        &lt;div&gt;&lt;&#x2F;div&gt;
    &lt;&#x2F;div&gt;




&lt;div class=&quot;layout-row center&quot;&gt;
    &lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;min&lt;&#x2F;th&gt;&lt;th&gt;max&lt;&#x2F;th&gt;&lt;th&gt;mean&lt;&#x2F;th&gt;&lt;th&gt;median&lt;&#x2F;th&gt;&lt;th&gt;stdev&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;2391&lt;&#x2F;td&gt;&lt;td&gt;20000&lt;&#x2F;td&gt;&lt;td&gt;7170&lt;&#x2F;td&gt;&lt;td&gt;6763&lt;&#x2F;td&gt;&lt;td&gt;2497&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;

&lt;&#x2F;div&gt;&lt;&#x2F;p&gt;
&lt;p&gt;
&lt;div class=&quot;layout-row center&quot;&gt;
    &lt;p&gt;&lt;em&gt;n:th generation (adjustable elitism)&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;

&lt;&#x2F;div&gt;







    



    
    &lt;div class=&quot;image-container center mt-0&quot;&gt;
        &lt;div&gt;
            &lt;img
                alt=&quot;Density curve of n-th generation required for a genetic algorithm (GA) to find a perfect fit. Here is a GA with adjustable elitism rate. The curve is centered (median) around 5991 with a standard deviation of 1847. The curve is right-tailed.&quot;
                src=&quot;adjustable_elitism.svg&quot;
                height=&quot;354&quot; 
                width=&quot;491&quot;
            &#x2F;&gt;
        &lt;&#x2F;div&gt;
        &lt;div&gt;&lt;&#x2F;div&gt;
    &lt;&#x2F;div&gt;




&lt;div class=&quot;layout-row center&quot;&gt;
    &lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;min&lt;&#x2F;th&gt;&lt;th&gt;max&lt;&#x2F;th&gt;&lt;th&gt;mean&lt;&#x2F;th&gt;&lt;th&gt;median&lt;&#x2F;th&gt;&lt;th&gt;stdev&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;2149&lt;&#x2F;td&gt;&lt;td&gt;15078&lt;&#x2F;td&gt;&lt;td&gt;6297&lt;&#x2F;td&gt;&lt;td&gt;5991&lt;&#x2F;td&gt;&lt;td&gt;1847&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;

&lt;&#x2F;div&gt;&lt;&#x2F;p&gt;
&lt;p&gt;With this adjustable elitism, we got a more narrow distribution and a lower median. We can argue that the inclusion of the adjustable elitism improved our algorithm. But still, there are so many ways we can tinker with it. The elitism can have multiple ways it can be adjusted; different cut-offs, rate changes, minimum and maximum rates, and so on. But there are also many other adjustments we can make. How many parents we will allow getting offsprings, and how many? Perhaps the fitness-evaluation is too simple and need more nuance? Should the crossover be more of a diffusion where one parent&#x27;s feature is scattered in the chromosome? &lt;&#x2F;p&gt;
&lt;p&gt;The Genetic Algorithm is versatile! We have seen its core components and got to tinker with them. We have explored one way to make it more dynamic and what impact that may have. Even a simple GA as we have built here can be adjusted in many different ways. I therefor welcome you to do so. I have created a GitHub Gist with a Livebook document that you may use in your own Livebook session: &lt;a href=&quot;https:&#x2F;&#x2F;gist.github.com&#x2F;andersbjorkland&#x2F;99a96a26135fea7438ef90cfc354e1ed&quot;&gt;genetic-algorithm.livemd&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>Interactive documents with Livebook</title>
        <published>2024-03-02T00:00:00+00:00</published>
        <updated>2024-03-28T00:00:00+00:00</updated>
        <author>
          <name>Anders Björkland</name>
        </author>
        <link rel="alternate" href="https://abjork.land/articles/elixir/interactive-documents-with-livebook/" type="text/html"/>
        <id>https://abjork.land/articles/elixir/interactive-documents-with-livebook/</id>
        <content type="html">&lt;div class=&quot;article-header&quot;&gt;
    










&lt;img
        alt=&quot;133&quot;
        src=&quot;https:&amp;#x2F;&amp;#x2F;abjork.land&amp;#x2F;processed_images&amp;#x2F;hero.fd570643f7080b58.jpg&quot;
        srcset=&quot;https:&amp;#x2F;&amp;#x2F;abjork.land&amp;#x2F;processed_images&amp;#x2F;hero.887cfca0b1cb954e.jpg 240w,
                    https:&amp;#x2F;&amp;#x2F;abjork.land&amp;#x2F;processed_images&amp;#x2F;hero.fd570643f7080b58.jpg 400w,
                    https:&amp;#x2F;&amp;#x2F;abjork.land&amp;#x2F;processed_images&amp;#x2F;hero.b0560df6f86d4d64.jpg 600w&quot;
        sizes=&quot;(max-width: 240px) 200px,
                    (max-width: 400px) 360px,
                    600px&quot;
&#x2F;&gt;


    &lt;div class=&quot;text-content&quot;&gt;
        &lt;h1 class=&quot;article-title&quot;&gt;
            &lt;div class=&quot;title&quot;&gt;Interactive documents with Livebook&lt;&#x2F;div&gt;
            
        &lt;&#x2F;h1&gt;
    &lt;&#x2F;div&gt;
    

 

 

&lt;div class=&quot;tag-list absolute&quot;&gt;
    
        
        &lt;div&gt;&lt;a href=&quot;https:&#x2F;&#x2F;abjork.land&#x2F;tags&#x2F;elixir&#x2F;&quot; class=&quot;hover-bold&quot;&gt;elixir&lt;&#x2F;a&gt;&lt;&#x2F;div&gt;
        
        &lt;div&gt;&lt;a href=&quot;https:&#x2F;&#x2F;abjork.land&#x2F;tags&#x2F;livebook&#x2F;&quot; class=&quot;hover-bold&quot;&gt;livebook&lt;&#x2F;a&gt;&lt;&#x2F;div&gt;
        
    
&lt;&#x2F;div&gt;



&lt;&#x2F;div&gt;
&lt;p&gt;Have you ever wrestled with confusing documentation while trying to learn a new library or language?  The explanations might be sparse, the code examples outdated, or the concepts too advanced for a beginner. It&#x27;s a common frustration! Take the powerful R visualization library &lt;code&gt;ggplot2&lt;&#x2F;code&gt;. Its complex subject matter and documentation make it a challenge for newcomers.&lt;&#x2F;p&gt;
&lt;p&gt;The documentation for &lt;code&gt;ggplot2&lt;&#x2F;code&gt; clearly explains this: &lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;If you are new to ggplot2 you are better off starting with a systematic introduction, rather than trying to learn from reading individual documentation pages.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;But what if learning about complex subjects could be easier? What if examples were always up-to-date and explanations plentiful? That&#x27;s where the Elixir ecosystem shines! Imagine a world where package documentation is interactive, intuitive, and beginner-friendly - even when the subject matter is difficult.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;let-s-talk-about-documentation-in-elixir-land&quot;&gt;Let’s talk about documentation in Elixir-land!&lt;&#x2F;h2&gt;
&lt;p&gt;Imagine if you’re visiting your common dependency registry, where you usually would search and find a package and some instructions for how to install it with your project, and of course a link to the package’s main webpage. In Elixir-land, this is where &lt;a href=&quot;https:&#x2F;&#x2F;hexdocs.pm&quot;&gt;hexdocs.pm&lt;&#x2F;a&gt; enters.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;em&gt;hex&lt;&#x2F;em&gt; is the ordinary Package Manager, but its documentation site is more than a place for installation instructions. Here you can find documentation for Elixir as well as every package available via &lt;em&gt;hex&lt;&#x2F;em&gt;. You would not need to leave &lt;code&gt;hexdocs.pm&lt;&#x2F;code&gt; for reading about more than installation instructions. It contains the API for each package, and in many cases the guides&#x2F;tutorials for how to use them. And as everything with &lt;code&gt;hexdocs.pm&lt;&#x2F;code&gt; is managed on GitHub, anyone can be on top of any issues with documentation (such as rectifying poor explanations or adding or fixing examples) by issuing PRs.&lt;&#x2F;p&gt;
&lt;p&gt;Some of these API documents also have guides connected to them; occasionally written in a format called &lt;code&gt;livemd&lt;&#x2F;code&gt;. These are markdown files that also works as &lt;em&gt;live documents&lt;&#x2F;em&gt;; meaning they are able to be launched with Livebook (either locally hosted or in cloud) and experimented with. This way, anyone can see how each function and struct can be used. &lt;&#x2F;p&gt;
&lt;h2 id=&quot;what-is-livebook&quot;&gt;What is Livebook&lt;&#x2F;h2&gt;
&lt;p&gt;Livebook is a format for interactive Elixir notebooks. Like Jupyter, but specialized for Elixir (and Erlang). They are run as web applications. And when you have a Livebook application, you may open any &lt;em&gt;livemd&lt;&#x2F;em&gt;-document in it. You will see a &amp;quot;Run in Livebook&amp;quot; button on these pages. &lt;&#x2F;p&gt;

    
    













    


&lt;div class=&quot;image-container center&quot;&gt;
    &lt;img
            alt=&quot;A button with the text &amp;quot;Run in Livebook&amp;quot;&quot;
            src=&quot;run_in_livebook_btn.webp&quot;
            srcset=&quot;https:&amp;#x2F;&amp;#x2F;abjork.land&amp;#x2F;processed_images&amp;#x2F;run_in_livebook_btn.de8af7114a3b1867.webp 240w,
                        https:&amp;#x2F;&amp;#x2F;abjork.land&amp;#x2F;processed_images&amp;#x2F;run_in_livebook_btn.3ec6351d6bd34a3a.webp 400w,
                        https:&amp;#x2F;&amp;#x2F;abjork.land&amp;#x2F;processed_images&amp;#x2F;run_in_livebook_btn.54659afe57fc5a0a.webp 600w&quot;
            sizes=&quot;(max-width: 240px) 200px,
                        (max-width: 400px) 360px,
                        600px&quot;
    &#x2F;&gt;
    &lt;div class=&quot;image-subtext&quot;&gt;&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;Clicking it will open a new page where you can enter a URL to your local or cloud hosted Livebook application. You may also configure &lt;code&gt;hexdocs.pm&lt;&#x2F;code&gt; so it remembers your URL. &lt;&#x2F;p&gt;

    
    













    


&lt;div class=&quot;image-container center&quot;&gt;
    &lt;img
            alt=&quot;Image of choosing to install livebook&quot;
            src=&quot;livebook_install.png&quot;
            srcset=&quot;https:&amp;#x2F;&amp;#x2F;abjork.land&amp;#x2F;processed_images&amp;#x2F;livebook_install.666c4b81d344361a.webp 240w,
                        https:&amp;#x2F;&amp;#x2F;abjork.land&amp;#x2F;processed_images&amp;#x2F;livebook_install.214d0c45ce5ddf21.webp 400w,
                        https:&amp;#x2F;&amp;#x2F;abjork.land&amp;#x2F;processed_images&amp;#x2F;livebook_install.5077c3fa4323cd31.webp 600w&quot;
            sizes=&quot;(max-width: 240px) 200px,
                        (max-width: 400px) 360px,
                        600px&quot;
    &#x2F;&gt;
    &lt;div class=&quot;image-subtext&quot;&gt;&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;&lt;h3 id=&quot;hosting-livebook-on-hugging-face&quot;&gt;Hosting Livebook on Hugging Face&lt;&#x2F;h3&gt;
&lt;p&gt;Hugging Face offers many alternatives for hosting. All it requires is that you&#x27;ve registered an account. Then you can onboard to their free hosting alternative. I&#x27;m registered as &lt;code&gt;beercan&lt;&#x2F;code&gt;, and let&#x27;s see how onboarding would look like for me. &lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;Create a new Space&lt;&#x2F;em&gt;: Fill in the basic information for the Hugging Face Space.

    
    













    


&lt;div class=&quot;image-container center&quot;&gt;
    &lt;img
            alt=&quot;A simple form to select owner, space name, and associated license&quot;
            src=&quot;create_new_space.png&quot;
            srcset=&quot;https:&amp;#x2F;&amp;#x2F;abjork.land&amp;#x2F;processed_images&amp;#x2F;create_new_space.cb033df331344c4b.webp 240w,
                        https:&amp;#x2F;&amp;#x2F;abjork.land&amp;#x2F;processed_images&amp;#x2F;create_new_space.ccc35c48eb999da4.webp 400w,
                        https:&amp;#x2F;&amp;#x2F;abjork.land&amp;#x2F;processed_images&amp;#x2F;create_new_space.c991e1005718a213.webp 600w&quot;
            sizes=&quot;(max-width: 240px) 200px,
                        (max-width: 400px) 360px,
                        600px&quot;
    &#x2F;&gt;
    &lt;div class=&quot;image-subtext&quot;&gt;&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;Select the Space SDK&lt;&#x2F;em&gt;: Possibilities are endless, as Hugging Face offers a Docker hosting alternative. Select &lt;strong&gt;Docker&lt;&#x2F;strong&gt; and the &lt;strong&gt;Livebook&lt;&#x2F;strong&gt; template.&lt;br &#x2F;&gt;

    
    













    


&lt;div class=&quot;image-container center&quot;&gt;
    &lt;img
            alt=&quot;A simple form to select owner, space name, and associated license&quot;
            src=&quot;docker_choice.png&quot;
            srcset=&quot;https:&amp;#x2F;&amp;#x2F;abjork.land&amp;#x2F;processed_images&amp;#x2F;docker_choice.854bdbcdbe6e1400.webp 240w,
                        https:&amp;#x2F;&amp;#x2F;abjork.land&amp;#x2F;processed_images&amp;#x2F;docker_choice.df5894fb16938749.webp 400w,
                        https:&amp;#x2F;&amp;#x2F;abjork.land&amp;#x2F;processed_images&amp;#x2F;docker_choice.3dd055b7ae4af863.webp 600w&quot;
            sizes=&quot;(max-width: 240px) 200px,
                        (max-width: 400px) 360px,
                        600px&quot;
    &#x2F;&gt;
    &lt;div class=&quot;image-subtext&quot;&gt;&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;Select hardware&lt;&#x2F;em&gt;: We will run a basic setup, which offers 2 virtual CPUs with 16GB RAM. Other, priced, alternatives exists. For most cases, vCPUs are enough. If you want to be training your own models or use LLMs, then the need for the GPU alternatives are there for your choosing. You may also upgrade&#x2F;downgrade at any point. 

    
    













    


&lt;div class=&quot;image-container center&quot;&gt;
    &lt;img
            alt=&quot;A select menu with multiple alternatives. The first alternative is selected. It is &amp;quot;CPU basic, 2vCPU, 16GB, free&amp;quot;.&quot;
            src=&quot;select_hardware.png&quot;
            srcset=&quot;https:&amp;#x2F;&amp;#x2F;abjork.land&amp;#x2F;processed_images&amp;#x2F;select_hardware.f5bea2f77b7cb37b.webp 240w,
                        https:&amp;#x2F;&amp;#x2F;abjork.land&amp;#x2F;processed_images&amp;#x2F;select_hardware.c0028ce4b750eda1.webp 400w,
                        https:&amp;#x2F;&amp;#x2F;abjork.land&amp;#x2F;processed_images&amp;#x2F;select_hardware.efaf23611e52bcae.webp 600w&quot;
            sizes=&quot;(max-width: 240px) 200px,
                        (max-width: 400px) 360px,
                        600px&quot;
    &#x2F;&gt;
    &lt;div class=&quot;image-subtext&quot;&gt;&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;Secrets&lt;&#x2F;em&gt;: Select a password for your Livebook application, and then let &lt;code&gt;XLA_TARGET&lt;&#x2F;code&gt; be &lt;code&gt;cpu&lt;&#x2F;code&gt;. (This should reflect the type of hardware that you are running your application on.)

    
    













    


&lt;div class=&quot;image-container center&quot;&gt;
    &lt;img
            alt=&quot;A select menu with multiple alternatives. The first alternative is selected. It is &amp;quot;CPU basic, 2vCPU, 16GB, free&amp;quot;.&quot;
            src=&quot;secrets_form.png&quot;
            srcset=&quot;https:&amp;#x2F;&amp;#x2F;abjork.land&amp;#x2F;processed_images&amp;#x2F;secrets_form.c9a0028781b90249.webp 240w,
                        https:&amp;#x2F;&amp;#x2F;abjork.land&amp;#x2F;processed_images&amp;#x2F;secrets_form.8e8c163b7740e15f.webp 400w,
                        https:&amp;#x2F;&amp;#x2F;abjork.land&amp;#x2F;processed_images&amp;#x2F;secrets_form.ae6d50a1a3d9c364.webp 600w&quot;
            sizes=&quot;(max-width: 240px) 200px,
                        (max-width: 400px) 360px,
                        600px&quot;
    &#x2F;&gt;
    &lt;div class=&quot;image-subtext&quot;&gt;&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;Make your Livebook Private or Public&lt;&#x2F;em&gt;: Select whatever you are comfortable with. Start with &lt;code&gt;Private&lt;&#x2F;code&gt; if you don&#x27;t plan to make it visible to anyone.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;Click on &lt;code&gt;Create Space&lt;&#x2F;code&gt;&lt;&#x2F;em&gt;. This will build the docker image and spin it up. Per default, the container will sleep after 48 hours of inactivity. Any of the paid alternatives allows to change this. 

    
    













    


&lt;div class=&quot;image-container center&quot;&gt;
    &lt;img
            alt=&quot;A screen with logs for docker-building. In the background a information text &amp;quot;Building...&amp;quot;.&quot;
            src=&quot;docker_building.png&quot;
            srcset=&quot;https:&amp;#x2F;&amp;#x2F;abjork.land&amp;#x2F;processed_images&amp;#x2F;docker_building.4a1fe346a1531b80.webp 240w,
                        https:&amp;#x2F;&amp;#x2F;abjork.land&amp;#x2F;processed_images&amp;#x2F;docker_building.9a996a2911d7f2f3.webp 400w,
                        https:&amp;#x2F;&amp;#x2F;abjork.land&amp;#x2F;processed_images&amp;#x2F;docker_building.c39ee7eeeeab4de6.webp 600w&quot;
            sizes=&quot;(max-width: 240px) 200px,
                        (max-width: 400px) 360px,
                        600px&quot;
    &#x2F;&gt;
    &lt;div class=&quot;image-subtext&quot;&gt;&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;When the image is done building, it will be run, and you will be able to see this screen: 

    
    













    


&lt;div class=&quot;image-container center&quot;&gt;
    &lt;img
            alt=&quot;A page with two links. One is for &amp;quot;Dashboard&amp;quot;, the other is under the headline &amp;quot;Apps&amp;quot; and says &amp;quot;Livebook [heart] Hugging Face&amp;quot;.&quot;
            src=&quot;new_app_running.png&quot;
            srcset=&quot;https:&amp;#x2F;&amp;#x2F;abjork.land&amp;#x2F;processed_images&amp;#x2F;new_app_running.4e8b07b06a7df8db.webp 240w,
                        https:&amp;#x2F;&amp;#x2F;abjork.land&amp;#x2F;processed_images&amp;#x2F;new_app_running.f8f45f1366ad39e3.webp 400w,
                        https:&amp;#x2F;&amp;#x2F;abjork.land&amp;#x2F;processed_images&amp;#x2F;new_app_running.6dc2c409be10d9e8.webp 600w&quot;
            sizes=&quot;(max-width: 240px) 200px,
                        (max-width: 400px) 360px,
                        600px&quot;
    &#x2F;&gt;
    &lt;div class=&quot;image-subtext&quot;&gt;&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Clicking on &amp;quot;Dashboard&amp;quot; will lead you to an authentication page where you will enter the password that you set earlier. Once that is passed, you can start to explore what Livebook is. It has multiple livebook documents teaching the basics of Elixir, Livebook, and some common Livebook components.&lt;br &#x2F;&gt;

    
    













    


&lt;div class=&quot;image-container center&quot;&gt;
    &lt;img
            alt=&quot;A dashboard interface with a vertical menu, and a main section. The menu has the alternatives: Home, Apps, Learn, Settings, and My Hub. The Main section has two buttons: open, and &amp;quot;new notebook&amp;quot;, as well as 3 livebook documents: &amp;quot;Welcome to Livebook&amp;quot;, &amp;quot;Distributed portals with Elixir&amp;quot;, and &amp;quot;Deploy a chat app with Kino&amp;quot;&quot;
            src=&quot;dashboard.png&quot;
            srcset=&quot;https:&amp;#x2F;&amp;#x2F;abjork.land&amp;#x2F;processed_images&amp;#x2F;dashboard.febb5b0b1e87833b.webp 240w,
                        https:&amp;#x2F;&amp;#x2F;abjork.land&amp;#x2F;processed_images&amp;#x2F;dashboard.5708f4d06ccbc757.webp 400w,
                        https:&amp;#x2F;&amp;#x2F;abjork.land&amp;#x2F;processed_images&amp;#x2F;dashboard.da28b15784c7063d.webp 600w&quot;
            sizes=&quot;(max-width: 240px) 200px,
                        (max-width: 400px) 360px,
                        600px&quot;
    &#x2F;&gt;
    &lt;div class=&quot;image-subtext&quot;&gt;&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;explore-a-livebook-document-bumblebee&quot;&gt;Explore a Livebook document - Bumblebee&lt;&#x2F;h2&gt;
&lt;p&gt;Let&#x27;s head to &lt;a href=&quot;https:&#x2F;&#x2F;hexdocs.pm&#x2F;bumblebee&#x2F;examples.html#image-classification&quot;&gt;hexdocs.pm&#x2F;bumblebee&#x2F;examples.html#image-classification&lt;&#x2F;a&gt;. Click the cog-icon in the upper right corner to access the settings and check &amp;quot;Run in Livebook&amp;quot;. Paste your Livebook URL in the field. It should be something like &lt;code&gt;https:&#x2F;&#x2F;beercan-liveboook.hf.space&#x2F;&lt;&#x2F;code&gt;, which is &lt;code&gt;https:&#x2F;&#x2F;{username}-{projectName}.hf.space&lt;&#x2F;code&gt;. &lt;&#x2F;p&gt;

    
    













    


&lt;div class=&quot;image-container center&quot;&gt;
    &lt;img
            alt=&quot;A settings menu for Hexdocs.pm&quot;
            src=&quot;hexdocs_settings.png&quot;
            srcset=&quot;https:&amp;#x2F;&amp;#x2F;abjork.land&amp;#x2F;processed_images&amp;#x2F;hexdocs_settings.c6a6f72e44854849.webp 240w,
                        https:&amp;#x2F;&amp;#x2F;abjork.land&amp;#x2F;processed_images&amp;#x2F;hexdocs_settings.149ff1ddd8c37435.webp 400w,
                        https:&amp;#x2F;&amp;#x2F;abjork.land&amp;#x2F;processed_images&amp;#x2F;hexdocs_settings.0b7a5becc89d473e.webp 600w&quot;
            sizes=&quot;(max-width: 240px) 200px,
                        (max-width: 400px) 360px,
                        600px&quot;
    &#x2F;&gt;
    &lt;div class=&quot;image-subtext&quot;&gt;&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;Now when we click on &amp;quot;Run in Livebook&amp;quot; it will initiate a new Livebook document for us in our Huggning Face space. Now we can configure and execute (or &lt;em&gt;evaluate&lt;&#x2F;em&gt;) each Elixir code element in our document. The first Elixir element is where we will install all the dependencies that will be covered in the document. It can be executed by hovering the element and click the &lt;code&gt;Evaluate&lt;&#x2F;code&gt; button that will appear.&lt;&#x2F;p&gt;

    
    













    


&lt;div class=&quot;image-container center&quot;&gt;
    &lt;img
            alt=&quot;Evaluate an Elixir code element&quot;
            src=&quot;evaluate_element.png&quot;
            srcset=&quot;https:&amp;#x2F;&amp;#x2F;abjork.land&amp;#x2F;processed_images&amp;#x2F;evaluate_element.fe2f143f1fb461ff.webp 240w,
                        https:&amp;#x2F;&amp;#x2F;abjork.land&amp;#x2F;processed_images&amp;#x2F;evaluate_element.4c13d8ccbe1d3c65.webp 400w,
                        https:&amp;#x2F;&amp;#x2F;abjork.land&amp;#x2F;processed_images&amp;#x2F;evaluate_element.a37fbccad8109d0a.webp 600w&quot;
            sizes=&quot;(max-width: 240px) 200px,
                        (max-width: 400px) 360px,
                        600px&quot;
    &#x2F;&gt;
    &lt;div class=&quot;image-subtext&quot;&gt;&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;Clicking it will start the code execution. Each element will have access to variables declared in earlier elexir elements, so you may define variables that will be used later in the code. &lt;&#x2F;p&gt;
&lt;p&gt;With Livebook we have access to a library of Livebook components in the form of the Kino dependency. In this example we will see how it renders an Image input-field:&lt;br &#x2F;&gt;

    
    













    


&lt;div class=&quot;image-container center&quot;&gt;
    &lt;img
            alt=&quot;Rendered Livebook component for importing an Image file.&quot;
            src=&quot;image_import.png&quot;
            srcset=&quot;https:&amp;#x2F;&amp;#x2F;abjork.land&amp;#x2F;processed_images&amp;#x2F;image_import.cd269a4bb9832ea6.webp 240w,
                        https:&amp;#x2F;&amp;#x2F;abjork.land&amp;#x2F;processed_images&amp;#x2F;image_import.106cf27a128b921e.webp 400w,
                        https:&amp;#x2F;&amp;#x2F;abjork.land&amp;#x2F;processed_images&amp;#x2F;image_import.5e257a6af3d89e12.webp 600w&quot;
            sizes=&quot;(max-width: 240px) 200px,
                        (max-width: 400px) 360px,
                        600px&quot;
    &#x2F;&gt;
    &lt;div class=&quot;image-subtext&quot;&gt;&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;&lt;&#x2F;p&gt;
&lt;p&gt;And to wrap this gift that is the &lt;code&gt;Bumblebee&lt;&#x2F;code&gt; library in Livebook, let&#x27;s run an inference model on the image that was imported and see how it classifies the badger laying on the ground.&lt;br &#x2F;&gt;

    
    













    


&lt;div class=&quot;image-container center&quot;&gt;
    &lt;img
            alt=&quot;Rendered Livebook component for importing an Image file.&quot;
            src=&quot;image_inference.png&quot;
            srcset=&quot;https:&amp;#x2F;&amp;#x2F;abjork.land&amp;#x2F;processed_images&amp;#x2F;image_inference.faed6d4ff6ebe42a.webp 240w,
                        https:&amp;#x2F;&amp;#x2F;abjork.land&amp;#x2F;processed_images&amp;#x2F;image_inference.7c128d10a5821761.webp 400w,
                        https:&amp;#x2F;&amp;#x2F;abjork.land&amp;#x2F;processed_images&amp;#x2F;image_inference.db043e9e45860bfd.webp 600w&quot;
            sizes=&quot;(max-width: 240px) 200px,
                        (max-width: 400px) 360px,
                        600px&quot;
    &#x2F;&gt;
    &lt;div class=&quot;image-subtext&quot;&gt;&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;&lt;&#x2F;p&gt;
&lt;p&gt;In this case, the model that was used was pretty sure that it indeed was a badger, with a .3% uncertainty about it. &lt;&#x2F;p&gt;
&lt;h2 id=&quot;in-closing&quot;&gt;In closing&lt;&#x2F;h2&gt;
&lt;p&gt;Remember how easy it was to set up a Livebook environment on Hugging Face? And how the interactive examples in &lt;code&gt;Bumblebee&lt;&#x2F;code&gt;&#x27;s  documentation made understanding the library a breeze? This is just a taste of how Elixir and Livebook can streamline your learning of complex topics. Whether you&#x27;re an Elixir beginner or a seasoned developer, there&#x27;s always something new and exciting to discover. Go forth and explore – you might be surprised by the creative possibilities that await! &lt;&#x2F;p&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>Mysterious Crystal Ball</title>
        <published>2024-02-29T00:00:00+00:00</published>
        <updated>2024-02-29T00:00:00+00:00</updated>
        <author>
          <name>Anders Björkland</name>
        </author>
        <link rel="alternate" href="https://abjork.land/showroom/mysterious-crystal-ball/" type="text/html"/>
        <id>https://abjork.land/showroom/mysterious-crystal-ball/</id>
        <content type="html">&lt;div class=&quot;article-header&quot;&gt;
    










&lt;img
        alt=&quot;133&quot;
        src=&quot;https:&amp;#x2F;&amp;#x2F;abjork.land&amp;#x2F;processed_images&amp;#x2F;hero.4209953326e1a404.jpg&quot;
        srcset=&quot;https:&amp;#x2F;&amp;#x2F;abjork.land&amp;#x2F;processed_images&amp;#x2F;hero.93d80863fb40dc59.jpg 240w,
                    https:&amp;#x2F;&amp;#x2F;abjork.land&amp;#x2F;processed_images&amp;#x2F;hero.4209953326e1a404.jpg 400w,
                    https:&amp;#x2F;&amp;#x2F;abjork.land&amp;#x2F;processed_images&amp;#x2F;hero.2230b1a46c28ef70.jpg 600w&quot;
        sizes=&quot;(max-width: 240px) 200px,
                    (max-width: 400px) 360px,
                    600px&quot;
&#x2F;&gt;


    &lt;div class=&quot;text-content&quot;&gt;
        &lt;h1 class=&quot;article-title&quot;&gt;
            &lt;div class=&quot;title&quot;&gt;Mysterious Crystal Ball&lt;&#x2F;div&gt;
            
        &lt;&#x2F;h1&gt;
    &lt;&#x2F;div&gt;
    

 

 

&lt;div class=&quot;tag-list absolute&quot;&gt;
    
&lt;&#x2F;div&gt;



&lt;&#x2F;div&gt;
&lt;p&gt;A Livebook application that behind the scenes fetches 10 of the latest news stories from the previous day based on a randomly selected subject. 
It then applies the &lt;a href=&quot;https:&#x2F;&#x2F;huggingface.co&#x2F;HuggingFaceTB&#x2F;cosmo-1b&quot;&gt;HuggingFaceTB&#x2F;cosmo-1b&lt;&#x2F;a&gt; to generate a cryptic message about the news stories which are then stored into a term-file. 
One of these stories are selected and displayed.&lt;&#x2F;p&gt;
&lt;p&gt;As the app does not have access to a GPU, the text-generation task that &lt;em&gt;cosmo-1b&lt;&#x2F;em&gt; performs can take 5 minutes which is handled concurrently in a separate task. 
If the latest messages has not been loaded in this way, the app will choose one from the day before while this is taking place.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;beercan-unsmart.hf.space&#x2F;apps&#x2F;mystery&quot;&gt;&lt;em&gt;&lt;strong&gt;Check Mysterious Crystal Ball out on Hugging Face&lt;&#x2F;strong&gt;&lt;&#x2F;em&gt;&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>Resize Image Uploads with LiveView</title>
        <published>2024-01-31T00:00:00+00:00</published>
        <updated>2024-03-28T00:00:00+00:00</updated>
        <author>
          <name>Anders Björkland</name>
        </author>
        <link rel="alternate" href="https://abjork.land/articles/elixir/resize-image-uploads-with-liveview/" type="text/html"/>
        <id>https://abjork.land/articles/elixir/resize-image-uploads-with-liveview/</id>
        <content type="html">&lt;div class=&quot;article-header&quot;&gt;
    










&lt;img
        alt=&quot;133&quot;
        src=&quot;https:&amp;#x2F;&amp;#x2F;abjork.land&amp;#x2F;processed_images&amp;#x2F;hero.997da961180fa2bd.png&quot;
        srcset=&quot;https:&amp;#x2F;&amp;#x2F;abjork.land&amp;#x2F;processed_images&amp;#x2F;hero.f27f81c956b2ac4f.png 240w,
                    https:&amp;#x2F;&amp;#x2F;abjork.land&amp;#x2F;processed_images&amp;#x2F;hero.997da961180fa2bd.png 400w,
                    https:&amp;#x2F;&amp;#x2F;abjork.land&amp;#x2F;processed_images&amp;#x2F;hero.cc31884f85fbc20f.png 600w&quot;
        sizes=&quot;(max-width: 240px) 200px,
                    (max-width: 400px) 360px,
                    600px&quot;
&#x2F;&gt;


    &lt;div class=&quot;text-content&quot;&gt;
        &lt;h1 class=&quot;article-title&quot;&gt;
            &lt;div class=&quot;title&quot;&gt;Resize Image Uploads with LiveView&lt;&#x2F;div&gt;
            
        &lt;&#x2F;h1&gt;
    &lt;&#x2F;div&gt;
    

 

 

&lt;div class=&quot;tag-list absolute&quot;&gt;
    
        
        &lt;div&gt;&lt;a href=&quot;https:&#x2F;&#x2F;abjork.land&#x2F;tags&#x2F;elixir&#x2F;&quot; class=&quot;hover-bold&quot;&gt;elixir&lt;&#x2F;a&gt;&lt;&#x2F;div&gt;
        
        &lt;div&gt;&lt;a href=&quot;https:&#x2F;&#x2F;abjork.land&#x2F;tags&#x2F;phoenix&#x2F;&quot; class=&quot;hover-bold&quot;&gt;phoenix&lt;&#x2F;a&gt;&lt;&#x2F;div&gt;
        
        &lt;div&gt;&lt;a href=&quot;https:&#x2F;&#x2F;abjork.land&#x2F;tags&#x2F;liveview&#x2F;&quot; class=&quot;hover-bold&quot;&gt;liveview&lt;&#x2F;a&gt;&lt;&#x2F;div&gt;
        
    
&lt;&#x2F;div&gt;



&lt;&#x2F;div&gt;
&lt;p&gt;In this article we will see how to resize an image before uploading it to a Phoenix backend. We will do this by adding a profile image to the user in a basic Phoenix setup. This will take us through the process of modifying an existing schema, create and run a migration, write custom hooks, add file validation, and ultimately create a new file. So if you are up for the task and would like to follow along, here’s the resize&#x2F;upload flow:&lt;&#x2F;p&gt;
&lt;div class=&quot;white-bg&quot;&gt;







    



    
    &lt;div class=&quot;image-container center&quot;&gt;
        &lt;div&gt;
            &lt;img
                alt=&quot;The logic flow of uploading an image. A user selects an image, it is then resized. This will initialize a validation from the client on the server. If it is valid the User will be allowed to submit the image, otherwise must choose another image.&quot;
                src=&quot;flow.svg&quot;
                height=&quot;1262&quot; 
                width=&quot;681&quot;
            &#x2F;&gt;
        &lt;&#x2F;div&gt;
        &lt;div&gt;&lt;&#x2F;div&gt;
    &lt;&#x2F;div&gt;



&lt;&#x2F;div&gt;
&lt;h2 id=&quot;prerequisites-and-setup&quot;&gt;Prerequisites and Setup&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;Docker&lt;&#x2F;li&gt;
&lt;li&gt;Elixir&lt;&#x2F;li&gt;
&lt;li&gt;Mix&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Run a postgres container: 
&lt;code&gt;docker run --name phoenix_db -e POSTGRES_PASSWORD=phoenix_pwd -e POSTGRES_USER=phoenix_usr -d -p 5432:5432 postgres&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;p&gt;If you do not have a Phoenix application, run:
&lt;code&gt;mix phx.new my_app&lt;&#x2F;code&gt; &lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;If &lt;code&gt;phx.new&lt;&#x2F;code&gt; is not a recognized mix-command, install the command with &lt;code&gt;mix archive.install hex phx_new&lt;&#x2F;code&gt;. At the time of writing, this will install version &lt;code&gt;1.7.10&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Setup the application to use the correct database credentails in &lt;code&gt;.&#x2F;config&#x2F;dev.exs&lt;&#x2F;code&gt;. Adjust in the top of the file so it corresponds with your docker container setup:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;elixir&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-elixir &quot;&gt;&lt;code class=&quot;language-elixir&quot; data-lang=&quot;elixir&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# …
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Configure your database
&lt;&#x2F;span&gt;&lt;span&gt;config &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:my_app&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;MyApp&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Repo&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;username: &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;phoenix_usr&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;password: &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;phoenix_pwd&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;hostname: &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;localhost&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;database: &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;my_app_dev&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;stacktrace: true&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;show_sensitive_data_on_connection_error: true&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;pool_size: 10
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# …
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;With database configuration ready we can set up the database with &lt;code&gt;mix ecto.create&lt;&#x2F;code&gt;. We will then add a Phoenix LiveView &lt;strong&gt;authentication&lt;&#x2F;strong&gt; system by first running &lt;code&gt;mix phx.gen.auth Accounts User users&lt;&#x2F;code&gt;. And then run &lt;code&gt;mix ecto.migrate&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;modify-the-user-schema&quot;&gt;Modify the User schema&lt;&#x2F;h2&gt;
&lt;p&gt;We will have a profile image added to our new User model. The user will only ever have one of these and we will not preserve any kind of history beyond what the user currently has as their profile image. We plan to add a string field to the User model and schema to store the path for the image. Let’s create a migration file for this.&lt;&#x2F;p&gt;
&lt;p&gt;From the CLI we run &lt;code&gt;mix ecto.gen.migration add_profile_image&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;This creates a new file &lt;code&gt; priv&#x2F;repo&#x2F;migrations&#x2F;[timestamp]_add_profile_image.exs&lt;&#x2F;code&gt; with the backbone for a migration-change. We will alter the table for &lt;code&gt;users&lt;&#x2F;code&gt; by adding a new field:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;elixir&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-elixir &quot;&gt;&lt;code class=&quot;language-elixir&quot; data-lang=&quot;elixir&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;defmodule &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;ArchAngler&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Repo&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Migrations&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;AddProfileImage &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;do
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Ecto&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Migration
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;change &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;do
&lt;&#x2F;span&gt;&lt;span&gt;    alter table(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:users&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;do
&lt;&#x2F;span&gt;&lt;span&gt;      add &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:profile_image&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:string
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Next we will run this migration with &lt;code&gt;mix ecto.migrate&lt;&#x2F;code&gt;. 
Having updated the database schema for the &lt;code&gt;users&lt;&#x2F;code&gt; table, we now turn to update our model accordingly. The model is defined in &lt;code&gt;.&#x2F;lib&#x2F;my_app&#x2F;accounts&#x2F;user.ex&lt;&#x2F;code&gt;. Let’s adjust the schema:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;elixir&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-elixir &quot;&gt;&lt;code class=&quot;language-elixir&quot; data-lang=&quot;elixir&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;defmodule &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;MyApp&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Accounts&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;User &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;do
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;  # …
&lt;&#x2F;span&gt;&lt;span&gt;  schema &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;users&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;do
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;    # add the profile_image field here
&lt;&#x2F;span&gt;&lt;span&gt;    field &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:profile_image&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:string
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    timestamps()
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;  #...
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;  # add a new changeset function for the new field by the end of the module:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;@doc &amp;quot;&amp;quot;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;  A User changeset for updating Profile Image
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;  &amp;quot;&amp;quot;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;profile_image_changeset&lt;&#x2F;span&gt;&lt;span&gt;(user, attrs, _opts \\ []) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;do
&lt;&#x2F;span&gt;&lt;span&gt;    user
&lt;&#x2F;span&gt;&lt;span&gt;    |&amp;gt; cast(attrs, [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:profile_image&lt;&#x2F;span&gt;&lt;span&gt;])
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;With the updated User model, we should update the context as well. We find it in &lt;code&gt;.&#x2F;lib&#x2F;my_app&#x2F;accounts.ex&lt;&#x2F;code&gt;. Add the following function to the module:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;elixir&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-elixir &quot;&gt;&lt;code class=&quot;language-elixir&quot; data-lang=&quot;elixir&quot;&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;@doc &amp;quot;&amp;quot;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;  Returns an `%Ecto.Chageset{}` for updating the user profile_image.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;  &amp;quot;&amp;quot;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;change_profile_image&lt;&#x2F;span&gt;&lt;span&gt;(user, attrs \\ %{}) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;do
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;User&lt;&#x2F;span&gt;&lt;span&gt;.profile_image_changeset(user, attrs)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;update_profile_image&lt;&#x2F;span&gt;&lt;span&gt;(%&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;User&lt;&#x2F;span&gt;&lt;span&gt;{} = user, attrs) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;do
&lt;&#x2F;span&gt;&lt;span&gt;    user
&lt;&#x2F;span&gt;&lt;span&gt;    |&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;User&lt;&#x2F;span&gt;&lt;span&gt;.profile_image_changeset(attrs)
&lt;&#x2F;span&gt;&lt;span&gt;    |&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Repo&lt;&#x2F;span&gt;&lt;span&gt;.update()
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This will be used to create a form for the LiveView component.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;update-user-settings-page&quot;&gt;Update User Settings page&lt;&#x2F;h2&gt;
&lt;p&gt;With updates to the User model, we can now update the LiveView component for the User Settings page. Currently the view has two forms: One for changing &lt;code&gt;Email&lt;&#x2F;code&gt;, and another for changing &lt;code&gt;Password&lt;&#x2F;code&gt;. We will add a new form for uploading and changing the &lt;code&gt;Profile Image&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;

    













    


&lt;div class=&quot;image-container center&quot;&gt;
    &lt;img
            alt=&quot;The logic flow of uploading an image. A user selects an image, it is then resized. This will initialize a validation from the client on the server. If it is valid the User will be allowed to submit the image, otherwise must choose another image.&quot;
            src=&quot;user-settings.png&quot;
            srcset=&quot;https:&amp;#x2F;&amp;#x2F;abjork.land&amp;#x2F;processed_images&amp;#x2F;user-settings.014fd3d636fb5603.webp 240w,
                        https:&amp;#x2F;&amp;#x2F;abjork.land&amp;#x2F;processed_images&amp;#x2F;user-settings.1c9c547d67791390.webp 400w,
                        https:&amp;#x2F;&amp;#x2F;abjork.land&amp;#x2F;processed_images&amp;#x2F;user-settings.aeb03949d69019ff.webp 600w&quot;
            sizes=&quot;(max-width: 240px) 200px,
                        (max-width: 400px) 360px,
                        600px&quot;
    &#x2F;&gt;
    &lt;div class=&quot;image-subtext&quot;&gt;&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;We will find the LiveView component in &lt;code&gt;.&#x2F;lib&#x2F;my_app_web&#x2F;live&#x2F;user_settings_live.ex&lt;&#x2F;code&gt;. In its &lt;code&gt;render&lt;&#x2F;code&gt; function, we will add our new form. Insert the following code above the email-form.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;heex&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-heex &quot;&gt;&lt;code class=&quot;language-heex&quot; data-lang=&quot;heex&quot;&gt;&lt;span&gt;      &amp;lt;div&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;lt;div id=&amp;quot;image-uploader-container&amp;quot;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;          &amp;lt;label&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;            &amp;lt;div class=&amp;quot;block text-sm font-semibold leading-6 text-zinc-800&amp;quot;&amp;gt;Profile Image&amp;lt;&#x2F;div&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;            &amp;lt;input
&lt;&#x2F;span&gt;&lt;span&gt;              id=&amp;quot;profile-image-uploader&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;              type=&amp;quot;file&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;              accept=&amp;quot;image&#x2F;png, image&#x2F;jpeg, image&#x2F;jpg, image&#x2F;webp&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;              phx-hook=&amp;quot;Resize&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;            &#x2F;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;          &amp;lt;&#x2F;label&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;          &amp;lt;%= if @image_error do %&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;            &amp;lt;p class=&amp;quot;text-red-500&amp;quot;&amp;gt;&amp;lt;%= @image_error %&amp;gt;&amp;lt;&#x2F;p&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;          &amp;lt;% end %&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;lt;&#x2F;div&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;        
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;lt;.simple_form
&lt;&#x2F;span&gt;&lt;span&gt;          for={@image_form}
&lt;&#x2F;span&gt;&lt;span&gt;          id=&amp;quot;profile_image_form&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;          phx-submit=&amp;quot;update_profile_image&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;          phx-change=&amp;quot;validate_profile_image&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;          &amp;lt;%= if @profile_image do %&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;            &amp;lt;img src={@profile_image} alt=&amp;quot;Profile Image&amp;quot; &#x2F;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;          &amp;lt;% end %&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;          &amp;lt;div class=&amp;quot;&amp;quot;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;            &amp;lt;div id=&amp;quot;image-preview-container&amp;quot;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;              &amp;lt;%= if @resized_image_src do %&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;                &amp;lt;img src={@resized_image_src} alt=&amp;quot;preview resized image&amp;quot; &#x2F;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;              &amp;lt;% end %&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;            &amp;lt;&#x2F;div&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;          &amp;lt;&#x2F;div&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;          &amp;lt;.input
&lt;&#x2F;span&gt;&lt;span&gt;            id=&amp;quot;profile-image-src-input&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;            field={@image_form[:profile_image]}
&lt;&#x2F;span&gt;&lt;span&gt;            type=&amp;quot;hidden&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;            value={@resized_image_src}
&lt;&#x2F;span&gt;&lt;span&gt;            required
&lt;&#x2F;span&gt;&lt;span&gt;          &#x2F;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;          &amp;lt;:actions&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;            &amp;lt;%= if @allow_image_upload do %&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;              &amp;lt;.button phx-disable-with=&amp;quot;Changing...&amp;quot; id=&amp;quot;submit-image-btn&amp;quot; class=&amp;quot;&amp;quot;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;                Submit image
&lt;&#x2F;span&gt;&lt;span&gt;              &amp;lt;&#x2F;.button&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;            &amp;lt;% end %&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;          &amp;lt;&#x2F;:actions&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;lt;&#x2F;.simple_form&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;      &amp;lt;&#x2F;div&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;      &amp;lt;%!-- below is Email-form --%&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Couple of things to note here: we are currently referring to Phoenix functions and socket assignments that currently do not exist. We are missing these functions in the LiveView component:
&lt;code&gt;validate_profile_image&lt;&#x2F;code&gt;, which will be called for every change in the form.
&lt;code&gt;update_profile_image&lt;&#x2F;code&gt;, which will be called upon form-submit.&lt;&#x2F;p&gt;
&lt;p&gt;The following socket assignments are missing: 
&lt;code&gt;image_form&lt;&#x2F;code&gt;, a form-map that holds the field we want to parse.
&lt;code&gt;image_error&lt;&#x2F;code&gt;, a variable that we will add an error message to, if needed.
&lt;code&gt;profile_image&lt;&#x2F;code&gt;, a variable that will hold the current profile image.
&lt;code&gt;resized_image_src&lt;&#x2F;code&gt;, will hold a data URL of a resized image if validated.
&lt;code&gt;allow_image_upload&lt;&#x2F;code&gt;, will be false until validated.&lt;&#x2F;p&gt;
&lt;p&gt;On top of these Elixir-related changes, we will also make use of &lt;a href=&quot;https:&#x2F;&#x2F;hexdocs.pm&#x2F;phoenix_live_view&#x2F;js-interop.html&quot;&gt;LiveView’s JavaScript Interoperability&lt;&#x2F;a&gt; capabilities via its hooks. We will need a &lt;code&gt;Resize&lt;&#x2F;code&gt; hook, which will be responsible to resize an image to within specified parameters, and once that is done, it will update the value of the hidden input field.
Let’s start with the Elixir updates in the LiveView component (&lt;code&gt;user_settings_live.ex&lt;&#x2F;code&gt;). We will add the assignments first. These are added into the second &lt;code&gt;mount&lt;&#x2F;code&gt; function of the component:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;elixir&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-elixir &quot;&gt;&lt;code class=&quot;language-elixir&quot; data-lang=&quot;elixir&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;mount&lt;&#x2F;span&gt;&lt;span&gt;(_params, _session, socket) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;do
&lt;&#x2F;span&gt;&lt;span&gt;    user = socket.assigns.current_user
&lt;&#x2F;span&gt;&lt;span&gt;    email_changeset = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Accounts&lt;&#x2F;span&gt;&lt;span&gt;.change_user_email(user)
&lt;&#x2F;span&gt;&lt;span&gt;    password_changeset = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Accounts&lt;&#x2F;span&gt;&lt;span&gt;.change_user_password(user)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;    # Let’s get the changeset for the image
&lt;&#x2F;span&gt;&lt;span&gt;    profile_image_changset = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Accounts&lt;&#x2F;span&gt;&lt;span&gt;.change_profile_image(user)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    socket =
&lt;&#x2F;span&gt;&lt;span&gt;      socket
&lt;&#x2F;span&gt;&lt;span&gt;      |&amp;gt; assign(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:current_password&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;nil&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;      |&amp;gt; assign(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:email_form_current_password&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;nil&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;      |&amp;gt; assign(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:current_email&lt;&#x2F;span&gt;&lt;span&gt;, user.email)
&lt;&#x2F;span&gt;&lt;span&gt;      |&amp;gt; assign(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:email_form&lt;&#x2F;span&gt;&lt;span&gt;, to_form(email_changeset))
&lt;&#x2F;span&gt;&lt;span&gt;      |&amp;gt; assign(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:password_form&lt;&#x2F;span&gt;&lt;span&gt;, to_form(password_changeset))
&lt;&#x2F;span&gt;&lt;span&gt;      |&amp;gt; assign(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:trigger_submit&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;     
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;     # Our new assigns are added here
&lt;&#x2F;span&gt;&lt;span&gt;      |&amp;gt; assign(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:image_form&lt;&#x2F;span&gt;&lt;span&gt;, to_form(profile_image_changset))
&lt;&#x2F;span&gt;&lt;span&gt;      |&amp;gt; assign(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:image_error&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;      |&amp;gt; assign(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:profile_image&lt;&#x2F;span&gt;&lt;span&gt;, user.profile_image)
&lt;&#x2F;span&gt;&lt;span&gt;      |&amp;gt; assign(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:resized_image_src&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;      |&amp;gt; assign(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:allow_image_upload&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:ok&lt;&#x2F;span&gt;&lt;span&gt;, socket}
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Next up would be adding the event handlers for &lt;code&gt;validate_profile_image&lt;&#x2F;code&gt; and &lt;code&gt;update_profile_image&lt;&#x2F;code&gt;. But for the validation part it would be best to have a separate module that can validate by file size and type. This module’s &lt;code&gt;validate&lt;&#x2F;code&gt; function can then be called in our LiveView component. Create the file &lt;code&gt;.&#x2F;lib&#x2F;my_app&#x2F;image_validator.ex&lt;&#x2F;code&gt; with the following content:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;elixir&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-elixir &quot;&gt;&lt;code class=&quot;language-elixir&quot; data-lang=&quot;elixir&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;defmodule &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;MyApp&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;ImageValidator &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;do
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;validate_image&lt;&#x2F;span&gt;&lt;span&gt;(data_url, allowed_file_size, allowed_file_types)
&lt;&#x2F;span&gt;&lt;span&gt;      when &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;is_binary&lt;&#x2F;span&gt;&lt;span&gt;(data_url) and &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;is_integer&lt;&#x2F;span&gt;&lt;span&gt;(allowed_file_size) and &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;is_list&lt;&#x2F;span&gt;&lt;span&gt;(allowed_file_types) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;do
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;    # Extract the media type and the base64 part from the data_url
&lt;&#x2F;span&gt;&lt;span&gt;    [meta_data, base64] = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;.split(data_url, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    [media_type, _] = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;.replace(meta_data, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;data:&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&amp;quot;) |&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;.split(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;;&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;    # Decode the base64 part and get the binary data
&lt;&#x2F;span&gt;&lt;span&gt;    binary_data = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Base&lt;&#x2F;span&gt;&lt;span&gt;.decode64!(base64)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;    # Get the file size in bytes
&lt;&#x2F;span&gt;&lt;span&gt;    file_size = byte_size(binary_data)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;    # Get the file extension from the media type
&lt;&#x2F;span&gt;&lt;span&gt;    file_ext = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;.split(media_type, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;) |&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Enum&lt;&#x2F;span&gt;&lt;span&gt;.at(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;) |&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;.replace_suffix(&amp;quot;&amp;quot;, &amp;quot;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;    # Check if the file extension is allowed
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Enum&lt;&#x2F;span&gt;&lt;span&gt;.member?(allowed_file_types, file_ext) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;do
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;true &lt;&#x2F;span&gt;&lt;span&gt;-&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;        # Check if the file size is less than or equal to 2MB
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;case&lt;&#x2F;span&gt;&lt;span&gt; file_size &amp;lt;= allowed_file_size &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;do
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;true &lt;&#x2F;span&gt;&lt;span&gt;-&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;            {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:ok&lt;&#x2F;span&gt;&lt;span&gt;, data_url}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;false &lt;&#x2F;span&gt;&lt;span&gt;-&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;            # Return an error message for invalid file size
&lt;&#x2F;span&gt;&lt;span&gt;            {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:error&lt;&#x2F;span&gt;&lt;span&gt;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Image size must be less than or equal to #{&lt;&#x2F;span&gt;&lt;span&gt;allowed_file_size}&amp;quot;}
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;false &lt;&#x2F;span&gt;&lt;span&gt;-&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;        # Return an error message for invalid file extension
&lt;&#x2F;span&gt;&lt;span&gt;        {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:error&lt;&#x2F;span&gt;&lt;span&gt;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Image file type must be jpg, jpeg, png, or gif&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;}
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Let’s write out our &lt;em&gt;event handler&lt;&#x2F;em&gt; for &lt;code&gt;validate_profile_image&lt;&#x2F;code&gt; back in &lt;code&gt;user_settings_live.ex&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;elixir&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-elixir &quot;&gt;&lt;code class=&quot;language-elixir&quot; data-lang=&quot;elixir&quot;&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;handle_event&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;validate_profile_image&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;        %{&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;user&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; =&amp;gt; %{&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;profile_image&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; =&amp;gt; profile_image}},
&lt;&#x2F;span&gt;&lt;span&gt;        socket
&lt;&#x2F;span&gt;&lt;span&gt;      ) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;do
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;MyApp&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;ImageValidator&lt;&#x2F;span&gt;&lt;span&gt;.validate_image(profile_image, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2 &lt;&#x2F;span&gt;&lt;span&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1024 &lt;&#x2F;span&gt;&lt;span&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1024&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;~w&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;jpg jpeg gif png webp&lt;&#x2F;span&gt;&lt;span&gt;)) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;do
&lt;&#x2F;span&gt;&lt;span&gt;      {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:ok&lt;&#x2F;span&gt;&lt;span&gt;, data_url} -&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;        {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:noreply&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;         socket
&lt;&#x2F;span&gt;&lt;span&gt;         |&amp;gt; assign(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;resized_image_src:&lt;&#x2F;span&gt;&lt;span&gt; data_url, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;allow_image_upload: true&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;image_error: false&lt;&#x2F;span&gt;&lt;span&gt;)}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;      {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:error&lt;&#x2F;span&gt;&lt;span&gt;, message} -&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;        {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:noreply&lt;&#x2F;span&gt;&lt;span&gt;, socket |&amp;gt; assign(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;allow_image_upload: false&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;image_error:&lt;&#x2F;span&gt;&lt;span&gt; message)}
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We can see how we are using pattern matching to unpack &lt;code&gt;profile_image&lt;&#x2F;code&gt; from the incoming parameters variable. This data is passed into the &lt;code&gt;validate_image&lt;&#x2F;code&gt; function, along with the maximum allowed file size (&lt;em&gt;2MB&lt;&#x2F;em&gt;) and allowed file types. As the function returns either an &lt;code&gt;ok&lt;&#x2F;code&gt; atom along with the image data, or an &lt;code&gt;error&lt;&#x2F;code&gt; and message, we will adjust the socket assignments accordingly. &lt;&#x2F;p&gt;
&lt;p&gt;Now, let’s add the event handler for &lt;code&gt;update_profile_image&lt;&#x2F;code&gt; in the same &lt;code&gt;user_settings_live.ex&lt;&#x2F;code&gt;, along with two helper functions:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;elixir&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-elixir &quot;&gt;&lt;code class=&quot;language-elixir&quot; data-lang=&quot;elixir&quot;&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;handle_event&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;update_profile_image&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;        %{&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;user&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; =&amp;gt; %{&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;profile_image&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; =&amp;gt; profile_image}},
&lt;&#x2F;span&gt;&lt;span&gt;        socket
&lt;&#x2F;span&gt;&lt;span&gt;      ) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;do
&lt;&#x2F;span&gt;&lt;span&gt;    
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;    # Make sure that the image data is still valid
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;MyApp&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;ImageValidator&lt;&#x2F;span&gt;&lt;span&gt;.validate_image(
&lt;&#x2F;span&gt;&lt;span&gt;           profile_image,
&lt;&#x2F;span&gt;&lt;span&gt;           &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2 &lt;&#x2F;span&gt;&lt;span&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1024 &lt;&#x2F;span&gt;&lt;span&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1024&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;           &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;~w&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;jpg jpeg gif png webp&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;         ) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;do
&lt;&#x2F;span&gt;&lt;span&gt;     
&lt;&#x2F;span&gt;&lt;span&gt;      {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:ok&lt;&#x2F;span&gt;&lt;span&gt;, data_url} -&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;        handle_update_profile_image(data_url, socket)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;      {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:error&lt;&#x2F;span&gt;&lt;span&gt;, message} -&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;        {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:noreply&lt;&#x2F;span&gt;&lt;span&gt;, socket |&amp;gt; assign(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;allow_image_upload: false&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;image_error:&lt;&#x2F;span&gt;&lt;span&gt; message)}
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;defp &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;handle_update_profile_image&lt;&#x2F;span&gt;&lt;span&gt;(profile_image, socket) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;do
&lt;&#x2F;span&gt;&lt;span&gt;    [meta_data, base64] = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;.split(profile_image, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    file_name = generate_file_name()
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    image_binary = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Base&lt;&#x2F;span&gt;&lt;span&gt;.decode64!(base64)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    destination =
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Path&lt;&#x2F;span&gt;&lt;span&gt;.join([&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:code&lt;&#x2F;span&gt;&lt;span&gt;.priv_dir(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:my_app&lt;&#x2F;span&gt;&lt;span&gt;), &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;static&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;uploads&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Path&lt;&#x2F;span&gt;&lt;span&gt;.basename(file_name)])
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;File&lt;&#x2F;span&gt;&lt;span&gt;.write!(destination, image_binary)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    src_path = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;~p&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;uploads&#x2F;#{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Path&lt;&#x2F;span&gt;&lt;span&gt;.basename(destination)}&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    prev_file_name = socket.assigns.current_user.profile_image
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Accounts&lt;&#x2F;span&gt;&lt;span&gt;.update_profile_image(socket.assigns.current_user, %{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;profile_image:&lt;&#x2F;span&gt;&lt;span&gt; src_path}) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;do
&lt;&#x2F;span&gt;&lt;span&gt;      {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:ok&lt;&#x2F;span&gt;&lt;span&gt;, _} -&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;        # If update was ok, then remove previous image
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;.length(prev_file_name) &amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;do
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;true &lt;&#x2F;span&gt;&lt;span&gt;-&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;            previous_file_path =
&lt;&#x2F;span&gt;&lt;span&gt;              &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Path&lt;&#x2F;span&gt;&lt;span&gt;.join([
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:code&lt;&#x2F;span&gt;&lt;span&gt;.priv_dir(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:my_app&lt;&#x2F;span&gt;&lt;span&gt;),
&lt;&#x2F;span&gt;&lt;span&gt;                &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;static&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;                &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;uploads&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Path&lt;&#x2F;span&gt;&lt;span&gt;.basename(prev_file_name)
&lt;&#x2F;span&gt;&lt;span&gt;              ])
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;File&lt;&#x2F;span&gt;&lt;span&gt;.rm!(previous_file_path)
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;        # Send back the updated image path and reset upload assignments
&lt;&#x2F;span&gt;&lt;span&gt;        {
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:noreply&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;          socket
&lt;&#x2F;span&gt;&lt;span&gt;          |&amp;gt; assign(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:profile_image&lt;&#x2F;span&gt;&lt;span&gt;, src_path)
&lt;&#x2F;span&gt;&lt;span&gt;          |&amp;gt; assign(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:resized_image_src&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;          |&amp;gt; assign(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:allow_image_upload&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;      {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:error&lt;&#x2F;span&gt;&lt;span&gt;, _} -&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;        {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:noreply&lt;&#x2F;span&gt;&lt;span&gt;, socket |&amp;gt; assign(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;image_error: &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Could not update new image to user.&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)}
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;span&gt;  
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;defp &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;generate_file_name &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;do
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;    # Get the current timestamp in milliseconds
&lt;&#x2F;span&gt;&lt;span&gt;    timestamp = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;DateTime&lt;&#x2F;span&gt;&lt;span&gt;.utc_now() |&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;DateTime&lt;&#x2F;span&gt;&lt;span&gt;.to_unix(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:millisecond&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;    # Generate a random string of 8 characters
&lt;&#x2F;span&gt;&lt;span&gt;    random_string = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:crypto&lt;&#x2F;span&gt;&lt;span&gt;.strong_rand_bytes(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;8&lt;&#x2F;span&gt;&lt;span&gt;) |&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Base&lt;&#x2F;span&gt;&lt;span&gt;.encode64(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;padding: false&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;    # Concatenate the timestamp and the random string with a dash
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;#{&lt;&#x2F;span&gt;&lt;span&gt;timestamp}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;-#{&lt;&#x2F;span&gt;&lt;span&gt;random_string}&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The new function will create a file in the directory at &lt;code&gt;.&#x2F;priv&#x2F;static&#x2F;uploads&lt;&#x2F;code&gt;. Create the directory if it does not exist. Then define it as one of the allowed static directories with the function &lt;code&gt;static_paths&lt;&#x2F;code&gt; in &lt;code&gt;.&#x2F;lib&#x2F;my_app_web.ex&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;elixir&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-elixir &quot;&gt;&lt;code class=&quot;language-elixir&quot; data-lang=&quot;elixir&quot;&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;static_paths&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;do: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;~w&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;assets fonts images uploads favicon.ico robots.txt&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We will be making use of a JavaScript LiveView Hook here as well. It will be mounted on a file-input and resize any incoming images and set the resulting data URL (including base64 bytestring) to the hidden input-field. When that is done, it will trigger a change-event on the form which in turn will trigger the validate-change hook in Phoenix. &lt;&#x2F;p&gt;
&lt;p&gt;Lets first create a JavaScript module that can resize an image. Create the file &lt;code&gt;.&#x2F;assets&#x2F;js&#x2F;image_resizer.js&lt;&#x2F;code&gt; with the following content:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;js&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-js &quot;&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;export function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;resizeImage&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;image&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;maxWidth&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;maxHeight&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;scale &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;width &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;image&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;naturalWidth
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;height &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;image&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;naturalHeight
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;width &lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;maxWidth&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;scale &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;image&lt;&#x2F;span&gt;&lt;span&gt;.width &#x2F; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;maxWidth
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;width &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;maxWidth
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;height &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;image&lt;&#x2F;span&gt;&lt;span&gt;.height &#x2F; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;scale
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;height &lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;maxHeight&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;scale &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;image&lt;&#x2F;span&gt;&lt;span&gt;.height &#x2F; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;maxHeight
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;height &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;maxHeight
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;width &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;image&lt;&#x2F;span&gt;&lt;span&gt;.width &#x2F; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;scale
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;width &lt;&#x2F;span&gt;&lt;span&gt;= Math.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;floor&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;width&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;height &lt;&#x2F;span&gt;&lt;span&gt;= Math.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;floor&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;height&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;canvas &lt;&#x2F;span&gt;&lt;span&gt;= document.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;createElement&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;canvas&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;canvas&lt;&#x2F;span&gt;&lt;span&gt;.width = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;width
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;canvas&lt;&#x2F;span&gt;&lt;span&gt;.height = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;height
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;context2D &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;canvas&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;getContext&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;2d&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;context2D&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;drawImage&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;image&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;width&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;height&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;canvas&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;toDataURL&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The let’s create the Resize hook and use this function in &lt;code&gt;.&#x2F;assets&#x2F;js&#x2F;app.js&lt;&#x2F;code&gt;: &lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;js&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-js &quot;&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; …
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; add import for the resizeImage function
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;resizeImage &lt;&#x2F;span&gt;&lt;span&gt;} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;.&#x2F;image_resizer&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Then create our hook
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Hooks &lt;&#x2F;span&gt;&lt;span&gt;= {}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Hooks&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Resize &lt;&#x2F;span&gt;&lt;span&gt;= {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;mounted&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;        
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;maxWidth &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;250
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;maxHeight &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;250
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;imageInput &lt;&#x2F;span&gt;&lt;span&gt;= document.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;getElementById&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;profile-image-uploader&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Inspired by blog-post https:&#x2F;&#x2F;imagekit.io&#x2F;blog&#x2F;how-to-resize-image-in-javascript&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;imageInput&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;addEventListener&lt;&#x2F;span&gt;&lt;span&gt;(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;change&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;e&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;e&lt;&#x2F;span&gt;&lt;span&gt;.target.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;files&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;imageFile &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;e&lt;&#x2F;span&gt;&lt;span&gt;.target.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;files&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;    
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;reader &lt;&#x2F;span&gt;&lt;span&gt;= new FileReader();
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;reader&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;onload &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;e&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;image &lt;&#x2F;span&gt;&lt;span&gt;= new Image()
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;image&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;onload &lt;&#x2F;span&gt;&lt;span&gt;= () &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;                        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;dataUrl &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;resizeImage&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;image&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;maxWidth&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;maxHeight&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;                        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;dataUrl&lt;&#x2F;span&gt;&lt;span&gt;.length === &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;                            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;                        }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;                        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;resizedImage &lt;&#x2F;span&gt;&lt;span&gt;= document.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;getElementById&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;image-preview&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;) ?? new Image()
&lt;&#x2F;span&gt;&lt;span&gt;                        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;resizedImage&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;setAttribute&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;image-preview&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;                        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;resizedImage&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;setAttribute&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;alt&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Preview&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;                        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;resizedImage&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;src &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;dataUrl
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;                        document.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;getElementById&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;image-preview-container&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;appendChild&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;resizedImage&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;                        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;hiddenInput &lt;&#x2F;span&gt;&lt;span&gt;= document.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;getElementById&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;profile-image-src-input&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;                        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;hiddenInput&lt;&#x2F;span&gt;&lt;span&gt;.value = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;dataUrl
&lt;&#x2F;span&gt;&lt;span&gt;                        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;hiddenInput&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;dispatchEvent&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;                            new Event(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;input&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, {bubbles: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;})
&lt;&#x2F;span&gt;&lt;span&gt;                        )
&lt;&#x2F;span&gt;&lt;span&gt;                    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;image&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;src &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;e&lt;&#x2F;span&gt;&lt;span&gt;.target.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;result
&lt;&#x2F;span&gt;&lt;span&gt;                }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;reader&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;readAsDataURL&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;imageFile&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;        })
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; and let’s make it available to our LiveView socket:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;liveSocket &lt;&#x2F;span&gt;&lt;span&gt;= new LiveSocket(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;live&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Socket&lt;&#x2F;span&gt;&lt;span&gt;, {params: {_csrf_token: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;csrfToken&lt;&#x2F;span&gt;&lt;span&gt;}, hooks: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Hooks&lt;&#x2F;span&gt;&lt;span&gt;})
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; …
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We see how we can set a preview image from the &lt;code&gt;dataUrl&lt;&#x2F;code&gt; produced by the &lt;code&gt;resizeImage&lt;&#x2F;code&gt; function and append it into a container in the DOM. We are also setting it as a value on the hidden input element. This alone won’t trigger the form to emit a &lt;code&gt;change&lt;&#x2F;code&gt; event, so we explicitly do that with a &lt;code&gt;dispatchEvent&lt;&#x2F;code&gt; on the element. That in turn will trigger the &lt;code&gt;phx-change&lt;&#x2F;code&gt; instruction which will emit the &lt;code&gt;validate_profile_image&lt;&#x2F;code&gt; event, and if all is valid then a “Submit image” button will appear. &lt;&#x2F;p&gt;
&lt;h2 id=&quot;in-summary&quot;&gt;In summary&lt;&#x2F;h2&gt;
&lt;p&gt;Phoenix LiveView is all about reacting to events. We can attach hooks and event handlers on most elements we choose. In this scenario we upload a file indirectly via a LiveView form, which has hooks and events that takes care of resizing and validating uploads whenever a new file has been chosen.&lt;&#x2F;p&gt;
&lt;p&gt;We take care of resizing on the client-side. We emit a change-event on the form to initialize a server-side validation on the resized image data. If everything appears OK, the upload is greenlit on the client and the user may submit the image. Upon submitting a new event is taking place and we will again reaffirm that the image data is valid before we create a file, store the updated image path to the user and then remove the old image.&lt;&#x2F;p&gt;
&lt;p&gt;Here’s our updated User Settings page:

    













    


&lt;div class=&quot;image-container center&quot;&gt;
    &lt;img
            alt=&quot;The current profile image is shown. It is a quokka in a lab coat hunched over a table with papers on it. The incoming file for uploading is below it. It shows a quokka in a labcoat holding a handful of macarons. All around it is raining macarons.&quot;
            src=&quot;submit-image.png&quot;
            srcset=&quot;https:&amp;#x2F;&amp;#x2F;abjork.land&amp;#x2F;processed_images&amp;#x2F;submit-image.05625f4824ce936f.webp 240w,
                        https:&amp;#x2F;&amp;#x2F;abjork.land&amp;#x2F;processed_images&amp;#x2F;submit-image.827481acc741db6c.webp 400w,
                        https:&amp;#x2F;&amp;#x2F;abjork.land&amp;#x2F;processed_images&amp;#x2F;submit-image.0b163a11618b1ee5.webp 600w&quot;
            sizes=&quot;(max-width: 240px) 200px,
                        (max-width: 400px) 360px,
                        600px&quot;
    &#x2F;&gt;
    &lt;div class=&quot;image-subtext&quot;&gt;&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;&lt;&#x2F;p&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>Schroedinger&#x27;s Snack Stash</title>
        <published>2023-12-28T00:00:00+00:00</published>
        <updated>2023-12-28T00:00:00+00:00</updated>
        <author>
          <name>Anders Björkland</name>
        </author>
        <link rel="alternate" href="https://abjork.land/articles/beakerage_chronicles/schroedingers-snack-stash/" type="text/html"/>
        <id>https://abjork.land/articles/beakerage_chronicles/schroedingers-snack-stash/</id>
        <content type="html">&lt;div class=&quot;article-header&quot;&gt;
    










&lt;img
        alt=&quot;133&quot;
        src=&quot;https:&amp;#x2F;&amp;#x2F;abjork.land&amp;#x2F;processed_images&amp;#x2F;hero.dcded1a34ce33e34.png&quot;
        srcset=&quot;https:&amp;#x2F;&amp;#x2F;abjork.land&amp;#x2F;processed_images&amp;#x2F;hero.abf64eedea465514.png 240w,
                    https:&amp;#x2F;&amp;#x2F;abjork.land&amp;#x2F;processed_images&amp;#x2F;hero.dcded1a34ce33e34.png 400w,
                    https:&amp;#x2F;&amp;#x2F;abjork.land&amp;#x2F;processed_images&amp;#x2F;hero.b38b4123a4dc37b5.png 600w&quot;
        sizes=&quot;(max-width: 240px) 200px,
                    (max-width: 400px) 360px,
                    600px&quot;
&#x2F;&gt;


    &lt;div class=&quot;text-content&quot;&gt;
        &lt;h1 class=&quot;article-title&quot;&gt;
            &lt;div class=&quot;title&quot;&gt;Schroedinger&amp;#x27;s Snack Stash&lt;&#x2F;div&gt;
            
        &lt;&#x2F;h1&gt;
    &lt;&#x2F;div&gt;
    

 

 

&lt;div class=&quot;tag-list absolute&quot;&gt;
    
        
        &lt;div&gt;&lt;a href=&quot;https:&#x2F;&#x2F;abjork.land&#x2F;tags&#x2F;elixir&#x2F;&quot; class=&quot;hover-bold&quot;&gt;Elixir&lt;&#x2F;a&gt;&lt;&#x2F;div&gt;
        
    
&lt;&#x2F;div&gt;



&lt;&#x2F;div&gt;
&lt;p&gt;&lt;em&gt;In the heart of Beakerage, where sea serpents sunbathed and pocket-sized black holes were as common as gossip at the local bakery, Keith - the Quantum Quokka - awoke with a start! “&lt;strong&gt;May your macarons never vanish into the void&lt;&#x2F;strong&gt;.” The ethereal voice was still echoing in Keith’s mind. He couldn’t recall anyone making such an astute statement, yet here it was: haunting him! His pocket-blackhole had been in a binging phase lately, often pulling each of his emergency snacks beyond the event horizon, leaving barely a crumb for sustenance.&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Beyond Beakerage - Elixir conundrums and learnings&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Module Definition&lt;&#x2F;li&gt;
&lt;li&gt;Aliasing modules&lt;&#x2F;li&gt;
&lt;li&gt;Struct Definition&lt;&#x2F;li&gt;
&lt;li&gt;Struct Manipulation&lt;&#x2F;li&gt;
&lt;li&gt;Pipelining&lt;&#x2F;li&gt;
&lt;li&gt;Elixir Documentation&lt;&#x2F;li&gt;
&lt;li&gt;Function Definition&lt;&#x2F;li&gt;
&lt;li&gt;Private Function&lt;&#x2F;li&gt;
&lt;li&gt;Pattern Matching&lt;&#x2F;li&gt;
&lt;li&gt;DateTime Manipulation&lt;&#x2F;li&gt;
&lt;li&gt;String Interpolation&lt;&#x2F;li&gt;
&lt;li&gt;Enum Mapping&lt;&#x2F;li&gt;
&lt;li&gt;Writing tests&lt;&#x2F;li&gt;
&lt;li&gt;Test for errors&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;It had been a conundrum, one which he thought he had solved with the help of his sunspot friend, Sylvie. Keith put on his slippers and waddled over to his desk while pondering. He always carried his pocket-blackhole in his ‘emergency’-pocket, and could not make use of his ‘safekeeping’-pocket for his snacks. That would violate the quantum coherence keeping his blackhole functional. But a third pocket would keep a snack in superposition in perpetuity, until observed! He had deftly solved it by adding a &lt;code&gt;QuantumPocket&lt;&#x2F;code&gt;, but feared that it was not as robust as he would like. These thoughts kept bugging his dreams.&lt;&#x2F;p&gt;
&lt;p&gt;Carefully sorting away his notes on “the great disco ball multiverse theory” (this is a story for another time), he laid down a fresh sheet of paper and sat down. “No sleep tonight, but a solution to behold I hope”, Keith thought to himself as he leaned over the desk and grabbed a pair of safety goggles and put them on. His tiny hands started scribbling furiously. His quokka brain buzzed with ideas. He needed a pocket that defied both entropy and existential uncertainty: a pocket that would not collapse into a probability haze!&lt;&#x2F;p&gt;
&lt;p&gt;As the night turned to dawn, the first glimpses of a solution appeared on the horizon. Keith had his blueprint ready. He found that his pocket would need three components:
Stardust Silk, a robust and hardy material that would withstand quantum fluctuations by weaving memories together.
Time-sprinkled Velcro, would stick to itself across parallel dimensions, fastening past with the future.
Uncertainty Thread, would surely leave snacks in a delightful superposition by threading memories within a bubble beyond space-time.&lt;&#x2F;p&gt;










    
        
        
    
    

    
    
    
    
    &lt;div class=&quot;image-container center&quot;&gt;
        &lt;img
                alt=&quot;A quokka with a lab coat, sitting by a workbench waring safety goggles.&quot;
                src=&quot;keith_in_goggles_blueprint.png&quot;
                srcset=&quot;https:&amp;#x2F;&amp;#x2F;abjork.land&amp;#x2F;processed_images&amp;#x2F;keith_in_goggles_blueprint.b12100f6c758804b.webp 240w,
                            https:&amp;#x2F;&amp;#x2F;abjork.land&amp;#x2F;processed_images&amp;#x2F;keith_in_goggles_blueprint.8b0fc2ce82b8795a.webp 400w,
                            https:&amp;#x2F;&amp;#x2F;abjork.land&amp;#x2F;processed_images&amp;#x2F;keith_in_goggles_blueprint.e6d323107349551a.webp 600w&quot;
                sizes=&quot;(max-width: 240px) 200px,
                            (max-width: 400px) 360px,
                            600px&quot;
        &#x2F;&gt;
        &lt;div class=&quot;image-subtext&quot;&gt;A typical early day, Keith with sketches for a new invention or discovery [SDXL generation]&lt;&#x2F;div&gt;
    &lt;&#x2F;div&gt;


&lt;p&gt;While many would need to cross the Severely Sinister Sea in search of moon spiders and pixieworms, Keith had all he needed in his right pocket: a blackhole with an Elixir interface!&lt;&#x2F;p&gt;
&lt;p&gt;Setting out to construct the weave, Keith pulled out an otherworldly silk by his fingertips:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;elixir&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-elixir &quot;&gt;&lt;code class=&quot;language-elixir&quot; data-lang=&quot;elixir&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;defmodule &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;StardustSilk &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;do
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;@doc &amp;quot;&amp;quot;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;  Weave the Stardust Silk, capturing cosmic memories
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;  &amp;quot;&amp;quot;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;weave&lt;&#x2F;span&gt;&lt;span&gt;(memories) when &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;is_list&lt;&#x2F;span&gt;&lt;span&gt;(memories) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;do
&lt;&#x2F;span&gt;&lt;span&gt;    memories
&lt;&#x2F;span&gt;&lt;span&gt;    |&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Enum&lt;&#x2F;span&gt;&lt;span&gt;.map(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;capture_memory&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    |&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Enum&lt;&#x2F;span&gt;&lt;span&gt;.join
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;defp &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;capture_memory&lt;&#x2F;span&gt;&lt;span&gt;(memory) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;do
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;🌟 #{&lt;&#x2F;span&gt;&lt;span&gt;memory}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt; 🌟&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;To make sure to keep the nightmares at bay, Keith realized he would need to construct tests for each module as well:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;elixir&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-elixir &quot;&gt;&lt;code class=&quot;language-elixir&quot; data-lang=&quot;elixir&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;defmodule &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;StardustSilkTest &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;do
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;ExUnit&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Case
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  test &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;weave memories into Stardust Silk&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;do
&lt;&#x2F;span&gt;&lt;span&gt;    memories = [&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Galaxy memories&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Comet sighs&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Black hole laughter&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;]
&lt;&#x2F;span&gt;&lt;span&gt;    expected_result = &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;🌟 Galaxy memories 🌟🌟 Comet sighs 🌟🌟 Black hole laughter 🌟&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    assert &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;StardustSilk&lt;&#x2F;span&gt;&lt;span&gt;.weave(memories) == expected_result
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Keith threaded his tiny needle, its tip sharper than a quasar’s wit. The Stardust Silk shimmered, each strand holding a memory: the birth of a galaxy, the sigh of a comet, the laughter of a black hole. Keith’s quokka brain buzzed with anticipation. He was ready to weave eternity. Safe, knowing it would hold a cosmic weight worth of snacks - as long as it withstood the pressure and tearing of the space-time-continuum.&lt;&#x2F;p&gt;
&lt;p&gt;Looking over his blueprint again; time-sprinkled velcro would hold the snack secure over past, present, and future - up until the time the bubble would be burst by Keith’s nimble fingers searching for a macaron. Knowing that the velcro will require a datetime, he deftly made use of pattern matching to structure the time-cohesive:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;elixir&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-elixir &quot;&gt;&lt;code class=&quot;language-elixir&quot; data-lang=&quot;elixir&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;defmodule &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;TimeSprinkledVelcro &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;do
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;@doc &amp;quot;&amp;quot;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;  Attach the Velcro to moments, bridging past and future
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;  &amp;quot;&amp;quot;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;attach&lt;&#x2F;span&gt;&lt;span&gt;(%&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;DateTime&lt;&#x2F;span&gt;&lt;span&gt;{} = moment) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;do
&lt;&#x2F;span&gt;&lt;span&gt;    past = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;DateTime&lt;&#x2F;span&gt;&lt;span&gt;.add(moment, -&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:day&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    future = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;DateTime&lt;&#x2F;span&gt;&lt;span&gt;.add(moment, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:day&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;🕰️ (from #{&lt;&#x2F;span&gt;&lt;span&gt;past}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt; to #{&lt;&#x2F;span&gt;&lt;span&gt;future}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;) 🕰️&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And the accompanying tests:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;elixir&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-elixir &quot;&gt;&lt;code class=&quot;language-elixir&quot; data-lang=&quot;elixir&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;defmodule &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;TimeSprinkledVelcroTest &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;do
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;ExUnit&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Case
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  test &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;attach Velcro to moments&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;do
&lt;&#x2F;span&gt;&lt;span&gt;    datetime = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;~U&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;2023-12-26T07:51:11Z&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;    past = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;~U&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;2023-12-25T07:51:11Z&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;    future = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;~U&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;2023-12-27T07:51:11Z&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;    # Test the function with a specific moment
&lt;&#x2F;span&gt;&lt;span&gt;    expected_result = &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;🕰️ (from #{&lt;&#x2F;span&gt;&lt;span&gt;past}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt; to #{&lt;&#x2F;span&gt;&lt;span&gt;future}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;) 🕰️&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    assert &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;TimeSprinkledVelcro&lt;&#x2F;span&gt;&lt;span&gt;.attach(datetime) == expected_result
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  test &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;raises an error for invalid input&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;do
&lt;&#x2F;span&gt;&lt;span&gt;    assert_raise &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;FunctionClauseError&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span&gt;-&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;TimeSprinkledVelcro&lt;&#x2F;span&gt;&lt;span&gt;.attach(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;2023-12-26T07:51:11Z&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Having pulled both the stardust silk and the time-sprinkled velcro from the abyss, the Quantum Quokka contemplated how the uncertainty thread best would keep its characteristics once it was drawn from the blackhole as well. It all would come down to how the thread was observed! So letting something else do its magic with the thread would solve the dilemma: &lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;elixir&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-elixir &quot;&gt;&lt;code class=&quot;language-elixir&quot; data-lang=&quot;elixir&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;defmodule &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;UncertaintyThread &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;do
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;alias &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;StardustSilk&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;as: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Silk
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;alias &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;TimeSprinkledVelcro&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;as: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Velcro
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;@doc &amp;quot;&amp;quot;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;  Thread each possible outcome together with rigorous uncertainty
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;  &amp;quot;&amp;quot;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;thread&lt;&#x2F;span&gt;&lt;span&gt;(unknown, %&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Silk&lt;&#x2F;span&gt;&lt;span&gt;{} = silk_struct) when &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;is_function&lt;&#x2F;span&gt;&lt;span&gt;(unknown, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;do
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    memories_with_result =
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Enum&lt;&#x2F;span&gt;&lt;span&gt;.map(silk_struct.memories, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn&lt;&#x2F;span&gt;&lt;span&gt; memory -&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;        amount = unknown.(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:rand&lt;&#x2F;span&gt;&lt;span&gt;.uniform(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;42&lt;&#x2F;span&gt;&lt;span&gt;))
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;#{&lt;&#x2F;span&gt;&lt;span&gt;memory}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt; (#{&lt;&#x2F;span&gt;&lt;span&gt;amount}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    silk = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Silk&lt;&#x2F;span&gt;&lt;span&gt;.weave(memories_with_result)
&lt;&#x2F;span&gt;&lt;span&gt;    velcro = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Velcro&lt;&#x2F;span&gt;&lt;span&gt;.attach(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;DateTime&lt;&#x2F;span&gt;&lt;span&gt;.utc_now)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    %{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;silk:&lt;&#x2F;span&gt;&lt;span&gt; silk, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;velcro:&lt;&#x2F;span&gt;&lt;span&gt; velcro}
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And testing for the expected behavior:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;elixir&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-elixir &quot;&gt;&lt;code class=&quot;language-elixir&quot; data-lang=&quot;elixir&quot;&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;ExUnit&lt;&#x2F;span&gt;&lt;span&gt;.start()
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;defmodule &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;UncertaintyThreadTest &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;do
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;ExUnit&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Case
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  test &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;threads memories and results&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;do
&lt;&#x2F;span&gt;&lt;span&gt;    silk_struct = %&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;StardustSilk&lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;memories: &lt;&#x2F;span&gt;&lt;span&gt;[&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Galaxy memories&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Comet sighs&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;]}
&lt;&#x2F;span&gt;&lt;span&gt;    result = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;UncertaintyThread&lt;&#x2F;span&gt;&lt;span&gt;.thread(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn&lt;&#x2F;span&gt;&lt;span&gt; _ -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;42 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end&lt;&#x2F;span&gt;&lt;span&gt;, silk_struct)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    assert result.silk == &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;🌟 Galaxy memories (42) 🌟🌟 Comet sighs (42) 🌟&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    expected_pattern = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;~r&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;🕰️ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;\d&lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span&gt;}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;\d&lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;\d&lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;\d&lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;\d&lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;\d&lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;\d&lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;6&lt;&#x2F;span&gt;&lt;span&gt;}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Z to &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;\d&lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span&gt;}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;\d&lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;\d&lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;\d&lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;\d&lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;\d&lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;\d&lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;6&lt;&#x2F;span&gt;&lt;span&gt;}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Z&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;🕰️&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;    assert &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Regex&lt;&#x2F;span&gt;&lt;span&gt;.match?(expected_pattern, result.velcro)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;StardustSilk and TimeSprinkledVelcro with UncertaintyThread weaves a handsomely new pocket under Keith’s nimble fingers. When he attached the new pocket to his coat he already felt a light tingle of anticipation. Schroedingers Snack Stash 2.0! While he could never be certain of the number of snacks he could retrieve, he now knew that the combination of the memories of the universe and the time spent in the past would fix some amount of snacks into the present. No longer was the dilemma whether there would be a snack or not, but whether there would be plenty or a few.&lt;&#x2F;p&gt;










    
        
        
    
    

    
    
    
    
    &lt;div class=&quot;image-container center&quot;&gt;
        &lt;img
                alt=&quot;A quokka with a lab coat, looking with wonder around him&quot;
                src=&quot;keith_in_a_macaron_rain.png&quot;
                srcset=&quot;https:&amp;#x2F;&amp;#x2F;abjork.land&amp;#x2F;processed_images&amp;#x2F;keith_in_a_macaron_rain.49d740ba4106e222.webp 240w,
                            https:&amp;#x2F;&amp;#x2F;abjork.land&amp;#x2F;processed_images&amp;#x2F;keith_in_a_macaron_rain.fde777ae8ad1c7db.webp 400w,
                            https:&amp;#x2F;&amp;#x2F;abjork.land&amp;#x2F;processed_images&amp;#x2F;keith_in_a_macaron_rain.c2abe8a6935e166e.webp 600w&quot;
                sizes=&quot;(max-width: 240px) 200px,
                            (max-width: 400px) 360px,
                            600px&quot;
        &#x2F;&gt;
        &lt;div class=&quot;image-subtext&quot;&gt;Wonder of all wonders, a rain of macarons [SDXL generation]&lt;&#x2F;div&gt;
    &lt;&#x2F;div&gt;


&lt;p&gt;And the Quantum Quokka reached into his pocket and found a fistful of probability-flavored macarons. A comet far-away sighed with relief, and on a beach much closer a sea serpent blessed the sun as it turned over to bathe in its rays. Who knew when a day would come when tampering with the space-time continuum would break Beakerage, but today was not that day. The Quantum Quokka looked at the fistful of macarons and thought to himself; “may you never vanish into the void”, and stuffed his mouth full of the delightful confections. &lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Beyond Beakerage - check your Elixir knowledge&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;How do you define a module?&lt;&#x2F;li&gt;
&lt;li&gt;Why would you use a struct instead of a map?&lt;&#x2F;li&gt;
&lt;li&gt;Did you see any use of pipelining?&lt;&#x2F;li&gt;
&lt;li&gt;Would you prefer using pattern matching or a “when” guard for making sure a function gets the correct type of argument?&lt;&#x2F;li&gt;
&lt;li&gt;How can you test that an error will be thrown?&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;blockquote&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>The Macaron Paradox</title>
        <published>2023-12-20T00:00:00+00:00</published>
        <updated>2023-12-20T00:00:00+00:00</updated>
        <author>
          <name>Anders Björkland</name>
        </author>
        <link rel="alternate" href="https://abjork.land/articles/beakerage_chronicles/macaron-paradox/" type="text/html"/>
        <id>https://abjork.land/articles/beakerage_chronicles/macaron-paradox/</id>
        <content type="html">&lt;div class=&quot;article-header&quot;&gt;
    










&lt;img
        alt=&quot;133&quot;
        src=&quot;https:&amp;#x2F;&amp;#x2F;abjork.land&amp;#x2F;processed_images&amp;#x2F;hero.a5fa4a2f2e255275.png&quot;
        srcset=&quot;https:&amp;#x2F;&amp;#x2F;abjork.land&amp;#x2F;processed_images&amp;#x2F;hero.4d0be7c6357a0c01.png 240w,
                    https:&amp;#x2F;&amp;#x2F;abjork.land&amp;#x2F;processed_images&amp;#x2F;hero.a5fa4a2f2e255275.png 400w,
                    https:&amp;#x2F;&amp;#x2F;abjork.land&amp;#x2F;processed_images&amp;#x2F;hero.4154a6bde4fa3c6a.png 600w&quot;
        sizes=&quot;(max-width: 240px) 200px,
                    (max-width: 400px) 360px,
                    600px&quot;
&#x2F;&gt;


    &lt;div class=&quot;text-content&quot;&gt;
        &lt;h1 class=&quot;article-title&quot;&gt;
            &lt;div class=&quot;title&quot;&gt;The Macaron Paradox&lt;&#x2F;div&gt;
            
        &lt;&#x2F;h1&gt;
    &lt;&#x2F;div&gt;
    

 

 

&lt;div class=&quot;tag-list absolute&quot;&gt;
    
        
        &lt;div&gt;&lt;a href=&quot;https:&#x2F;&#x2F;abjork.land&#x2F;tags&#x2F;elixir&#x2F;&quot; class=&quot;hover-bold&quot;&gt;Elixir&lt;&#x2F;a&gt;&lt;&#x2F;div&gt;
        
    
&lt;&#x2F;div&gt;



&lt;&#x2F;div&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;It was a bustling town tearing by its threads. It was on the cusp of being called a city by the travelers arriving by boatloads each day, were it not for the inhabitants wielding their favorite pastry in a threatening way on even the slightest suggestion that their town was not just a little hamlet by the harbor. Once upon a time it was! And it was the way that many residents would like to keep it; a place separated from the world and the succession of time. But then the sunbathing sea serpents started dwelling on its shores, word spread of its many characters and possibilities, and so the world became aware of the quaint community by the Severely Sinister Sea: Beakerage!&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;On a sunny afternoon, Keith reclined on a beach towel. His coat unbuttoned to reveal his small frame as his fur absorbed the sun’s rays like a solar-powered calculator. Many knew him affectionately as the Quantum Quokka. Next to him was one of the sea serpents; Sylvie. Her scales shimmering in the sun in shades of red and purple. They would often find themselves sharing the sunspots and the occasional algebraic equation. Having just ended a lengthy discussion on the application of Schrödinger Equations for slowing down the time in Beakerage, Keith found himself in a sticky situation: his stomach had started growling. His emergency snack radar pinged - it was time for macarons!&lt;&#x2F;p&gt;
&lt;p&gt;Jumping up on his two feet, Keith quickly put his hand down his right pocket, the one designated for emergency but found only void - literal void!&lt;&#x2F;p&gt;










    
        
        
    
    

    
    
    
    
    &lt;div class=&quot;image-container center&quot;&gt;
        &lt;img
                alt=&quot;A quokka with a lab coat, sitting on a towel on a sunny beach.&quot;
                src=&quot;keith_quantum_quokka.png&quot;
                srcset=&quot;https:&amp;#x2F;&amp;#x2F;abjork.land&amp;#x2F;processed_images&amp;#x2F;keith_quantum_quokka.d76dc4e823c4b600.webp 240w,
                            https:&amp;#x2F;&amp;#x2F;abjork.land&amp;#x2F;processed_images&amp;#x2F;keith_quantum_quokka.e64b94c9e2a6aab9.webp 400w,
                            https:&amp;#x2F;&amp;#x2F;abjork.land&amp;#x2F;processed_images&amp;#x2F;keith_quantum_quokka.38daecccea864c0f.webp 600w&quot;
                sizes=&quot;(max-width: 240px) 200px,
                            (max-width: 400px) 360px,
                            600px&quot;
        &#x2F;&gt;
        &lt;div class=&quot;image-subtext&quot;&gt;User generated image using SDXL1&lt;&#x2F;div&gt;
    &lt;&#x2F;div&gt;


&lt;p&gt;Arching a non-existing eyebrow, Sylvie gave a questioning glance. “The pocket-sized black hole, again?”&lt;&#x2F;p&gt;
&lt;p&gt;“Curse you, entropy!” Keith muttered, shaking his tiny fist at the void. “Why must you devour my macarons?”&lt;&#x2F;p&gt;
&lt;p&gt;“Entropy?” Sylvie questioned. “Are you sure it’s not just a hungry singularity?”&lt;&#x2F;p&gt;
&lt;p&gt;“Same difference.” Keith sighed. “But it’s a conundrum I can’t seem to escape: I can’t put my emergency macarons in my left ‘just for safekeeping’ pocket - that would violate the principles of quantum coherence”&lt;&#x2F;p&gt;
&lt;p&gt;Sylvie blinked. “You don’t make much of a coherent sense right now!”&lt;&#x2F;p&gt;
&lt;p&gt;“Quantum coherence,” Keith started. “You see, in our world, pockets exist in a delicate superposition. They’re simultaneously ‘emergency’ and ‘safekeeping.’ If I put an emergency item in my left pocket, it collapses the waveform, and suddenly it’s no longer safekeeping!”&lt;&#x2F;p&gt;
&lt;p&gt;“That’s not how it is in our world. I think it’s only you. But you would need a third pocket?” Sylvie wondered.&lt;&#x2F;p&gt;
&lt;p&gt;Keith jumped at the idea. “Exactly! I need a ‘Schroedinger’s Snack Stash’. It’ll exist in both states until observed. That way, my macarons won’t vanish.”&lt;&#x2F;p&gt;
&lt;p&gt;Opening his pocket-sized black hole (carefully avoiding its event horizon), Keith coded an Elixir module: &lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;elixir&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-elixir &quot;&gt;&lt;code class=&quot;language-elixir&quot; data-lang=&quot;elixir&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;defmodule &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;QuantumPocket &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;do
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;defstruct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;snacks: &lt;&#x2F;span&gt;&lt;span&gt;[]
&lt;&#x2F;span&gt;&lt;span&gt;  
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;add_snack&lt;&#x2F;span&gt;&lt;span&gt;(pocket, snack) when &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;is_list&lt;&#x2F;span&gt;&lt;span&gt;(snack) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;do
&lt;&#x2F;span&gt;&lt;span&gt;    %{pocket | &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;snacks:&lt;&#x2F;span&gt;&lt;span&gt; pocket.snacks ++ snack}
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Keith summoned his freshly baked pocket and stored a little macaron crumb in it:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;elixir&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-elixir &quot;&gt;&lt;code class=&quot;language-elixir&quot; data-lang=&quot;elixir&quot;&gt;&lt;span&gt;keiths_pockets = %&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;QuantumPocket&lt;&#x2F;span&gt;&lt;span&gt;{}
&lt;&#x2F;span&gt;&lt;span&gt;safekeeping_pocket = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;QuantumPocket&lt;&#x2F;span&gt;&lt;span&gt;.add_snack(keiths_pockets, [&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Emergency Macarons (crumb)&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;])
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;“Are you sure that the little crumb is still there?” Sylvie inquired.&lt;&#x2F;p&gt;
&lt;p&gt;Keith looked in the pocket to verify:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;elixir&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-elixir &quot;&gt;&lt;code class=&quot;language-elixir&quot; data-lang=&quot;elixir&quot;&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;IO&lt;&#x2F;span&gt;&lt;span&gt;.inspect(safekeeping_pocket.snacks)  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# [&amp;quot;Emergency Macarons (crumb)&amp;quot;]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;With a sigh of relief Keith looked over at Sylvie. “Yeah, it’s all good. Just wish it was the whole set, a crumb won’t carry me over until lunch.”&lt;&#x2F;p&gt;
&lt;p&gt;“That’s the beauty of sunspot friends then. It’s not a probability flavored macaron, but have some of my milkshake that probably tastes of strawberry”.&lt;&#x2F;p&gt;
&lt;p&gt;Keith grinned. “Looks like I’ve cracked the code, but you sure saved the afternoon”. And so, Keith, the Quantum Quokka, reclined once more. Sylvie nodded approvingly and followed suit. &lt;&#x2F;p&gt;
&lt;p&gt;And thus, the legend of Schroedinger&#x27;s Snack Stash was born - a tale of quantum pockets, sweet paradoxes, and the eternal struggle between hunger and coherence. &lt;&#x2F;p&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>How PHP has evolved over the years</title>
        <published>2023-10-06T00:00:00+00:00</published>
        <updated>2023-10-07T00:00:00+00:00</updated>
        <author>
          <name>Anders Björkland</name>
        </author>
        <link rel="alternate" href="https://abjork.land/articles/exploration/php-evolution/" type="text/html"/>
        <id>https://abjork.land/articles/exploration/php-evolution/</id>
        <content type="html">&lt;div class=&quot;article-header&quot;&gt;
    










&lt;img
        alt=&quot;133&quot;
        src=&quot;https:&amp;#x2F;&amp;#x2F;abjork.land&amp;#x2F;processed_images&amp;#x2F;hero.e01a39599c03def9.png&quot;
        srcset=&quot;https:&amp;#x2F;&amp;#x2F;abjork.land&amp;#x2F;processed_images&amp;#x2F;hero.79a3ab68c977a388.png 240w,
                    https:&amp;#x2F;&amp;#x2F;abjork.land&amp;#x2F;processed_images&amp;#x2F;hero.e01a39599c03def9.png 400w,
                    https:&amp;#x2F;&amp;#x2F;abjork.land&amp;#x2F;processed_images&amp;#x2F;hero.ce1a3a6e4764f4de.png 600w&quot;
        sizes=&quot;(max-width: 240px) 200px,
                    (max-width: 400px) 360px,
                    600px&quot;
&#x2F;&gt;


    &lt;div class=&quot;text-content&quot;&gt;
        &lt;h1 class=&quot;article-title&quot;&gt;
            &lt;div class=&quot;title&quot;&gt;Evolution of PHP&lt;&#x2F;div&gt;
            
        &lt;&#x2F;h1&gt;
    &lt;&#x2F;div&gt;
    

 

 

&lt;div class=&quot;tag-list absolute&quot;&gt;
    
        
        &lt;div&gt;&lt;a href=&quot;https:&#x2F;&#x2F;abjork.land&#x2F;tags&#x2F;php&#x2F;&quot; class=&quot;hover-bold&quot;&gt;PHP&lt;&#x2F;a&gt;&lt;&#x2F;div&gt;
        
    
&lt;&#x2F;div&gt;



&lt;&#x2F;div&gt;
&lt;p&gt;&lt;em&gt;While there have been articles before foretelling about both the death and the rebirth of PHP, this time we will simply look at how PHP has evolved over the years and what has been the driving force behind it.&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-beginning&quot;&gt;The beginning&lt;&#x2F;h2&gt;
&lt;p&gt;Let&#x27;s take a journey back to the early days of the web, when Rasmus Lerdorf created PHP in 1994. It all started with a simple idea - to track visitors to his online resume. Rasmus wrote a collection of C programs to do just that, and thus PHP was born.[1]&lt;&#x2F;p&gt;
&lt;p&gt;So it started from a very personal need, but Rasmus kept developing and rewriting his PHP scripts. He strived to keep it similar to C, which meant that developers familiar with C and PERL could pick it up with &amp;quot;ease&amp;quot;. &lt;&#x2F;p&gt;
&lt;p&gt;In 1997, two Israeli developers were using PHP and found that it had some limitations. They decided to approach the creator of PHP, Rasmus Lerdorf, with suggestions for improvement. This was a pivotal moment in the evolution of PHP, as it led to a complete rewrite of the parser in C and the release of PHP 3.&lt;&#x2F;p&gt;
&lt;p&gt;With PHP 3, the language gained support for multiple database interfaces and Object Oriented Programming. This was a huge leap forward for PHP, and its popularity grew rapidly. People from all around the world started contributing to the development of PHP, adding new features and improving its underlying architecture.&lt;&#x2F;p&gt;
&lt;p&gt;Today, PHP is a full-fledged programming language that powers a large part of the web. It has come a long way from its humble beginnings as a tool to track visitors to a resume. And the discussions and contributions that have shaped the language are a testament to the power of collaboration and community in software development.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-collaborative-nature-of-php&quot;&gt;The collaborative nature of PHP&lt;&#x2F;h2&gt;
&lt;p&gt;PHP is a language that has been shaped by its community. While it started out as one man&#x27;s effort, it has grown into a language that is developed by the community, for the community. The discussions leading up to new features and improvements to the language are open for public view in the &lt;a href=&quot;https:&#x2F;&#x2F;news-web.php.net&#x2F;php.internals&quot;&gt;Internals mailing list.&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;The purpose of these discussions is to inform the community and language feature voters on what features to implement, and how to do that. This is where the community comes together to make &lt;a href=&quot;https:&#x2F;&#x2F;wiki.php.net&#x2F;rfc&#x2F;voting&quot;&gt;suggestions for improvement&lt;&#x2F;a&gt; and request feedback on their ideas.&lt;&#x2F;p&gt;
&lt;p&gt;The voters in the PHP community are responsible for taking a stand on the features that are being discussed. They vote on the features, and if a feature gets enough votes, it will be implemented. This democratic process ensures that the community has a say in the direction of the language, and that the language continues to evolve to meet the needs of its users.&lt;&#x2F;p&gt;
&lt;p&gt;So if you&#x27;re a PHP developer, you have the power to shape the future of the language. You can make suggestions for improvement, provide feedback on other people&#x27;s ideas, and (if you get recognized as a main contributor) vote on the features that you think are important. By participating in the PHP community, you can help to ensure that PHP continues to be a language that is developed by the community, for the community.&lt;&#x2F;p&gt;
&lt;p&gt;Let&#x27;s look at a popular feature which was finally introduced in PHP 7; &lt;a href=&quot;https:&#x2F;&#x2F;www.php.net&#x2F;manual&#x2F;en&#x2F;migration70.new-features.php#migration70.new-features.return-type-declarations&quot;&gt;Return type declaration&lt;&#x2F;a&gt;. This feature meant that a function now could declare which type it would return.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;js&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-js &quot;&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;sum&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;int $a&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;int $b&lt;&#x2F;span&gt;&lt;span&gt;): int {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$a &lt;&#x2F;span&gt;&lt;span&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$b&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The &lt;a href=&quot;https:&#x2F;&#x2F;wiki.php.net&#x2F;rfc&#x2F;return_types&quot;&gt;return types-RFC&lt;&#x2F;a&gt; shows it being introduced in 2014, but a &lt;a href=&quot;https:&#x2F;&#x2F;wiki.php.net&#x2F;rfc&#x2F;returntypehint2&quot;&gt;pre-cursor&lt;&#x2F;a&gt; to it was introduced in 2011 and withdrawn. The mailing list means that questions and concerns can be raised and discussed before the vote, and thus increasing the likelihood of a successful vote. For example, here&#x27;s a concern that was raised what return types would mean for using of types in closures:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;On Fri, Jan 16, 2015 at 4:53 PM, Simon J Welsh &amp;lt;simon@welsh.co.nz&amp;gt; wrote:
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; The tests have it after the use():
&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; https:&#x2F;&#x2F;github.com&#x2F;php&#x2F;php-src&#x2F;pull&#x2F;997&#x2F;files#diff-e306c6e99612ba59b00a4fe435b287e5R9
&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; This was discussed in depth a couple of times in the related threads.
&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;Thank you for the information. It should be in the RFC. IMHO.
&lt;&#x2F;span&gt;&lt;span&gt;I feels natural to have type spec after function parameter definition
&lt;&#x2F;span&gt;&lt;span&gt;rather than
&lt;&#x2F;span&gt;&lt;span&gt;after &amp;quot;use&amp;quot;.
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;Anyway, I looked HACK&#x2F;HHVM manual
&lt;&#x2F;span&gt;&lt;span&gt;http:&#x2F;&#x2F;docs.hhvm.com&#x2F;manual&#x2F;en&#x2F;index.php
&lt;&#x2F;span&gt;&lt;span&gt;and couldn&amp;#39;t find the syntax.
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;If it&amp;#39;s the same, then it should be OK.
&lt;&#x2F;span&gt;&lt;span&gt;I&amp;#39;m just making sure before voting.
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;news-web.php.net&#x2F;php.internals&#x2F;80663&quot;&gt;Re: [RFC][Vote] Return Types, 16th January 2015&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;The final vote ended up with 47 in favor and 3 against. And the feature was introduced in PHP 7.0. &lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Who can vote?&lt;&#x2F;strong&gt;
Two type of voters exists: Members of the core team, and members of the community deemed to be major contributors by the core team. &lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h2 id=&quot;the-evolution-of-php-code&quot;&gt;The evolution of PHP code&lt;&#x2F;h2&gt;
&lt;p&gt;Here&#x27;s a simple object-oriented example to showcase how PHP has evolved, by providing an example of a code in PHP 4, and then how it would look like in PHP 5, 7, and 8:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;js&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-js &quot;&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; PHP 4
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;User &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;var $name&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;var $age&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;var $email&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;User&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$name&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$age&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$email&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$this&lt;&#x2F;span&gt;&lt;span&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$name&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$this&lt;&#x2F;span&gt;&lt;span&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;age &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$age&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$this&lt;&#x2F;span&gt;&lt;span&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;email &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$email&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;getName&lt;&#x2F;span&gt;&lt;span&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$this&lt;&#x2F;span&gt;&lt;span&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;getAge&lt;&#x2F;span&gt;&lt;span&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$this&lt;&#x2F;span&gt;&lt;span&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;age&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;getEmail&lt;&#x2F;span&gt;&lt;span&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$this&lt;&#x2F;span&gt;&lt;span&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;email&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$user &lt;&#x2F;span&gt;&lt;span&gt;= new User(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Anders&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;37&lt;&#x2F;span&gt;&lt;span&gt;, &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;anders.bjorkland@umain.com&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Hello &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39; . &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$user&lt;&#x2F;span&gt;&lt;span&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;getName&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;pre data-lang=&quot;js&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-js &quot;&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; PHP 5.3
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;namespace &lt;&#x2F;span&gt;&lt;span&gt;App\Entity; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; namespaces are introduced
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;User &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; introduced accessor keywords
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;private &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$name&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;private &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$age&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;private &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$email&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;public function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;__construct&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$name&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$age&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$email&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$this&lt;&#x2F;span&gt;&lt;span&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$name&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$this&lt;&#x2F;span&gt;&lt;span&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;age &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$age&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$this&lt;&#x2F;span&gt;&lt;span&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;email &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$email&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;public function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;getName&lt;&#x2F;span&gt;&lt;span&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$this&lt;&#x2F;span&gt;&lt;span&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;public function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;getAge&lt;&#x2F;span&gt;&lt;span&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$this&lt;&#x2F;span&gt;&lt;span&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;age&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;public function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;getEmail&lt;&#x2F;span&gt;&lt;span&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$this&lt;&#x2F;span&gt;&lt;span&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;email&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;pre data-lang=&quot;js&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-js &quot;&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; PHP 7.4
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;User &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; introduced types for properties (7.4)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;private &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;string $name&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;private &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;string $age&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;private &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;string $email&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; introduced types for parameters (7.0)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;public function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;__construct&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;string $name&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;int $age&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;string $email&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$this&lt;&#x2F;span&gt;&lt;span&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$name&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$this&lt;&#x2F;span&gt;&lt;span&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;age &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$age&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$this&lt;&#x2F;span&gt;&lt;span&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;email &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$email&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; ...and for return types (7.0)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;public function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;getName&lt;&#x2F;span&gt;&lt;span&gt;(): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;string 
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$this&lt;&#x2F;span&gt;&lt;span&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;public function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;getAge&lt;&#x2F;span&gt;&lt;span&gt;(): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;int 
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$this&lt;&#x2F;span&gt;&lt;span&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;age&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;public function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;getEmail&lt;&#x2F;span&gt;&lt;span&gt;(): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;string 
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$this&lt;&#x2F;span&gt;&lt;span&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;email&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;pre data-lang=&quot;js&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-js &quot;&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; PHP 8
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;User &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; introduced property promotion and named arguments
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;public function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;__construct&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;private &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;string $name&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;private &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;int $age&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;private &lt;&#x2F;span&gt;&lt;span&gt;?&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;string $email &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;null
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;{}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; introduced union types (8.0)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;public function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;getName&lt;&#x2F;span&gt;&lt;span&gt;(): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span&gt;|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;int 
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$this&lt;&#x2F;span&gt;&lt;span&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;public function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;getAge&lt;&#x2F;span&gt;&lt;span&gt;(): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;int 
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$this&lt;&#x2F;span&gt;&lt;span&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;age&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;public function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;getEmail&lt;&#x2F;span&gt;&lt;span&gt;(): ?&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;string 
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$this&lt;&#x2F;span&gt;&lt;span&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;email&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$user &lt;&#x2F;span&gt;&lt;span&gt;= new User(
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Anders&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;, 
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;age&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;37
&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Hello &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39; . &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$user&lt;&#x2F;span&gt;&lt;span&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;getName&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;What we can see is an improved support for types, and a more concise syntax. In addition to this, there have been improvements with the underlying code parser, which has led to &lt;a href=&quot;https:&#x2F;&#x2F;onlinephp.io&#x2F;benchmarks&#x2F;2023&#x2F;39&quot;&gt;better performance&lt;&#x2F;a&gt;. In a benchmark test (a script is executed 100 times), we can see its execution time going from 237 seconds (PHP 4.0.6) to 17 seconds (PHP 8.0). Which in most worlds would be considered a significant improvement. But then again, this has been a development over 20+ years.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;bonus-features&quot;&gt;Bonus-features&lt;&#x2F;h3&gt;
&lt;h4 id=&quot;attributes&quot;&gt;Attributes&lt;&#x2F;h4&gt;
&lt;p&gt;PHP 8.0 also introduced &lt;a href=&quot;https:&#x2F;&#x2F;www.php.net&#x2F;manual&#x2F;en&#x2F;language.attributes.php&quot;&gt;attributes&lt;&#x2F;a&gt;, which is a way to add metadata to classes, methods, and functions. Its predecessor were annotations via PHPDocs, but this is now the native way to do that.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;js&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-js &quot;&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;User &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    #[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ORM&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;\&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;Column&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;type&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;length&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;255&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;)]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;private &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;string $name&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    #[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ORM&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;\&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;Column&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;type&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;integer&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;)]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;private &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;int $age&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    #[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ORM&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;\&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;Column&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;type&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;length&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;255&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;)]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;private &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;string $email&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;public function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;__construct&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;private &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;string $name&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;private &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;int $age&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;private &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;string $email
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;{}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h4 id=&quot;arrow-functions&quot;&gt;Arrow-functions&lt;&#x2F;h4&gt;
&lt;p&gt;PHP 7.4 introduced &lt;a href=&quot;https:&#x2F;&#x2F;www.php.net&#x2F;manual&#x2F;en&#x2F;functions.arrow.php&quot;&gt;arrow-functions&lt;&#x2F;a&gt;, which is a more concise way to write anonymous functions. &lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;js&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-js &quot;&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; PHP 7.4
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$numbers &lt;&#x2F;span&gt;&lt;span&gt;= [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$multiplier &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$multiplied &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;array_map&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;fn&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$x&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$multiplier&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$x &lt;&#x2F;span&gt;&lt;span&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$multiplier&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$numbers&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;var_export&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$multiplied&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;* Output:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;array (
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;  0 =&amp;gt; 2,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;  1 =&amp;gt; 4,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;  2 =&amp;gt; 6,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;  3 =&amp;gt; 8,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;  4 =&amp;gt; 10,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt; *&#x2F;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h4 id=&quot;null-coalescing-assignment-operator&quot;&gt;Null coalescing assignment operator&lt;&#x2F;h4&gt;
&lt;p&gt;PHP 7.4 has also introduced the &lt;a href=&quot;https:&#x2F;&#x2F;www.php.net&#x2F;manual&#x2F;en&#x2F;migration74.new-features.php#migration74.new-features.core.null-coalescing-assignment-operator&quot;&gt;null coalescing assignment operator&lt;&#x2F;a&gt;, which is a more concise way to assign a value to a variable if it&#x27;s not already set.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;js&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-js &quot;&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$foo &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$bar &lt;&#x2F;span&gt;&lt;span&gt;?? &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;default&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h4 id=&quot;nullsafe-operator&quot;&gt;Nullsafe operator&lt;&#x2F;h4&gt;
&lt;p&gt;PHP 8.0 introduced the &lt;a href=&quot;https:&#x2F;&#x2F;www.php.net&#x2F;manual&#x2F;en&#x2F;migration80.new-features.php#migration80.new-features.core.nullsafe-operator&quot;&gt;nullsafe operator&lt;&#x2F;a&gt;, which is a more concise way to check if a property or method exists on a variable.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;js&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-js &quot;&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$foo &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$bar&lt;&#x2F;span&gt;&lt;span&gt;?-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;baz&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h4 id=&quot;match-expression&quot;&gt;Match expression&lt;&#x2F;h4&gt;
&lt;p&gt;PHP 8.0 also introduced the &lt;a href=&quot;https:&#x2F;&#x2F;www.php.net&#x2F;manual&#x2F;en&#x2F;control-structures.match.php&quot;&gt;match expression&lt;&#x2F;a&gt;, which (kind-of) is a more concise way to write switch statements.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;js&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-js &quot;&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$bar &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$foo &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;match &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$bar&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;one&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;two&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;3 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;three&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;6 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;four to six&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;default =&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;unknown&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;};
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;echo $foo&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; &amp;#39;four to six&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; alternate match:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$foo &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;match &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$bar &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;4 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;less than four&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$bar &lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;4 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;4 or greater&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;default =&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;unknown&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;};
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;echo $foo&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; &amp;#39;4 or greater&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h4 id=&quot;union-types&quot;&gt;Union types&lt;&#x2F;h4&gt;
&lt;p&gt;PHP 8.0 introduced &lt;a href=&quot;https:&#x2F;&#x2F;www.php.net&#x2F;manual&#x2F;en&#x2F;language.types.declarations.php#language.types.declarations.union&quot;&gt;union types&lt;&#x2F;a&gt;, which is a way to declare that a variable can be of multiple types.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;js&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-js &quot;&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;User &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;public function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;__construct&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;private &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;int $name&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;private &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;int $age&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;private &lt;&#x2F;span&gt;&lt;span&gt;?&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;string $email &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;null
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;{}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;public function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;getName&lt;&#x2F;span&gt;&lt;span&gt;(): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span&gt;|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;int 
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$this&lt;&#x2F;span&gt;&lt;span&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;public function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;getAge&lt;&#x2F;span&gt;&lt;span&gt;(): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;int 
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$this&lt;&#x2F;span&gt;&lt;span&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;age&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;public function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;getEmail&lt;&#x2F;span&gt;&lt;span&gt;(): ?&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;string 
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$this&lt;&#x2F;span&gt;&lt;span&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;email&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$user &lt;&#x2F;span&gt;&lt;span&gt;= new User(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;24&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;37&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;echo $user&lt;&#x2F;span&gt;&lt;span&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;getName&lt;&#x2F;span&gt;&lt;span&gt;(); &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; 24
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h4 id=&quot;enumerations&quot;&gt;ENUMERATIONS!!!&lt;&#x2F;h4&gt;
&lt;p&gt;PHP 8.1 finally introduced &lt;a href=&quot;https:&#x2F;&#x2F;www.php.net&#x2F;manual&#x2F;en&#x2F;language.enums.php&quot;&gt;enumerations&lt;&#x2F;a&gt;, which is a way to declare a set of named constants.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;js&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-js &quot;&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;enum &lt;&#x2F;span&gt;&lt;span&gt;Fruit {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;case&lt;&#x2F;span&gt;&lt;span&gt; Apple;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;case&lt;&#x2F;span&gt;&lt;span&gt; Banana;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;case&lt;&#x2F;span&gt;&lt;span&gt; Orange;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;eatFruit&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Fruit $fruit&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;switch &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$fruit&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Fruit&lt;&#x2F;span&gt;&lt;span&gt;::Apple:
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Yummy&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;break&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Fruit&lt;&#x2F;span&gt;&lt;span&gt;::Banana:
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;B &amp;amp; NaN&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;break&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Fruit&lt;&#x2F;span&gt;&lt;span&gt;::Orange:
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Red-yello treat&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;break&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h4 id=&quot;fibers&quot;&gt;Fibers&lt;&#x2F;h4&gt;
&lt;p&gt;PHP 8.1 also introduced &lt;a href=&quot;https:&#x2F;&#x2F;www.php.net&#x2F;manual&#x2F;en&#x2F;language.fibers.php&quot;&gt;fibers&lt;&#x2F;a&gt;, which is a way to create interruptible functions, enhancing PHP&#x27;s ability to handle asynchronous tasks. This has come to be used to great effect in asynchronous frameworks such as &lt;a href=&quot;https:&#x2F;&#x2F;reactphp.org&#x2F;&quot;&gt;ReactPHP&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;&#x2F;h2&gt;
&lt;p&gt;In conclusion, PHP has come a long way since its early days as a simple tool for tracking visitors to a resume. Over the years, the language has evolved to become a powerful and feature-rich language that is used by millions of developers around the world.&lt;&#x2F;p&gt;
&lt;p&gt;One of the key factors in PHP&#x27;s success has been its ability to evolve with the needs of its users. From the addition of object-oriented programming in PHP 4 to attributes and fibers in PHP 8, PHP has continued to add new features and improve its syntax to make it more powerful and flexible.&lt;&#x2F;p&gt;
&lt;p&gt;As PHP continues to evolve, it will be interesting to see what new features and improvements are added to the language. But one thing is certain - PHP will continue to be a language that is developed by the community, for the community. And that is what makes it such a powerful and enduring language.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.php.net&#x2F;manual&#x2F;en&#x2F;history.php.php&quot;&gt;1. PHP: History of PHP&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Additional tools: &lt;a href=&quot;https:&#x2F;&#x2F;onlinephp.io&#x2F;&quot;&gt;onlinephp.io&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>Top 6 uses of open source machine learning models (and more)</title>
        <published>2023-06-23T00:00:00+00:00</published>
        <updated>2024-03-28T00:00:00+00:00</updated>
        <author>
          <name>Anders Björkland</name>
        </author>
        <link rel="alternate" href="https://abjork.land/articles/elixir/opensource-models/" type="text/html"/>
        <id>https://abjork.land/articles/elixir/opensource-models/</id>
        <content type="html">&lt;div class=&quot;article-header&quot;&gt;
    










&lt;img
        alt=&quot;133&quot;
        src=&quot;https:&amp;#x2F;&amp;#x2F;abjork.land&amp;#x2F;processed_images&amp;#x2F;hero.d0aca02321b170f8.png&quot;
        srcset=&quot;https:&amp;#x2F;&amp;#x2F;abjork.land&amp;#x2F;processed_images&amp;#x2F;hero.fcaaab65718e8ff4.png 240w,
                    https:&amp;#x2F;&amp;#x2F;abjork.land&amp;#x2F;processed_images&amp;#x2F;hero.d0aca02321b170f8.png 400w,
                    https:&amp;#x2F;&amp;#x2F;abjork.land&amp;#x2F;processed_images&amp;#x2F;hero.a21b6c1213765994.png 600w&quot;
        sizes=&quot;(max-width: 240px) 200px,
                    (max-width: 400px) 360px,
                    600px&quot;
&#x2F;&gt;


    &lt;div class=&quot;text-content&quot;&gt;
        &lt;h1 class=&quot;article-title&quot;&gt;
            &lt;div class=&quot;title&quot;&gt;Top 6 uses of open source machine learning models&lt;&#x2F;div&gt;
            
        &lt;&#x2F;h1&gt;
    &lt;&#x2F;div&gt;
    

 

 

&lt;div class=&quot;tag-list absolute&quot;&gt;
    
        
        &lt;div&gt;&lt;a href=&quot;https:&#x2F;&#x2F;abjork.land&#x2F;tags&#x2F;axon&#x2F;&quot; class=&quot;hover-bold&quot;&gt;axon&lt;&#x2F;a&gt;&lt;&#x2F;div&gt;
        
        &lt;div&gt;&lt;a href=&quot;https:&#x2F;&#x2F;abjork.land&#x2F;tags&#x2F;ai&#x2F;&quot; class=&quot;hover-bold&quot;&gt;AI&lt;&#x2F;a&gt;&lt;&#x2F;div&gt;
        
        &lt;div&gt;&lt;a href=&quot;https:&#x2F;&#x2F;abjork.land&#x2F;tags&#x2F;onnx&#x2F;&quot; class=&quot;hover-bold&quot;&gt;ONNX&lt;&#x2F;a&gt;&lt;&#x2F;div&gt;
        
        &lt;div&gt;&lt;a href=&quot;https:&#x2F;&#x2F;abjork.land&#x2F;tags&#x2F;bumblebee&#x2F;&quot; class=&quot;hover-bold&quot;&gt;BumbleBee&lt;&#x2F;a&gt;&lt;&#x2F;div&gt;
        
        &lt;div&gt;&lt;a href=&quot;https:&#x2F;&#x2F;abjork.land&#x2F;tags&#x2F;huggingface&#x2F;&quot; class=&quot;hover-bold&quot;&gt;HuggingFace&lt;&#x2F;a&gt;&lt;&#x2F;div&gt;
        
    
&lt;&#x2F;div&gt;



&lt;&#x2F;div&gt;
&lt;p&gt;AI is all the rage right now. While it&#x27;s not the first time in history that we believe we are on the cusp of a great leap in AI advancement only to have an &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;AI_winter&quot;&gt;&amp;quot;AI winter&amp;quot;&lt;&#x2F;a&gt; fall upon the field. This time it feels different, and rather than waning investments in the field, we see many diverse organizations (and individuals) running towards ChatGPT and other ML models to enhance their operations. We can see their uses from Search Algorithms to medical diagnoses. &lt;a href=&quot;https:&#x2F;&#x2F;www.technologyreview.com&#x2F;2023&#x2F;05&#x2F;12&#x2F;1072950&#x2F;open-source-ai-google-openai-eleuther-meta&#x2F;&quot;&gt;While some argue&lt;&#x2F;a&gt; that privately owned and privately licensed models will always have the upper hand on open source models, the &lt;a href=&quot;https:&#x2F;&#x2F;www.semianalysis.com&#x2F;p&#x2F;google-we-have-no-moat-and-neither&quot;&gt;opposite sentiment can also be found&lt;&#x2F;a&gt;. No matter which side of the argument you fall, it can&#x27;t be denied that open source models can provide great value for whomever chooses to use them.&lt;&#x2F;p&gt;
&lt;p&gt;In this article we will dive into a few of these models and see what they are capable of. We will give an overview of different areas they can be used in and provide links for those who want to read their respective research paper. We will see models for sentiment analysis, image recognition, voice recognition, named entity recognition, text generation, and text-to-image generation. And as a surprise (&lt;strong&gt;SPOILER ALERT!&lt;&#x2F;strong&gt;), we may recognize that some of these models have multiple areas of applications.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;1-sentiment-analysis&quot;&gt;1. Sentiment analysis&lt;&#x2F;h2&gt;
&lt;p&gt;Natural language processing (NLP) is a field where we can harness the power of computers to make sense of human language. That&#x27;s where we see models such as &lt;a href=&quot;https:&#x2F;&#x2F;huggingface.co&#x2F;blog&#x2F;bert-101&quot;&gt;BERT&lt;&#x2F;a&gt; or &lt;a href=&quot;https:&#x2F;&#x2F;huggingface.co&#x2F;docs&#x2F;transformers&#x2F;model_doc&#x2F;bart&quot;&gt;BART&lt;&#x2F;a&gt; being used for different tasks. When it comes to sentiment analysis, we often see a BERT-type model being used. One example is XLM-RoBERTa, a multilingual model. In this example we can see it being used for classifying a text based on 3 different categories, and the probability that the text expresses a particular sentiment: &lt;&#x2F;p&gt;

    
    













    


&lt;div class=&quot;image-container center&quot;&gt;
    &lt;img
            alt=&quot;Prompt: &amp;quot;If cats ruled the world, nothing would be different. So how do we know that they are not already ruling?&amp;quot;. Negative: 0.686, Neutral: 0.276, Positive: 0.038&quot;
            src=&quot;roberta-sentiment.png&quot;
            srcset=&quot;https:&amp;#x2F;&amp;#x2F;abjork.land&amp;#x2F;processed_images&amp;#x2F;roberta-sentiment.53f4afdc78ce4377.webp 240w,
                        https:&amp;#x2F;&amp;#x2F;abjork.land&amp;#x2F;processed_images&amp;#x2F;roberta-sentiment.d8a6ebc74c9ca96b.webp 400w,
                        https:&amp;#x2F;&amp;#x2F;abjork.land&amp;#x2F;processed_images&amp;#x2F;roberta-sentiment.e1021d0ca13571c7.webp 600w&quot;
            sizes=&quot;(max-width: 240px) 200px,
                        (max-width: 400px) 360px,
                        600px&quot;
    &#x2F;&gt;
    &lt;div class=&quot;image-subtext&quot;&gt;&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;The model in this case is &lt;a href=&quot;https:&#x2F;&#x2F;huggingface.co&#x2F;cardiffnlp&#x2F;twitter-xlm-roberta-base-sentiment?text=If+cats+ruled+the+world%2C+nothing+would+be+different.+So+how+do+we+know+that+they+are+not+already+ruling%3F&quot;&gt;cardiffnlp&#x2F;twitter-xlm-roberta-base-sentiment&lt;&#x2F;a&gt;. It is further specialization of XLM-RoBERTa by training on 198M tweets. So to no surprise it can make sense of emojis as well. However, it has difficulty detecting sarcasm. There are particular ventures &lt;a href=&quot;https:&#x2F;&#x2F;towardsdatascience.com&#x2F;sarcasm-detection-with-nlp-cbff1723f69a&quot;&gt;1&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;ieeexplore.ieee.org&#x2F;abstract&#x2F;document&#x2F;8284317&quot;&gt;2&lt;&#x2F;a&gt; that seeks to rectify that!&lt;&#x2F;p&gt;










    
        
        
    
    

    
    
    
    
    &lt;div class=&quot;image-container center&quot;&gt;
        &lt;img
                alt=&quot;Prompt: &amp;quot;If cats ruled the world, nothing would be different. So how do we know that they are not already ruling?&amp;quot;. Negative: 0.686, Neutral: 0.276, Positive: 0.038&quot;
                src=&quot;cat-ruler-01-m.png&quot;
                srcset=&quot;https:&amp;#x2F;&amp;#x2F;abjork.land&amp;#x2F;processed_images&amp;#x2F;cat-ruler-01-m.eaac88023b3e9f4c.webp 240w,
                            https:&amp;#x2F;&amp;#x2F;abjork.land&amp;#x2F;processed_images&amp;#x2F;cat-ruler-01-m.6ec1c4f9a1bc4a70.webp 400w,
                            https:&amp;#x2F;&amp;#x2F;abjork.land&amp;#x2F;processed_images&amp;#x2F;cat-ruler-01-m.0ffd0360b2339644.webp 600w&quot;
                sizes=&quot;(max-width: 240px) 200px,
                            (max-width: 400px) 360px,
                            600px&quot;
        &#x2F;&gt;
        &lt;div class=&quot;image-subtext&quot;&gt;User generated image using Bing Image Creator&lt;&#x2F;div&gt;
    &lt;&#x2F;div&gt;


&lt;p&gt;Read the paper introducing XLM-RoBERTa, from November 2019: &lt;a href=&quot;https:&#x2F;&#x2F;arxiv.org&#x2F;abs&#x2F;1911.02116&quot;&gt;Unsupervised Cross-lingual Representation Learning at Scale&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;2-image-classification-with-resnet&quot;&gt;2. Image classification with ResNet&lt;&#x2F;h2&gt;
&lt;p&gt;From Microsoft Research comes this open source Image Recognition model, Residual Network (ResNet). In its basic form, it will try to classify a single dominant object in a picture. Derived models comes with more features, such as detecting multiple objects in a picture.&lt;&#x2F;p&gt;
&lt;p&gt;In this example, the &lt;a href=&quot;https:&#x2F;&#x2F;huggingface.co&#x2F;facebook&#x2F;detr-resnet-101&quot;&gt;facebook&#x2F;detr-rednet-101&lt;&#x2F;a&gt; model detects 3 objects, but gives two classifications for the car, either a truck or a car. It also successfully detects the two persons.&lt;&#x2F;p&gt;

    
    













    


&lt;div class=&quot;image-container center&quot;&gt;
    &lt;img
            alt=&quot;ResNet analysis of image with a car in the background, and an elderly woman with a young boy in the foreground.&quot;
            src=&quot;detr-resnet-101-01.png&quot;
            srcset=&quot;https:&amp;#x2F;&amp;#x2F;abjork.land&amp;#x2F;processed_images&amp;#x2F;detr-resnet-101-01.214ddd0349ebfa93.webp 240w,
                        https:&amp;#x2F;&amp;#x2F;abjork.land&amp;#x2F;processed_images&amp;#x2F;detr-resnet-101-01.df9afb0935c20081.webp 400w,
                        https:&amp;#x2F;&amp;#x2F;abjork.land&amp;#x2F;processed_images&amp;#x2F;detr-resnet-101-01.ddffdb40f9b567c5.webp 600w&quot;
            sizes=&quot;(max-width: 240px) 200px,
                        (max-width: 400px) 360px,
                        600px&quot;
    &#x2F;&gt;
    &lt;div class=&quot;image-subtext&quot;&gt;&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;The ResNet model was introduced by Microsoft Research in December 2015 with the paper &lt;a href=&quot;https:&#x2F;&#x2F;arxiv.org&#x2F;abs&#x2F;1512.03385&quot;&gt;Deep Residual Learning for Image Recognition&lt;&#x2F;a&gt;. The detection transformer (DETR) variant from Facebook AI was introduced in May 2020 with the paper &lt;a href=&quot;https:&#x2F;&#x2F;arxiv.org&#x2F;abs&#x2F;2005.12872&quot;&gt;End-to-End Object Detection with Transformers&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;3-voice-recognition-with-whisper&quot;&gt;3. Voice recognition with Whisper&lt;&#x2F;h2&gt;
&lt;p&gt;Automatic speech recognition is a task where a model is used to enable a program to process human speech into text. So in essence, it is a speech-to-text model. Whisper is a popular model from OpenAI. It can be used for transcribing recordings and real-time speech recognition tasks.&lt;&#x2F;p&gt;
&lt;p&gt;In this example I&#x27;m posing the model with an important query:
{{ imager_standard(
asset=&#x27;articles&#x2F;elixir&#x2F;opensource-models&#x2F;whisper-01.png&#x27;, 
alt=&#x27;Speech is transcribed to &amp;quot;Just because you can Fourier transform a cat doesn&#x27;t mean you should, but really you really should.&amp;quot;.&#x27;, 
class=&#x27;center&#x27;
) }}&lt;&#x2F;p&gt;
&lt;p&gt;Whisper was introduced in December 2022 in the paper &lt;a href=&quot;https:&#x2F;&#x2F;arxiv.org&#x2F;abs&#x2F;2212.04356&quot;&gt;Robust Speech Recognition via Large-Scale Weak Supervision&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;4-named-entity-recognition&quot;&gt;4. Named Entity Recognition&lt;&#x2F;h2&gt;
&lt;p&gt;A useful task in processing language is extracting tokens from text, such as recognizing if a location or a person is mentioned, or perhaps some grammatical features. BERT is often used for this as this model is good at taking the context into account, and if multilingual support is needed, XLM-RoBERTa can be applied. &lt;&#x2F;p&gt;
&lt;p&gt;In this example we are using a RoBERTa model trained on English to detect persons, location, and organization:&lt;&#x2F;p&gt;

    
    













    


&lt;div class=&quot;image-container center&quot;&gt;
    &lt;img
            alt=&quot;Prompt &amp;quot;Me and my friends Elaine and Karla live on Mêlée Island where we often frequent the Scumm Bar.&amp;quot;, highlighted are the words &amp;quot;Elain&amp;quot; and &amp;quot;Karla&amp;quot; which are marked with &amp;quot;PER&amp;quot;, &amp;quot;Mêlée Island&amp;quot; is marked with &amp;quot;LOC&amp;quot;, and &amp;quot;Scumm Bar&amp;quot; is marked with &amp;quot;ORG&amp;quot;.&quot;
            src=&quot;roberta-ner-task-02.png&quot;
            srcset=&quot;https:&amp;#x2F;&amp;#x2F;abjork.land&amp;#x2F;processed_images&amp;#x2F;roberta-ner-task-02.2b484fa896b4e713.webp 240w,
                        https:&amp;#x2F;&amp;#x2F;abjork.land&amp;#x2F;processed_images&amp;#x2F;roberta-ner-task-02.3ff1f4522a0c3cfb.webp 400w,
                        https:&amp;#x2F;&amp;#x2F;abjork.land&amp;#x2F;processed_images&amp;#x2F;roberta-ner-task-02.9dca47b121b5facd.webp 600w&quot;
            sizes=&quot;(max-width: 240px) 200px,
                        (max-width: 400px) 360px,
                        600px&quot;
    &#x2F;&gt;
    &lt;div class=&quot;image-subtext&quot;&gt;&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;Read about the RoBERTa model, introduced in July 2019, from Facebook AI in the paper &lt;a href=&quot;https:&#x2F;&#x2F;arxiv.org&#x2F;abs&#x2F;1907.11692&quot;&gt;RoBERTa: A Robustly Optimized BERT Pretraining Approach&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;5-text-generation&quot;&gt;5. Text Generation&lt;&#x2F;h2&gt;
&lt;p&gt;This is one of the tasks that has lead to some AI-craze of late, especially when a Text Generation model is being used as a chat partner. &lt;strong&gt;ChatGPT&lt;&#x2F;strong&gt; based on GPT versions 3+ and &lt;strong&gt;BARD&lt;&#x2F;strong&gt; based on PaLM, are two examples of this. But neither is currently on an open source license. &lt;strong&gt;HuggingChat&lt;&#x2F;strong&gt; is closer to open-source, but it is based on a LLaMA derivate and so it has a different kind of license attached (not any of the common open-source licenses like Appache 2.0 or MIT). There are more specialized conversational models, like &lt;a href=&quot;https:&#x2F;&#x2F;huggingface.co&#x2F;facebook&#x2F;blenderbot-400M-distill&quot;&gt;facebook&#x2F;blenderbot&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;But if we want to take a look at a simpler text-generation task, without the conversational part, we can find many available models. &lt;a href=&quot;https:&#x2F;&#x2F;huggingface.co&#x2F;facebook&#x2F;blenderbot-400M-distill&quot;&gt;DistilGPT2&lt;&#x2F;a&gt; is a smaller variant of GPT version 2, an open-source model. Here it is in action, where we can see it generate one word at a time.&lt;&#x2F;p&gt;



&lt;video width=&quot;600&quot; height=&quot;337&quot; muted controls&gt;
    &lt;source src=&quot;https:&amp;#x2F;&amp;#x2F;abjork.land&amp;#x2F;articles&amp;#x2F;elixir&amp;#x2F;opensource-models&amp;#x2F;distilgpt2.webm&quot; type=&quot;video&amp;#x2F;webm&quot;&gt;
    
    Your browser does not support this video
&lt;&#x2F;video&gt;
&lt;p&gt;Read the paper behind GPT from OpenAI: &lt;a href=&quot;https:&#x2F;&#x2F;d4mucfpksywv.cloudfront.net&#x2F;better-language-models&#x2F;language_models_are_unsupervised_multitask_learners.pdf&quot;&gt;Language Models are Unsupervised Multitask Learners&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;An up-and-coming large language model, &lt;a href=&quot;https:&#x2F;&#x2F;huggingface.co&#x2F;blog&#x2F;falcon&quot;&gt;Falcon&lt;&#x2F;a&gt;, is another open-source model. Compared to the other alternatives here, this one is bigger and more resource-intensive. But work is being done to make it work on lighter commercial machines. &lt;&#x2F;p&gt;
&lt;h2 id=&quot;6-image-generation-with-stable-diffusion&quot;&gt;6. Image Generation with Stable Diffusion&lt;&#x2F;h2&gt;
&lt;p&gt;Stable Diffusion is a text-to-image diffusion model from Stability AI. Released in &lt;a href=&quot;https:&#x2F;&#x2F;stability.ai&#x2F;blog&#x2F;stable-diffusion-public-release&quot;&gt;August 2022&lt;&#x2F;a&gt; it is an open-sourced licensed model that in short &amp;quot;&lt;a href=&quot;https:&#x2F;&#x2F;huggingface.co&#x2F;spaces&#x2F;CompVis&#x2F;stable-diffusion-license&quot;&gt;strives for both the open and responsible downstream use of the accompanying model&lt;&#x2F;a&gt;&amp;quot;. &lt;&#x2F;p&gt;



&lt;video width=&quot;600&quot; height=&quot;337&quot; muted controls&gt;
    &lt;source src=&quot;https:&amp;#x2F;&amp;#x2F;abjork.land&amp;#x2F;articles&amp;#x2F;elixir&amp;#x2F;opensource-models&amp;#x2F;diffusers_showcase.webm&quot; type=&quot;video&amp;#x2F;webm&quot;&gt;
    
    Your browser does not support this video
&lt;&#x2F;video&gt;
&lt;p&gt;Hugging Face has released a native application for Mac: &lt;a href=&quot;https:&#x2F;&#x2F;apps.apple.com&#x2F;se&#x2F;app&#x2F;diffusers&#x2F;id1666309574?l=en&amp;amp;mt=12&quot;&gt;Diffusers&lt;&#x2F;a&gt;. Showcased above, we can choose one of the available versions, write a prompt, and number of steps (the higher the steps, in general, the higher the quality).&lt;&#x2F;p&gt;
&lt;p&gt;A paid service to use the different versions of Stable Diffusion do also exist. Stability AI offers &lt;a href=&quot;https:&#x2F;&#x2F;dreamstudio.ai&#x2F;&quot;&gt;DreamStudio&lt;&#x2F;a&gt;, where we can generate images right in the browser.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;bubbler-text-summarization&quot;&gt;Bubbler: Text Summarization&lt;&#x2F;h2&gt;
&lt;p&gt;There are models that have trained on texts that have been distorted and the models then should be able to recreate the text in its original form. This way of training has led to models like BART being well suited to tasks where they should distil a body of text in to smaller segments in a way where it does not lose too much information. &lt;&#x2F;p&gt;
&lt;p&gt;An example of this is &lt;a href=&quot;https:&#x2F;&#x2F;huggingface.co&#x2F;facebook&#x2F;bart-large-cnn&quot;&gt;facebook&#x2F;bart-large-cnn&lt;&#x2F;a&gt;, which is a BART model that has been trained on CNN Daily Mail. When summarizing the very first paragraph of Charles Dickens&#x27;s &amp;quot;A Tale of Two Cities&amp;quot; we get:&lt;&#x2F;p&gt;


    


&lt;div class=&quot;quote &quot;&gt;
    &lt;cite&gt;
        &lt;p&gt;&amp;quot;It was the best of times, it was the worst of times,&amp;quot; he says. &amp;quot;We were all going direct to Heaven, we were all going direct the other way&amp;quot;. &amp;quot;We had everything before us, we had nothing before us,&amp;quot; he adds. &amp;quot;The spring of hope&amp;quot; was the winter of despair.&lt;&#x2F;p&gt;

    &lt;&#x2F;cite&gt;
    
&lt;&#x2F;div&gt;









    
        
        
    
    

    
    
    
    
    &lt;div class=&quot;image-container center&quot;&gt;
        &lt;img
                alt=&quot;A white cat with sunglasses on sitting on top of a stair going towards the sky above a cityscape&quot;
                src=&quot;cat-to-heaven.png&quot;
                srcset=&quot;https:&amp;#x2F;&amp;#x2F;abjork.land&amp;#x2F;processed_images&amp;#x2F;cat-to-heaven.f2196dedeb4f8a90.webp 240w,
                            https:&amp;#x2F;&amp;#x2F;abjork.land&amp;#x2F;processed_images&amp;#x2F;cat-to-heaven.92461352a7ca497a.webp 400w,
                            https:&amp;#x2F;&amp;#x2F;abjork.land&amp;#x2F;processed_images&amp;#x2F;cat-to-heaven.24030264b63c9c62.webp 600w&quot;
                sizes=&quot;(max-width: 240px) 200px,
                            (max-width: 400px) 360px,
                            600px&quot;
        &#x2F;&gt;
        &lt;div class=&quot;image-subtext&quot;&gt;User generated image using SDXL Beta&lt;&#x2F;div&gt;
    &lt;&#x2F;div&gt;


&lt;h2 id=&quot;bubbler-q-a&quot;&gt;Bubbler: Q&#x2F;A&lt;&#x2F;h2&gt;
&lt;p&gt;Question and Answer is a task well suited for models that take context of words into account. The BERT-family of models are often used here. In general, there are in general three types of Q&#x2F;A models: extractive, open-generative, and closed-generative. Extractive models can &lt;em&gt;extract&lt;&#x2F;em&gt; the answer from the provided context (be it text, table, or markup). Open-generative models glean the answer from the context and generate free text as an answer. Closed-generative models do not need a provided context. They are trained within a domain and the answer is purely generated by the model.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;extractive-model-example&quot;&gt;Extractive model example&lt;&#x2F;h3&gt;
&lt;p&gt;With the &lt;a href=&quot;https:&#x2F;&#x2F;huggingface.co&#x2F;distilbert-base-cased-distilled-squad?context=Quantum+machine+learning+is+the+integration+of+quantum+algorithms+within+machine+learning+programs.+The+most+common+use+of+the+term+refers+to+machine+learning+algorithms+for+the+analysis+of+classical+data+executed+on+a+quantum+computer%2C+i.e.+quantum-enhanced+machine+learning.+While+machine+learning+algorithms+are+used+to+compute+immense+quantities+of+data%2C+quantum+machine+learning+utilizes+qubits+and+quantum+operations+or+specialized+quantum+systems+to+improve+computational+speed+and+data+storage+done+by+algorithms+in+a+program.&amp;amp;question=What+is+an+advantage+of+using+quantum+machine+learning%3F&quot;&gt;DistilBERT&lt;&#x2F;a&gt; model, we can see how it finds the sentence that best can answer the question and extract it from the provided context:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Context&lt;&#x2F;strong&gt;:&lt;br &#x2F;&gt;
&lt;code&gt;Quantum machine learning is the integration of quantum algorithms within machine learning programs. The most common use of the term refers to machine learning algorithms for the analysis of classical data executed on a quantum computer, i.e. quantum-enhanced machine learning. While machine learning algorithms are used to compute immense quantities of data, quantum machine learning utilizes qubits and quantum operations or specialized quantum systems to improve computational speed and data storage done by algorithms in a program.&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Question&lt;&#x2F;strong&gt;:&lt;br &#x2F;&gt;
What is an advantage of using quantum machine learning?&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Answer&lt;&#x2F;strong&gt;:&lt;br &#x2F;&gt;
&lt;code&gt;improve computational speed and data storage&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;There are also contexts that can be in table-format. The &lt;a href=&quot;https:&#x2F;&#x2F;huggingface.co&#x2F;google&#x2F;tapas-base-finetuned-wtq&quot;&gt;Google&#x2F;TAPAS&lt;&#x2F;a&gt; model is used in this example to find the correct answer from a table-cell:&lt;&#x2F;p&gt;

    
    













    


&lt;div class=&quot;image-container center&quot;&gt;
    &lt;img
            alt=&quot;Prompt: &amp;quot;How many stars does the transformers repository have?&amp;quot;. 1 match :
36542&quot;
            src=&quot;tapas-01.png&quot;
            srcset=&quot;https:&amp;#x2F;&amp;#x2F;abjork.land&amp;#x2F;processed_images&amp;#x2F;tapas-01.fe3a2c50da6520a3.webp 240w,
                        https:&amp;#x2F;&amp;#x2F;abjork.land&amp;#x2F;processed_images&amp;#x2F;tapas-01.bbf8dfa41752571b.webp 400w,
                        https:&amp;#x2F;&amp;#x2F;abjork.land&amp;#x2F;processed_images&amp;#x2F;tapas-01.fa732d767b2fdff2.webp 600w&quot;
            sizes=&quot;(max-width: 240px) 200px,
                        (max-width: 400px) 360px,
                        600px&quot;
    &#x2F;&gt;
    &lt;div class=&quot;image-subtext&quot;&gt;&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;TAPAS is a BERT-like model trained on English Wikipedia articles. It trained in a  self-supervised way where it learned to associate texts with tables, as well as learned numerical reasoning. Read more about the model in its accompanying paper from 2020 by Google Research: &lt;a href=&quot;https:&#x2F;&#x2F;arxiv.org&#x2F;abs&#x2F;2004.02349&quot;&gt;TAPAS: Weakly Supervised Table Parsing via Pre-training&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;open-generative-model-example&quot;&gt;Open-generative model example&lt;&#x2F;h3&gt;
&lt;p&gt;An open-generative model will rely on contexts to freely generate answers. The context is sometimes a database of documents, as is the case for &lt;a href=&quot;https:&#x2F;&#x2F;huggingface.co&#x2F;spaces&#x2F;deepset&#x2F;wikipedia-assistant&quot;&gt;Wikipedia Assistant&lt;&#x2F;a&gt;. It provides a Long-Form Question Answering that can encode the question to fetch relevant documents (context) and a BART model that can parse the provided context to generate an answer.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Question&lt;&#x2F;strong&gt;:&lt;br &#x2F;&gt;
What is an advantage of using quantum machine learning?&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Answer&lt;&#x2F;strong&gt;&lt;br &#x2F;&gt;
&lt;code&gt;Quantum machine learning is an area of research that is still very much in its infancy. The most common use of the term refers to machine learning algorithms for the analysis of classical data executed on a quantum computer, i.e. &amp;quot;quantum-enhanced machine learning&amp;quot; (QML). The main advantage of QML is that it can be applied to a large number of data sets at once. For example, if you have a large set of data, and you want to learn how to classify it, you can use QML to do this. However, the problem is that QML can&#x27;t be used to solve all of the data sets in the same way that a classical machine learning algorithm can. For instance, you might want to use a QML algorithm to solve the problem of how to categorize a large collection of images, but you can&#x27;t use a classical algorithm to do the same thing with the same number of images. So, you need to use quantum machine learning to solve this problem. Another advantage is that you don&#x27;t have to worry about the fact that the data set you&#x27;re trying to classify is quantum.&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;details&gt;
    &lt;summary&gt;&lt;b&gt;Found contexts:&lt;&#x2F;b&gt;&lt;&#x2F;summary&gt;
    &lt;pre data-lang=&quot;json&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-json &quot;&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span&gt;[
&lt;&#x2F;span&gt;&lt;span&gt;  {
&lt;&#x2F;span&gt;&lt;span&gt;    &quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;wikipedia_id&lt;&#x2F;span&gt;&lt;span&gt;&quot;: &quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;30303286&lt;&#x2F;span&gt;&lt;span&gt;&quot;,
&lt;&#x2F;span&gt;&lt;span&gt;    &quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;title&lt;&#x2F;span&gt;&lt;span&gt;&quot;: &quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Decoding Reality&lt;&#x2F;span&gt;&lt;span&gt;&quot;,
&lt;&#x2F;span&gt;&lt;span&gt;    &quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;text&lt;&#x2F;span&gt;&lt;span&gt;&quot;: &quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Quantum computers offer a search advantage over classical computers by searching many database elements at once as a result of quantum superpositions. A sufficiently advanced quantum computer would break current encryption methods by factorizing large numbers several orders of magnitude faster than any existing classical computer. Any computable problem may be expressed as a general quantum search algorithm although classical computers may have an advantage over quantum search when using more efficient tailored classical algorithms. The issue with quantum computers is that a measurement must be made to determine if the problem is solved which collapses the superposition. Vedral points out that unintentional interaction with the environment can be mitigated with redundancy, and this would be necessary if we were to scale up current quantum computers to achieve greater utility, i.e. to utilize 10 qubits have a 100 atom quantum system so that if one atom decoheres a consensus will still be held by the other 9 for the state of the same qubit.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&quot;,
&lt;&#x2F;span&gt;&lt;span&gt;    &quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;section&lt;&#x2F;span&gt;&lt;span&gt;&quot;: &quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Section::::Contents.:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\&quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Surfing the Waves: Hyper-Fast Computers&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\&quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&quot;,
&lt;&#x2F;span&gt;&lt;span&gt;    &quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;start_paragraph_id&lt;&#x2F;span&gt;&lt;span&gt;&quot;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;20&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;end_paragraph_id&lt;&#x2F;span&gt;&lt;span&gt;&quot;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;20&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;start_character&lt;&#x2F;span&gt;&lt;span&gt;&quot;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;end_character&lt;&#x2F;span&gt;&lt;span&gt;&quot;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1055&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;answer_similarity&lt;&#x2F;span&gt;&lt;span&gt;&quot;: &quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;0.82&lt;&#x2F;span&gt;&lt;span&gt;&quot;
&lt;&#x2F;span&gt;&lt;span&gt;  },
&lt;&#x2F;span&gt;&lt;span&gt;  {
&lt;&#x2F;span&gt;&lt;span&gt;    &quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;wikipedia_id&lt;&#x2F;span&gt;&lt;span&gt;&quot;: &quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;44108758&lt;&#x2F;span&gt;&lt;span&gt;&quot;,
&lt;&#x2F;span&gt;&lt;span&gt;    &quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;title&lt;&#x2F;span&gt;&lt;span&gt;&quot;: &quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Quantum machine learning&lt;&#x2F;span&gt;&lt;span&gt;&quot;,
&lt;&#x2F;span&gt;&lt;span&gt;    &quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;text&lt;&#x2F;span&gt;&lt;span&gt;&quot;: &quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Quantum machine learning is an emerging interdisciplinary research area at the intersection of quantum physics and machine learning. The most common use of the term refers to machine learning algorithms for the analysis of classical data executed on a quantum computer, i.e. &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\&quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;quantum-enhanced machine learning&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\&quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;. While machine learning algorithms are used to compute immense quantities of data, quantum machine learning increases such capabilities intelligently, by creating opportunities to conduct analysis on quantum states and systems. This includes hybrid methods that involve both classical and quantum processing, where computationally difficult subroutines are outsourced to a quantum device. These routines can be more complex in nature and executed faster with the assistance of quantum devices. Furthermore, quantum algorithms can be used to analyze quantum states instead of classical data. Beyond quantum computing, the term &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\&quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;quantum machine learning&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\&quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt; is often associated with classical machine learning methods applied to data generated from quantum experiments (i.e. &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\&quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;machine learning of quantum systems&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\&quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;), such as learning quantum phase transitions or creating new quantum experiments. Quantum machine learning also extends to a branch of research that explores methodological and structural similarities between certain physical systems and learning systems, in particular neural networks. For example, some mathematical and numerical techniques from quantum physics are applicable to classical deep learning and vice versa. Finally, researchers investigate more abstract notions of learning theory with respect to quantum information, sometimes referred to as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\&quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;quantum learning theory&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\&quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&quot;,
&lt;&#x2F;span&gt;&lt;span&gt;    &quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;section&lt;&#x2F;span&gt;&lt;span&gt;&quot;: &quot;&quot;,
&lt;&#x2F;span&gt;&lt;span&gt;    &quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;start_paragraph_id&lt;&#x2F;span&gt;&lt;span&gt;&quot;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;end_paragraph_id&lt;&#x2F;span&gt;&lt;span&gt;&quot;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;start_character&lt;&#x2F;span&gt;&lt;span&gt;&quot;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;end_character&lt;&#x2F;span&gt;&lt;span&gt;&quot;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1704&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;answer_similarity&lt;&#x2F;span&gt;&lt;span&gt;&quot;: &quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;0.70&lt;&#x2F;span&gt;&lt;span&gt;&quot;
&lt;&#x2F;span&gt;&lt;span&gt;  },
&lt;&#x2F;span&gt;&lt;span&gt;  {
&lt;&#x2F;span&gt;&lt;span&gt;    &quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;wikipedia_id&lt;&#x2F;span&gt;&lt;span&gt;&quot;: &quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;44108758&lt;&#x2F;span&gt;&lt;span&gt;&quot;,
&lt;&#x2F;span&gt;&lt;span&gt;    &quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;title&lt;&#x2F;span&gt;&lt;span&gt;&quot;: &quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Quantum machine learning&lt;&#x2F;span&gt;&lt;span&gt;&quot;,
&lt;&#x2F;span&gt;&lt;span&gt;    &quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;text&lt;&#x2F;span&gt;&lt;span&gt;&quot;: &quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Another approach to improving classical machine learning with quantum information processing uses amplitude amplification methods based on Grover&#x27;s search algorithm, which has been shown to solve unstructured search problems with a quadratic speedup compared to classical algorithms. These quantum routines can be employed for learning algorithms that translate into an unstructured search task, as can be done, for instance, in the case of the k-medians and the k-nearest neighbors algorithms. Another application is a quadratic speedup in the training of perceptron.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&quot;,
&lt;&#x2F;span&gt;&lt;span&gt;    &quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;section&lt;&#x2F;span&gt;&lt;span&gt;&quot;: &quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Section::::Machine learning with quantum computers.:Quantum machine learning algorithms based on Grover search.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&quot;,
&lt;&#x2F;span&gt;&lt;span&gt;    &quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;start_paragraph_id&lt;&#x2F;span&gt;&lt;span&gt;&quot;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;end_paragraph_id&lt;&#x2F;span&gt;&lt;span&gt;&quot;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;start_character&lt;&#x2F;span&gt;&lt;span&gt;&quot;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;end_character&lt;&#x2F;span&gt;&lt;span&gt;&quot;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;569&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;answer_similarity&lt;&#x2F;span&gt;&lt;span&gt;&quot;: &quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;0.70&lt;&#x2F;span&gt;&lt;span&gt;&quot;
&lt;&#x2F;span&gt;&lt;span&gt;  },
&lt;&#x2F;span&gt;&lt;span&gt;  {
&lt;&#x2F;span&gt;&lt;span&gt;    &quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;wikipedia_id&lt;&#x2F;span&gt;&lt;span&gt;&quot;: &quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;44108758&lt;&#x2F;span&gt;&lt;span&gt;&quot;,
&lt;&#x2F;span&gt;&lt;span&gt;    &quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;title&lt;&#x2F;span&gt;&lt;span&gt;&quot;: &quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Quantum machine learning&lt;&#x2F;span&gt;&lt;span&gt;&quot;,
&lt;&#x2F;span&gt;&lt;span&gt;    &quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;text&lt;&#x2F;span&gt;&lt;span&gt;&quot;: &quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Quantum-enhanced machine learning refers to quantum algorithms that solve tasks in machine learning, thereby improving and often expediting classical machine learning techniques. Such algorithms typically require one to encode the given classical data set into a quantum computer to make it accessible for quantum information processing. Subsequently, quantum information processing routines are applied and the result of the quantum computation is read out by measuring the quantum system. For example, the outcome of the measurement of a qubit reveals the result of a binary classification task. While many proposals of quantum machine learning algorithms are still purely theoretical and require a full-scale universal quantum computer to be tested, others have been implemented on small-scale or special purpose quantum devices.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&quot;,
&lt;&#x2F;span&gt;&lt;span&gt;    &quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;section&lt;&#x2F;span&gt;&lt;span&gt;&quot;: &quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Section::::Machine learning with quantum computers.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&quot;,
&lt;&#x2F;span&gt;&lt;span&gt;    &quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;start_paragraph_id&lt;&#x2F;span&gt;&lt;span&gt;&quot;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;end_paragraph_id&lt;&#x2F;span&gt;&lt;span&gt;&quot;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;start_character&lt;&#x2F;span&gt;&lt;span&gt;&quot;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;end_character&lt;&#x2F;span&gt;&lt;span&gt;&quot;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;833&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;answer_similarity&lt;&#x2F;span&gt;&lt;span&gt;&quot;: &quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;0.64&lt;&#x2F;span&gt;&lt;span&gt;&quot;
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;details&gt;
&lt;&#x2F;blockquote&gt;  
&lt;p&gt;Read about Long-Form Question Answering in this article from February 2022 by Vladimir Blagojevic: &lt;a href=&quot;https:&#x2F;&#x2F;towardsdatascience.com&#x2F;long-form-qa-beyond-eli5-an-updated-dataset-and-approach-319cb841aabb&quot;&gt;Long-Form QA beyond ELI5: an updated dataset and approach&lt;&#x2F;a&gt; &lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;If you are intrigued by Quantum Machine Learning (QML), there&#x27;s a course from IBM for self-learners: &lt;a href=&quot;https:&#x2F;&#x2F;learn.qiskit.org&#x2F;course&#x2F;machine-learning&quot;&gt;Quantum Machine Learning&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h3 id=&quot;closed-generative-model-example&quot;&gt;Closed-generative model example&lt;&#x2F;h3&gt;
&lt;p&gt;From OpenAssistant comes the supervised-fine-tuning model: &lt;a href=&quot;https:&#x2F;&#x2F;huggingface.co&#x2F;OpenAssistant&#x2F;oasst-sft-4-pythia-12b-epoch-3.5?text=%3C%7Cprompter%7C%3EWhat+is+a+meme%2C+and+what%27s+the+history+behind+this+word%3F%3C%7Cendoftext%7C%3E%3C%7Cassistant%7C%3EA+meme+is+a+cultural+idea%2C+behavior%2C+or+style+that+spreads+from+person+to+person+within+a+culture.+It+is+often+used+to+describe+a+unit+of+cultural+information+that+is+passed+from+one+individual+to+another.+The+word+%22meme%22+was+first+used+in+the+1960s+to+describe+a+type+of&quot;&gt;Open-Assistant SFT-4 12B&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Question&lt;&#x2F;strong&gt;:&lt;br &#x2F;&gt;
What is a meme, and what&#x27;s the history behind this word?&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Answer&lt;&#x2F;strong&gt;&lt;br &#x2F;&gt;
&lt;code&gt;A meme is a cultural idea, behavior, or style that spreads from person to person within a culture. It is often used to describe a unit of cultural information that is passed from one individual to another. The word &amp;quot;meme&amp;quot; was first used in the 1960s to describe a type of cultural unit that was similar to a gene in that it could be passed from one individual to another.&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h2 id=&quot;in-closing&quot;&gt;In closing&lt;&#x2F;h2&gt;
&lt;p&gt;We have seen many different ML tasks - and that different models are seemed to be used for different tasks. BERT and BART are models that looks to be used in similar contexts, but whereas BERT seem better suited for taking apart a sentence, BART seem better at distilling meaning from a larger body of text into a summarized body, and for text generation. We have also seen models for making sense of images (ResNet), voice recognition (Whisper), and image generation (Stable Diffusion). &lt;&#x2F;p&gt;
&lt;p&gt;We have given a quick overview over some of the most exciting models and how they are used. But there are a tonne more out there to discover. And to use. You can start exploring by heading over to &lt;a href=&quot;https:&#x2F;&#x2F;huggingface.co&#x2F;&quot;&gt;huggingface.co&lt;&#x2F;a&gt; and take some models for a spin, right on their site.&lt;&#x2F;p&gt;










    
        
        
    
    

    
    
    
    
    &lt;div class=&quot;image-container center&quot;&gt;
        &lt;img
                alt=&quot;yellow smiley face with its arms hugging itself. The background is other-wordly.&quot;
                src=&quot;yellow-smiley-spaced.png&quot;
                srcset=&quot;https:&amp;#x2F;&amp;#x2F;abjork.land&amp;#x2F;processed_images&amp;#x2F;yellow-smiley-spaced.8c24e2c56ae0d355.webp 240w,
                            https:&amp;#x2F;&amp;#x2F;abjork.land&amp;#x2F;processed_images&amp;#x2F;yellow-smiley-spaced.344ead4b74d0c453.webp 400w,
                            https:&amp;#x2F;&amp;#x2F;abjork.land&amp;#x2F;processed_images&amp;#x2F;yellow-smiley-spaced.7f6db5f40092b6cf.webp 600w&quot;
                sizes=&quot;(max-width: 240px) 200px,
                            (max-width: 400px) 360px,
                            600px&quot;
        &#x2F;&gt;
        &lt;div class=&quot;image-subtext&quot;&gt;User generated image using SDXL Beta&lt;&#x2F;div&gt;
    &lt;&#x2F;div&gt;


</content>
    </entry>
    <entry xml:lang="en">
        <title>Laugh Out Loud with LiveView</title>
        <published>2023-05-23T00:00:00+00:00</published>
        <updated>2024-03-28T00:00:00+00:00</updated>
        <author>
          <name>Anders Björkland</name>
        </author>
        <link rel="alternate" href="https://abjork.land/articles/elixir/liveview-and-broadcast/" type="text/html"/>
        <id>https://abjork.land/articles/elixir/liveview-and-broadcast/</id>
        <content type="html">&lt;div class=&quot;article-header&quot;&gt;
    










&lt;img
        alt=&quot;133&quot;
        src=&quot;https:&amp;#x2F;&amp;#x2F;abjork.land&amp;#x2F;processed_images&amp;#x2F;hero-slim.d5028e6999dc9a93.png&quot;
        srcset=&quot;https:&amp;#x2F;&amp;#x2F;abjork.land&amp;#x2F;processed_images&amp;#x2F;hero-slim.0ab0f6b973ee2f65.png 240w,
                    https:&amp;#x2F;&amp;#x2F;abjork.land&amp;#x2F;processed_images&amp;#x2F;hero-slim.d5028e6999dc9a93.png 400w,
                    https:&amp;#x2F;&amp;#x2F;abjork.land&amp;#x2F;processed_images&amp;#x2F;hero-slim.b800d87aa8abdc4a.png 600w&quot;
        sizes=&quot;(max-width: 240px) 200px,
                    (max-width: 400px) 360px,
                    600px&quot;
&#x2F;&gt;


    &lt;div class=&quot;text-content&quot;&gt;
        &lt;h1 class=&quot;article-title&quot;&gt;
            &lt;div class=&quot;title&quot;&gt;Laugh Out Loud with LiveView&lt;&#x2F;div&gt;
            
        &lt;&#x2F;h1&gt;
    &lt;&#x2F;div&gt;
    

 

 

&lt;div class=&quot;tag-list absolute&quot;&gt;
    
        
        &lt;div&gt;&lt;a href=&quot;https:&#x2F;&#x2F;abjork.land&#x2F;tags&#x2F;elixir&#x2F;&quot; class=&quot;hover-bold&quot;&gt;elixir&lt;&#x2F;a&gt;&lt;&#x2F;div&gt;
        
        &lt;div&gt;&lt;a href=&quot;https:&#x2F;&#x2F;abjork.land&#x2F;tags&#x2F;phoenix&#x2F;&quot; class=&quot;hover-bold&quot;&gt;phoenix&lt;&#x2F;a&gt;&lt;&#x2F;div&gt;
        
        &lt;div&gt;&lt;a href=&quot;https:&#x2F;&#x2F;abjork.land&#x2F;tags&#x2F;liveview&#x2F;&quot; class=&quot;hover-bold&quot;&gt;liveview&lt;&#x2F;a&gt;&lt;&#x2F;div&gt;
        
        &lt;div&gt;&lt;a href=&quot;https:&#x2F;&#x2F;abjork.land&#x2F;tags&#x2F;pubsub&#x2F;&quot; class=&quot;hover-bold&quot;&gt;PubSub&lt;&#x2F;a&gt;&lt;&#x2F;div&gt;
        
    
&lt;&#x2F;div&gt;



&lt;&#x2F;div&gt;
&lt;p&gt;Are you ready to take your website to the next level? Phoenix LiveView is here to help! In this article, we’ll show you how to create a website that’s not only interactive but also hilarious. Visitors will be able to make their mark by showing their taste in humor, and see how their taste align with others´. It’s the perfect way to engage your audience and keep them coming back for more. All powered by LiveView for instant updates, and the Publish-Subscribe pattern to broadcast updates to all the other visitors.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;where-we-begin&quot;&gt;Where we begin&lt;&#x2F;h2&gt;
&lt;p&gt;In an earlier article we saw how to create a simple API with Phoenix. It was our &lt;a href=&quot;&#x2F;articles&#x2F;exploration&#x2F;discovering-phoenix&#x2F;&quot;&gt;Jokes API&lt;&#x2F;a&gt;. In today&#x27;s article we will switch it up. We will build upon same schema of jokes, but we will introduce LiveView and PubSub. You can go back to the article if you want to see how to easily set up a project and build schemas with some excellent &lt;code&gt;mix&lt;&#x2F;code&gt; build-tools.&lt;&#x2F;p&gt;
&lt;p&gt;While we are on the same page, and so we don&#x27;t get hard to understand errors when following this tutorial, check which versions of these you are using. In this article we will be using following major tech:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;Elixir 1.14&lt;&#x2F;code&gt;&lt;br &#x2F;&gt;
&lt;code&gt;Docker Compose 2.17&lt;&#x2F;code&gt;
&lt;code&gt;Phoenix 1.7&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;create-the-jokers-project&quot;&gt;Create the &#x27;Jokers&#x27; project&lt;&#x2F;h3&gt;
&lt;p&gt;It starts with a command: &lt;code&gt;mix phx.new Jokers&lt;&#x2F;code&gt;. &lt;&#x2F;p&gt;
&lt;p&gt;Then we will add a PostgreSQL Docker container to manage our database.
&lt;code&gt;.&#x2F;docker-compose.yaml&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;yaml&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-yaml &quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;version&lt;&#x2F;span&gt;&lt;span&gt;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;3.4&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;services&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;db&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;image&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;postgres
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;environment&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;POSTGRES_USER&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;postgres
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;POSTGRES_PASSWORD&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;postgres
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ports&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;      - &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;5432:5432&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;volumes&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;      - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;pgdb:&#x2F;var&#x2F;lib&#x2F;postgresql&#x2F;data
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;volumes&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;pgdb&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Get the database up and the Phoenix server:
&lt;code&gt;docker-compose up -d&lt;&#x2F;code&gt;&lt;br &#x2F;&gt;
&lt;code&gt;mix ecto.create&lt;&#x2F;code&gt; 
&lt;code&gt;mix phx.server&lt;&#x2F;code&gt; &lt;&#x2F;p&gt;
&lt;p&gt;When we go to &lt;code&gt;localhost:4000&lt;&#x2F;code&gt; we will see the default Phoenix landing-page. We will switch most of this out for a simple jokes list with like&#x2F;dislike buttons later on.







    



    
        
        
    
    

    
    
    
    
    &lt;div class=&quot;image-container center&quot;&gt;
        &lt;img
                alt=&quot;The landing page with default Phoenix Framework splash screen&quot;
                src=&quot;start-screen.png&quot;
                srcset=&quot;https:&amp;#x2F;&amp;#x2F;abjork.land&amp;#x2F;processed_images&amp;#x2F;start-screen.a775324fdbb76412.webp 240w,
                            https:&amp;#x2F;&amp;#x2F;abjork.land&amp;#x2F;processed_images&amp;#x2F;start-screen.0b0a92bbcf19c7db.webp 400w,
                            https:&amp;#x2F;&amp;#x2F;abjork.land&amp;#x2F;processed_images&amp;#x2F;start-screen.a60b49ef0aae4274.webp 600w&quot;
                sizes=&quot;(max-width: 240px) 200px,
                            (max-width: 400px) 360px,
                            600px&quot;
        &#x2F;&gt;
        &lt;div class=&quot;image-subtext&quot;&gt;&lt;&#x2F;div&gt;
    &lt;&#x2F;div&gt;


&lt;&#x2F;p&gt;
&lt;h3 id=&quot;and-add-jokes-schema&quot;&gt;And add Jokes schema&lt;&#x2F;h3&gt;
&lt;p&gt;You will recognize the schema from an earlier article on Phoenix. We create it by running the following commands in a terminal:&lt;br &#x2F;&gt;
&lt;code&gt;mix phx.gen.json Jokes Joke jokes text:text likes:integer dislikes:integer&lt;&#x2F;code&gt;&lt;br &#x2F;&gt;
&lt;code&gt;mix ecto.migrate&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;and-add-api-routes&quot;&gt;And add API-routes&lt;&#x2F;h3&gt;
&lt;p&gt;We will use the API to add new Jokes for our application. This is also a repetition of earlier article, but as it is with repetition: it makes the love grow fonder. (Or is that distance?)&lt;&#x2F;p&gt;
&lt;p&gt;We will add the API-routes by adding the following to the module in &lt;code&gt;.&#x2F;lib&#x2F;lean_jokers_web&#x2F;router.ex&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ex&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-ex &quot;&gt;&lt;code class=&quot;language-ex&quot; data-lang=&quot;ex&quot;&gt;&lt;span&gt;  scope &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;api&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;LeanJokersWeb &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;do
&lt;&#x2F;span&gt;&lt;span&gt;    pipe_through &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:api
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    resources &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;jokes&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;JokeController&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;except: &lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:new&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:edit&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:delete&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And we will update the Joke-schema to default &lt;code&gt;likes&lt;&#x2F;code&gt; and &lt;code&gt;dislikes&lt;&#x2F;code&gt; to &lt;code&gt;0&lt;&#x2F;code&gt;:
In &lt;code&gt;.&#x2F;lib&#x2F;lean_jokers&#x2F;jokes&#x2F;joke.ex&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ex&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-ex &quot;&gt;&lt;code class=&quot;language-ex&quot; data-lang=&quot;ex&quot;&gt;&lt;span&gt;  schema &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;jokes&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;do
&lt;&#x2F;span&gt;&lt;span&gt;    field &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:dislikes&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:integer&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;default: 0
&lt;&#x2F;span&gt;&lt;span&gt;    field &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:likes&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:integer&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;default: 0
&lt;&#x2F;span&gt;&lt;span&gt;    field &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:text&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:string
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    timestamps()
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We are now ready to add a couple of classic bad-jokes (or absolutely-brilliant-jokes): &lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Why did the coffee file a police report? It got mugged.&lt;&#x2F;li&gt;
&lt;li&gt;Why don’t skeletons fight each other? They don’t have the guts.&lt;&#x2F;li&gt;
&lt;li&gt;There are 10 types of people in the world: those who understand binary, and those who don’t.&lt;&#x2F;li&gt;
&lt;li&gt;What do you call cheese that isn’t yours? Nacho cheese.&lt;&#x2F;li&gt;
&lt;li&gt;Why don’t scientists trust atoms? Because they make up everything. &lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Make a POST-request for each joke to the endpoint &lt;code&gt;http:&#x2F;&#x2F;localhost:4000&#x2F;api&#x2F;jokes&lt;&#x2F;code&gt; with the following JSON payload:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;json&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-json &quot;&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;joke&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: {
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;text&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Why did the coffee file a police report? It got mugged.&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;coming-alive&quot;&gt;Coming alive!&lt;&#x2F;h2&gt;
&lt;p&gt;Our next task is to show these jokes on our homepage. The recommended way to build with LiveView is to let all LiveView logic live in its own namespace under the web-paradigm. So lets add a &lt;code&gt;live&lt;&#x2F;code&gt; folder at &lt;code&gt;.&#x2F;lib&#x2F;lean_jokers_web&#x2F;&lt;&#x2F;code&gt; and create two new files in it: &lt;code&gt;home.ex&lt;&#x2F;code&gt; and &lt;code&gt;home.html.heex&lt;&#x2F;code&gt;. &lt;&#x2F;p&gt;
&lt;p&gt;The first file, &lt;code&gt;home.ex&lt;&#x2F;code&gt;, will contain our logic, while &lt;code&gt;home.html.heex&lt;&#x2F;code&gt; will contain our view. Let&#x27;s just see if we can get it all to run.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;.&#x2F;lib&#x2F;lean_jokers_web&#x2F;home.ex&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ex&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-ex &quot;&gt;&lt;code class=&quot;language-ex&quot; data-lang=&quot;ex&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;defmodule &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;LeanJokersWeb&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Live&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Home &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;do
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;LeanJokersWeb&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:live_view
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;mount&lt;&#x2F;span&gt;&lt;span&gt;(_params, _session, socket) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;do
&lt;&#x2F;span&gt;&lt;span&gt;    {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:ok&lt;&#x2F;span&gt;&lt;span&gt;, socket}
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;code&gt;.&#x2F;lib&#x2F;lean_jokers_web&#x2F;home.html.heex&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;heex&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-heex &quot;&gt;&lt;code class=&quot;language-heex&quot; data-lang=&quot;heex&quot;&gt;&lt;span&gt;&amp;lt;h1&amp;gt;Hello World&amp;lt;&#x2F;h1&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;code&gt;.&#x2F;lib&#x2F;lean_jokers_web&#x2F;router.ex&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ex&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-ex &quot;&gt;&lt;code class=&quot;language-ex&quot; data-lang=&quot;ex&quot;&gt;&lt;span&gt;  scope &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;LeanJokersWeb &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;do
&lt;&#x2F;span&gt;&lt;span&gt;    pipe_through &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:browser
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    live &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Live&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Home
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;When we now go to &lt;code&gt;localhost:4000&lt;&#x2F;code&gt; we should see a simple &lt;code&gt;Hello World&lt;&#x2F;code&gt;. If you do, we are ready to display some jokes. Head back to the &lt;code&gt;home.ex&lt;&#x2F;code&gt; file, and let&#x27;s use an Ecto repository to get our jokes, and assign them to the socket.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;.&#x2F;lib&#x2F;lean_jokers_web&#x2F;home.ex&lt;&#x2F;code&gt;: &lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ex&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-ex &quot;&gt;&lt;code class=&quot;language-ex&quot; data-lang=&quot;ex&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;defmodule &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;LeanJokersWeb&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Live&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Home &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;do
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;LeanJokersWeb&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:live_view
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;mount&lt;&#x2F;span&gt;&lt;span&gt;(_params, _session, socket) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;do
&lt;&#x2F;span&gt;&lt;span&gt;    jokes = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;LeanJokers&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Jokes&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Joke
&lt;&#x2F;span&gt;&lt;span&gt;      |&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;LeanJokers&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Repo&lt;&#x2F;span&gt;&lt;span&gt;.all()
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    socket = socket
&lt;&#x2F;span&gt;&lt;span&gt;      |&amp;gt; assign(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:jokes&lt;&#x2F;span&gt;&lt;span&gt;, jokes)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:ok&lt;&#x2F;span&gt;&lt;span&gt;, socket}
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Our next task is to access the jokes from the socket in our view.
&lt;code&gt;.&#x2F;lib&#x2F;lean_jokers_web&#x2F;home.html.heex&lt;&#x2F;code&gt;: &lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;heex&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-heex &quot;&gt;&lt;code class=&quot;language-heex&quot; data-lang=&quot;heex&quot;&gt;&lt;span&gt;&amp;lt;div class=&amp;quot;flex flex-col gap-4&amp;quot;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;%= for joke &amp;lt;- @jokes do %&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;div&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;lt;p&amp;gt;&amp;lt;%= joke.text %&amp;gt;&amp;lt;&#x2F;p&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;lt;div class=&amp;quot;flex gap-2&amp;quot;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;            &amp;lt;div&amp;gt;Likes: &amp;lt;%= joke.likes %&amp;gt;&amp;lt;&#x2F;div&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;            &amp;lt;div&amp;gt;Disikes: &amp;lt;%= joke.dislikes %&amp;gt;&amp;lt;&#x2F;div&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;lt;&#x2F;div&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&#x2F;div&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;% end %&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&#x2F;div&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Phoenix comes packed with TailwindCSS, so we are using some of its utility classes to list our jokes with gap in between them by the power of flex and flex-gap. We are then looping through the &lt;code&gt;jokes&lt;&#x2F;code&gt; variable that we fetch from &lt;code&gt;socket.assigns.jokes&lt;&#x2F;code&gt;. We are using its shorthand &lt;code&gt;@jokes&lt;&#x2F;code&gt; to get it. After saving the file we will have all the jokes displayed on our website, along with their likes and dislikes.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;add-interactivity&quot;&gt;Add interactivity&lt;&#x2F;h3&gt;
&lt;p&gt;Our Lean Jokes website is not very exciting at the moment, but it soon will be. We will be adding &lt;em&gt;buttons&lt;&#x2F;em&gt; to like or dislike a joke. By doing this we will update a joke and see it change in real-time! The difference between this and a simple incremented counter may not look like much, but all the changes occur on the server with updates to the database. Only the necessary data is exchanged between our frontend and backend. We will take a look at what happens in the network, but first we add the buttons to our view.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;.&#x2F;lib&#x2F;lean_jokers_web&#x2F;home.html.heex&lt;&#x2F;code&gt;: &lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;heex&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-heex &quot;&gt;&lt;code class=&quot;language-heex&quot; data-lang=&quot;heex&quot;&gt;&lt;span&gt;&amp;lt;div class=&amp;quot;flex flex-col gap-4&amp;quot;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;%= for joke &amp;lt;- @jokes do %&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;div&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;lt;p&amp;gt;&amp;lt;%= joke.text %&amp;gt;&amp;lt;&#x2F;p&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;lt;div class=&amp;quot;flex gap-2&amp;quot;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;            &amp;lt;div&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;                &amp;lt;button phx-click=&amp;quot;like_joke&amp;quot; phx-value-joke_id={joke.id}&amp;gt;Like&amp;lt;&#x2F;button&amp;gt; &amp;lt;%= joke.likes %&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;            &amp;lt;&#x2F;div&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;            &amp;lt;div&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;                &amp;lt;button phx-click=&amp;quot;dislike_joke&amp;quot; phx-value-joke_id={joke.id}&amp;gt;Dislike&amp;lt;&#x2F;button&amp;gt; &amp;lt;%= joke.dislikes %&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;            &amp;lt;&#x2F;div&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;lt;&#x2F;div&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&#x2F;div&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;% end %&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&#x2F;div&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Next up, we will want to add event-handlers for these buttons. We should handle &lt;code&gt;like_joke&lt;&#x2F;code&gt; and &lt;code&gt;dislike_joke&lt;&#x2F;code&gt;. The passed &lt;code&gt;joke.id&lt;&#x2F;code&gt; will be used to update the correct &lt;code&gt;joke&lt;&#x2F;code&gt;. With the power of pattern-matching, we will get the variable &lt;code&gt;joke_id&lt;&#x2F;code&gt; from the parameters that are passed along with the event. This will help us with two things. First, it will help us update the correct joke in the database. Second, it will help us insert the updated joke in the jokes-list and pass it back in the socket. &lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;.&#x2F;lib&#x2F;lean_jokers_web&#x2F;home.ex&lt;&#x2F;code&gt;: &lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ex&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-ex &quot;&gt;&lt;code class=&quot;language-ex&quot; data-lang=&quot;ex&quot;&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;handle_event&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;like_joke&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, %{&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;joke_id&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; =&amp;gt; joke_id} = _params, socket) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;do
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;    # Elixir cares about types, but the joke_id is a string here as it was a templated variable
&lt;&#x2F;span&gt;&lt;span&gt;    {joke_id, _} = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Integer&lt;&#x2F;span&gt;&lt;span&gt;.parse(joke_id)
&lt;&#x2F;span&gt;&lt;span&gt;    
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;    # Filter out the joke with the help of the id
&lt;&#x2F;span&gt;&lt;span&gt;    socket_jokes = socket.assigns.jokes
&lt;&#x2F;span&gt;&lt;span&gt;    [socket_joke | _rest ] = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Enum&lt;&#x2F;span&gt;&lt;span&gt;.filter(socket_jokes, &amp;amp;(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;.id == joke_id))
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;    # Increment the value and update the joke in the database
&lt;&#x2F;span&gt;&lt;span&gt;    {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:ok&lt;&#x2F;span&gt;&lt;span&gt;, joke} = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;LeanJokers&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Jokes&lt;&#x2F;span&gt;&lt;span&gt;.update_joke(socket_joke, %{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;likes:&lt;&#x2F;span&gt;&lt;span&gt; socket_joke.likes + &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span&gt;})
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;    # Replace the joke with our updated joke in the list 
&lt;&#x2F;span&gt;&lt;span&gt;    jokes =
&lt;&#x2F;span&gt;&lt;span&gt;      socket.assigns.jokes
&lt;&#x2F;span&gt;&lt;span&gt;        |&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Enum&lt;&#x2F;span&gt;&lt;span&gt;.map(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn
&lt;&#x2F;span&gt;&lt;span&gt;          %&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;LeanJokers&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Jokes&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Joke&lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;id: &lt;&#x2F;span&gt;&lt;span&gt;^&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;joke_id&lt;&#x2F;span&gt;&lt;span&gt;} -&amp;gt; joke
&lt;&#x2F;span&gt;&lt;span&gt;          element -&amp;gt; element
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;    # and add the list to the sockets assigns
&lt;&#x2F;span&gt;&lt;span&gt;    socket = socket
&lt;&#x2F;span&gt;&lt;span&gt;      |&amp;gt; assign(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:jokes&lt;&#x2F;span&gt;&lt;span&gt;, jokes)
&lt;&#x2F;span&gt;&lt;span&gt;    {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:noreply&lt;&#x2F;span&gt;&lt;span&gt;, socket}
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;handle_event&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;dislike_joke&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, %{&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;joke_id&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; =&amp;gt; joke_id} = _params, socket) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;do
&lt;&#x2F;span&gt;&lt;span&gt;    {joke_id, _} = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Integer&lt;&#x2F;span&gt;&lt;span&gt;.parse(joke_id)
&lt;&#x2F;span&gt;&lt;span&gt;    socket_jokes = socket.assigns.jokes
&lt;&#x2F;span&gt;&lt;span&gt;    [socket_joke | _rest ] = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Enum&lt;&#x2F;span&gt;&lt;span&gt;.filter(socket_jokes, &amp;amp;(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;.id == joke_id))
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:ok&lt;&#x2F;span&gt;&lt;span&gt;, joke} = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;LeanJokers&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Jokes&lt;&#x2F;span&gt;&lt;span&gt;.update_joke(socket_joke, %{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;dislikes:&lt;&#x2F;span&gt;&lt;span&gt; socket_joke.dislikes + &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span&gt;})
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    jokes =
&lt;&#x2F;span&gt;&lt;span&gt;      socket.assigns.jokes
&lt;&#x2F;span&gt;&lt;span&gt;        |&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Enum&lt;&#x2F;span&gt;&lt;span&gt;.map(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn
&lt;&#x2F;span&gt;&lt;span&gt;          %&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;LeanJokers&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Jokes&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Joke&lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;id: &lt;&#x2F;span&gt;&lt;span&gt;^&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;joke_id&lt;&#x2F;span&gt;&lt;span&gt;} -&amp;gt; joke
&lt;&#x2F;span&gt;&lt;span&gt;          element -&amp;gt; element
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    socket = socket
&lt;&#x2F;span&gt;&lt;span&gt;      |&amp;gt; assign(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:jokes&lt;&#x2F;span&gt;&lt;span&gt;, jokes)
&lt;&#x2F;span&gt;&lt;span&gt;    {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:noreply&lt;&#x2F;span&gt;&lt;span&gt;, socket}
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Back in the browser we will see that we can now update each joke and see likes and dislikes being updated in real time. &lt;&#x2F;p&gt;



&lt;video width=&quot;600&quot; height=&quot;337&quot; muted controls&gt;
    &lt;source src=&quot;https:&amp;#x2F;&amp;#x2F;abjork.land&amp;#x2F;articles&amp;#x2F;elixir&amp;#x2F;liveview-and-broadcast&amp;#x2F;liveview_1.webm&quot; type=&quot;video&amp;#x2F;webm&quot;&gt;
    
    Your browser does not support this video
&lt;&#x2F;video&gt;
&lt;p&gt;Let&#x27;s tighten this up so that a visitor can toggle their like or dislike, so no-more will they be able to like it 10 times over. We will also set so if a joke has been liked by the visitor, were they to change their mind to dislike, the like will be removed and a dislike added.&lt;&#x2F;p&gt;
&lt;p&gt;We will start by adding fields to the joker-struct to keep track of visitor&#x27;s like or dislike of a joke. This will not be stored in a database as it will be unique for each visitor. So we will add a &lt;code&gt;virtual&lt;&#x2F;code&gt; field for this. &lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;lib&#x2F;lean_jokers&#x2F;jokes&#x2F;joke.ex&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ex&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-ex &quot;&gt;&lt;code class=&quot;language-ex&quot; data-lang=&quot;ex&quot;&gt;&lt;span&gt;  schema &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;jokes&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;do
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;    # ...
&lt;&#x2F;span&gt;&lt;span&gt;    field &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:has_liked&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:boolean&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;virtual: true&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;default: false
&lt;&#x2F;span&gt;&lt;span&gt;    field &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:has_disliked&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:boolean&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;virtual: true&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;default: false
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;    # ...
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;With these fields we can add a toggle-logic for a joke&#x27;s likes and dislikes. &lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;lib&#x2F;lean_jokers_web&#x2F;live&#x2F;home.ex&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ex&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-ex &quot;&gt;&lt;code class=&quot;language-ex&quot; data-lang=&quot;ex&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;handle_event&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;like_joke&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, %{&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;joke_id&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; =&amp;gt; joke_id} = _params, socket) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;do
&lt;&#x2F;span&gt;&lt;span&gt;    {joke_id, _} = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Integer&lt;&#x2F;span&gt;&lt;span&gt;.parse(joke_id)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    socket_jokes = socket.assigns.jokes
&lt;&#x2F;span&gt;&lt;span&gt;    [socket_joke | _rest ] = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Enum&lt;&#x2F;span&gt;&lt;span&gt;.filter(socket_jokes, &amp;amp;(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;.id == joke_id))
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    toggled_joke = toggle_data(socket_joke, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:like&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:ok&lt;&#x2F;span&gt;&lt;span&gt;, _} =
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;LeanJokers&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Jokes&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Joke
&lt;&#x2F;span&gt;&lt;span&gt;        |&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;LeanJokers&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Repo&lt;&#x2F;span&gt;&lt;span&gt;.get(joke_id)
&lt;&#x2F;span&gt;&lt;span&gt;        |&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;LeanJokers&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Jokes&lt;&#x2F;span&gt;&lt;span&gt;.update_joke(%{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;likes:&lt;&#x2F;span&gt;&lt;span&gt; toggled_joke.likes, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;dislikes:&lt;&#x2F;span&gt;&lt;span&gt; toggled_joke.dislikes})
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    jokes =
&lt;&#x2F;span&gt;&lt;span&gt;      socket.assigns.jokes
&lt;&#x2F;span&gt;&lt;span&gt;        |&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Enum&lt;&#x2F;span&gt;&lt;span&gt;.map(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn
&lt;&#x2F;span&gt;&lt;span&gt;          %&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;LeanJokers&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Jokes&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Joke&lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;id: &lt;&#x2F;span&gt;&lt;span&gt;^&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;joke_id&lt;&#x2F;span&gt;&lt;span&gt;} -&amp;gt; toggled_joke
&lt;&#x2F;span&gt;&lt;span&gt;          element -&amp;gt; element
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:noreply&lt;&#x2F;span&gt;&lt;span&gt;, assign(socket, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:jokes&lt;&#x2F;span&gt;&lt;span&gt;, jokes)}
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;handle_event&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;dislike_joke&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, %{&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;joke_id&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; =&amp;gt; joke_id} = _params, socket) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;do
&lt;&#x2F;span&gt;&lt;span&gt;    {joke_id, _} = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Integer&lt;&#x2F;span&gt;&lt;span&gt;.parse(joke_id)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    socket_jokes = socket.assigns.jokes
&lt;&#x2F;span&gt;&lt;span&gt;    [socket_joke | _rest ] = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Enum&lt;&#x2F;span&gt;&lt;span&gt;.filter(socket_jokes, &amp;amp;(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;.id == joke_id))
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    toggled_joke = toggle_data(socket_joke, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:dislike&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:ok&lt;&#x2F;span&gt;&lt;span&gt;, _} =
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;LeanJokers&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Jokes&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Joke
&lt;&#x2F;span&gt;&lt;span&gt;        |&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;LeanJokers&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Repo&lt;&#x2F;span&gt;&lt;span&gt;.get(joke_id)
&lt;&#x2F;span&gt;&lt;span&gt;        |&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;LeanJokers&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Jokes&lt;&#x2F;span&gt;&lt;span&gt;.update_joke(%{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;likes:&lt;&#x2F;span&gt;&lt;span&gt; toggled_joke.likes, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;dislikes:&lt;&#x2F;span&gt;&lt;span&gt; toggled_joke.dislikes})
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    jokes =
&lt;&#x2F;span&gt;&lt;span&gt;      socket.assigns.jokes
&lt;&#x2F;span&gt;&lt;span&gt;        |&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Enum&lt;&#x2F;span&gt;&lt;span&gt;.map(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn
&lt;&#x2F;span&gt;&lt;span&gt;          %&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;LeanJokers&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Jokes&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Joke&lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;id: &lt;&#x2F;span&gt;&lt;span&gt;^&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;joke_id&lt;&#x2F;span&gt;&lt;span&gt;} -&amp;gt; toggled_joke
&lt;&#x2F;span&gt;&lt;span&gt;          element -&amp;gt; element
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:noreply&lt;&#x2F;span&gt;&lt;span&gt;, assign(socket, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:jokes&lt;&#x2F;span&gt;&lt;span&gt;, jokes)}
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;defp &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;toggle_data&lt;&#x2F;span&gt;&lt;span&gt;(%&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Jokes&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Joke&lt;&#x2F;span&gt;&lt;span&gt;{} = joke, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:like&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;do
&lt;&#x2F;span&gt;&lt;span&gt;    dislikes = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(joke.has_disliked) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;do
&lt;&#x2F;span&gt;&lt;span&gt;      joke.dislikes - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else
&lt;&#x2F;span&gt;&lt;span&gt;      joke.dislikes
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    likes = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(joke.has_liked) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;do
&lt;&#x2F;span&gt;&lt;span&gt;      joke.likes - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else
&lt;&#x2F;span&gt;&lt;span&gt;      joke.likes + &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    joke = %{joke | &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;has_liked: &lt;&#x2F;span&gt;&lt;span&gt;!joke.has_liked, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;likes:&lt;&#x2F;span&gt;&lt;span&gt; likes, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;dislikes:&lt;&#x2F;span&gt;&lt;span&gt; dislikes}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(joke.has_liked) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;do
&lt;&#x2F;span&gt;&lt;span&gt;        %{joke | &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;has_disliked: false&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else
&lt;&#x2F;span&gt;&lt;span&gt;      joke
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;defp &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;toggle_data&lt;&#x2F;span&gt;&lt;span&gt;(%&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Jokes&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Joke&lt;&#x2F;span&gt;&lt;span&gt;{} = joke, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:dislike&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;do
&lt;&#x2F;span&gt;&lt;span&gt;    dislikes = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(joke.has_disliked) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;do
&lt;&#x2F;span&gt;&lt;span&gt;      joke.dislikes - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else
&lt;&#x2F;span&gt;&lt;span&gt;      joke.dislikes + &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    likes = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(joke.has_liked) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;do
&lt;&#x2F;span&gt;&lt;span&gt;      joke.likes - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else
&lt;&#x2F;span&gt;&lt;span&gt;      joke.likes
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    joke = %{joke | &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;has_disliked: &lt;&#x2F;span&gt;&lt;span&gt;!joke.has_disliked, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;likes:&lt;&#x2F;span&gt;&lt;span&gt; likes, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;dislikes:&lt;&#x2F;span&gt;&lt;span&gt; dislikes}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(joke.has_disliked) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;do
&lt;&#x2F;span&gt;&lt;span&gt;        %{joke | &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;has_liked: false&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else
&lt;&#x2F;span&gt;&lt;span&gt;      joke
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;What is happening here? Well, we have toggled the data for jokes so that a user only can like or dislike a joke once. They will not be allowed to simultaneously like and dislike a joke. If a joke has been liked, disliking it will undo the like and increment the dislike one step.&lt;&#x2F;p&gt;





    







&lt;div class=&quot;image-text-overlay&quot;&gt;
    &lt;div class=&quot;image-text image-text--up&quot;&gt;&lt;&#x2F;div&gt;
    &lt;div class=&quot;image-text image-text--down&quot;&gt;I wanted both?!&lt;&#x2F;div&gt;
    &lt;div class=&quot;image-container &quot;&gt;
        &lt;img
                alt=&quot;&quot;
                src=&quot;articles&amp;#x2F;elixir&amp;#x2F;liveview_and_broadcast&amp;#x2F;flabbergasted.png&quot;
                srcset=&quot;https:&amp;#x2F;&amp;#x2F;abjork.land&amp;#x2F;processed_images&amp;#x2F;flabbergasted.6bbf4ef511b720a1.webp 240w,
                            https:&amp;#x2F;&amp;#x2F;abjork.land&amp;#x2F;processed_images&amp;#x2F;flabbergasted.d29dba911151c584.webp 400w,
                            https:&amp;#x2F;&amp;#x2F;abjork.land&amp;#x2F;processed_images&amp;#x2F;flabbergasted.38accbb27d11eb5d.webp 600w,
                            https:&amp;#x2F;&amp;#x2F;abjork.land&amp;#x2F;processed_images&amp;#x2F;flabbergasted.53c1aff61a9bb45e.webp 800w&quot;
                sizes=&quot;(max-width: 240px) 200px,
                            (max-width: 400px) 360px,
                            (max-width: 600px) 550px,
                            800px&quot;
        &#x2F;&gt;
    &lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;&lt;h2 id=&quot;make-it-broadcast&quot;&gt;Make it broadcast&lt;&#x2F;h2&gt;
&lt;p&gt;The visitor will get speedy update back from the server via web sockets. Other visitors will see the updated state of each joke when they first visit it. But they won&#x27;t see updates from other users happen while at the page. It&#x27;s time we send updates to all visitors as they occur. The &lt;a href=&quot;https:&#x2F;&#x2F;hexdocs.pm&#x2F;phoenix_pubsub&#x2F;Phoenix.PubSub.html&quot;&gt;PubSub library&lt;&#x2F;a&gt; will help us do that by sending messages via specified topics, and we will use it via &lt;code&gt;LeanJokersWeb.Endpoint.broadcast()&lt;&#x2F;code&gt; and handle the messages via &lt;code&gt;handle_info&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;We will subscribe to a topic which we will name &#x27;jokes&#x27;. When a visitor initiates an event we will broadcast the updated joke to other visitors. We will make sure that the other visitors&#x27; jokes will preserve their each toggled state.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;lib&#x2F;lean_jokers_web&#x2F;live&#x2F;home.ex&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ex&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-ex &quot;&gt;&lt;code class=&quot;language-ex&quot; data-lang=&quot;ex&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;defmodule &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;LeanJokersWeb&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Live&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Home &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;do
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;  # ...
&lt;&#x2F;span&gt;&lt;span&gt;  @&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;topic &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;jokes&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;mount&lt;&#x2F;span&gt;&lt;span&gt;(_params, _session, socket) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;do
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; connected?(socket) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;do
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;LeanJokersWeb&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Endpoint&lt;&#x2F;span&gt;&lt;span&gt;.subscribe(@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;topic&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;    # ...
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;handle_event&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;like_joke&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, %{&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;joke_id&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; =&amp;gt; joke_id} = _params, socket) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;do
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;    # ...
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    state = %{
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;joke:&lt;&#x2F;span&gt;&lt;span&gt; toggled_joke,
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;sender:&lt;&#x2F;span&gt;&lt;span&gt; self()
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;LeanJokersWeb&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Endpoint&lt;&#x2F;span&gt;&lt;span&gt;.broadcast(@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;topic&lt;&#x2F;span&gt;&lt;span&gt;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;update_joke&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, state)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:noreply&lt;&#x2F;span&gt;&lt;span&gt;, assign(socket, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:jokes&lt;&#x2F;span&gt;&lt;span&gt;, jokes)}
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;handle_event&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;dislike_joke&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, %{&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;joke_id&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; =&amp;gt; joke_id} = _params, socket) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;do
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;    # ...
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    state = %{
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;joke:&lt;&#x2F;span&gt;&lt;span&gt; toggled_joke,
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;sender:&lt;&#x2F;span&gt;&lt;span&gt; self()
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;LeanJokersWeb&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Endpoint&lt;&#x2F;span&gt;&lt;span&gt;.broadcast(@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;topic&lt;&#x2F;span&gt;&lt;span&gt;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;update_joke&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, state)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:noreply&lt;&#x2F;span&gt;&lt;span&gt;, assign(socket, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:jokes&lt;&#x2F;span&gt;&lt;span&gt;, jokes)}
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;defp &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;toggle_data&lt;&#x2F;span&gt;&lt;span&gt;(%&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Jokes&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Joke&lt;&#x2F;span&gt;&lt;span&gt;{} = joke, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:like&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;do
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;    # ...
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;defp &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;toggle_data&lt;&#x2F;span&gt;&lt;span&gt;(%&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Jokes&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Joke&lt;&#x2F;span&gt;&lt;span&gt;{} = joke, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:dislike&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;do
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;    # ...
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;handle_info&lt;&#x2F;span&gt;&lt;span&gt;(%{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;topic: &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;jokes&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;event: &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;update_joke&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;payload:&lt;&#x2F;span&gt;&lt;span&gt; %{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;joke:&lt;&#x2F;span&gt;&lt;span&gt; joke, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;sender:&lt;&#x2F;span&gt;&lt;span&gt; sender}}, socket) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;do
&lt;&#x2F;span&gt;&lt;span&gt;    jokes = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(sender == self()) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;do
&lt;&#x2F;span&gt;&lt;span&gt;      socket.assigns.jokes
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else
&lt;&#x2F;span&gt;&lt;span&gt;      [socket_joke | _rest ] = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Enum&lt;&#x2F;span&gt;&lt;span&gt;.filter(socket.assigns.jokes, &amp;amp;(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;.id == joke.id))
&lt;&#x2F;span&gt;&lt;span&gt;      joke = %{joke | &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;has_liked:&lt;&#x2F;span&gt;&lt;span&gt; socket_joke.has_liked, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;has_disliked:&lt;&#x2F;span&gt;&lt;span&gt; socket_joke.has_disliked }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;      joke_id = joke.id
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;      socket.assigns.jokes
&lt;&#x2F;span&gt;&lt;span&gt;        |&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Enum&lt;&#x2F;span&gt;&lt;span&gt;.map(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn
&lt;&#x2F;span&gt;&lt;span&gt;          %&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;LeanJokers&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Jokes&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Joke&lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;id: &lt;&#x2F;span&gt;&lt;span&gt;^&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;joke_id&lt;&#x2F;span&gt;&lt;span&gt;} -&amp;gt; joke
&lt;&#x2F;span&gt;&lt;span&gt;          element -&amp;gt; element
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:noreply&lt;&#x2F;span&gt;&lt;span&gt;, assign(socket, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;jokes:&lt;&#x2F;span&gt;&lt;span&gt; jokes)}
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;As we are broadcasting the updated joke-data, we will see how different visitors will get a live-update:&lt;&#x2F;p&gt;



&lt;video width=&quot;600&quot; height=&quot;337&quot; muted controls&gt;
    &lt;source src=&quot;https:&amp;#x2F;&amp;#x2F;abjork.land&amp;#x2F;articles&amp;#x2F;elixir&amp;#x2F;liveview-and-broadcast&amp;#x2F;pubsub.webm&quot; type=&quot;video&amp;#x2F;webm&quot;&gt;
    
    Your browser does not support this video
&lt;&#x2F;video&gt;
&lt;p&gt;And in closing...


    


&lt;div class=&quot;quote &quot;&gt;
    &lt;cite&gt;
        &lt;p&gt;Why did the programmer use pattern matching? &lt;em&gt;To match their socks!&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;

    &lt;&#x2F;cite&gt;
    
&lt;&#x2F;div&gt;







    



    
        
        
    
    

    
    
    
    
    &lt;div class=&quot;image-container center&quot;&gt;
        &lt;img
                alt=&quot;A kitten rendered in synthwave style with socks on its hindlegs. Smiling while sitting. The background is dark with stars.&quot;
                src=&quot;happy_socks.png&quot;
                srcset=&quot;https:&amp;#x2F;&amp;#x2F;abjork.land&amp;#x2F;processed_images&amp;#x2F;happy_socks.deee2baaac419ad5.webp 240w,
                            https:&amp;#x2F;&amp;#x2F;abjork.land&amp;#x2F;processed_images&amp;#x2F;happy_socks.b802bf35d93c9475.webp 400w,
                            https:&amp;#x2F;&amp;#x2F;abjork.land&amp;#x2F;processed_images&amp;#x2F;happy_socks.7dae254164b74d4e.webp 600w&quot;
                sizes=&quot;(max-width: 240px) 200px,
                            (max-width: 400px) 360px,
                            600px&quot;
        &#x2F;&gt;
        &lt;div class=&quot;image-subtext&quot;&gt;&lt;&#x2F;div&gt;
    &lt;&#x2F;div&gt;


&lt;&#x2F;p&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>Discovering Phoenix</title>
        <published>2023-04-15T00:00:00+00:00</published>
        <updated>2024-03-28T00:00:00+00:00</updated>
        <author>
          <name>Anders Björkland</name>
        </author>
        <link rel="alternate" href="https://abjork.land/articles/exploration/discovering-phoenix/" type="text/html"/>
        <id>https://abjork.land/articles/exploration/discovering-phoenix/</id>
        <content type="html">&lt;div class=&quot;article-header&quot;&gt;
    










&lt;img
        alt=&quot;133&quot;
        src=&quot;https:&amp;#x2F;&amp;#x2F;abjork.land&amp;#x2F;processed_images&amp;#x2F;hero-wide.0b8aa2c97336681a.png&quot;
        srcset=&quot;https:&amp;#x2F;&amp;#x2F;abjork.land&amp;#x2F;processed_images&amp;#x2F;hero-wide.b415cdb7fc5b5965.png 240w,
                    https:&amp;#x2F;&amp;#x2F;abjork.land&amp;#x2F;processed_images&amp;#x2F;hero-wide.0b8aa2c97336681a.png 400w,
                    https:&amp;#x2F;&amp;#x2F;abjork.land&amp;#x2F;processed_images&amp;#x2F;hero-wide.18771329b7d36c81.png 600w&quot;
        sizes=&quot;(max-width: 240px) 200px,
                    (max-width: 400px) 360px,
                    600px&quot;
&#x2F;&gt;


    &lt;div class=&quot;text-content&quot;&gt;
        &lt;h1 class=&quot;article-title&quot;&gt;
            &lt;div class=&quot;title&quot;&gt;Discovering Phoenix&lt;&#x2F;div&gt;
            
        &lt;&#x2F;h1&gt;
    &lt;&#x2F;div&gt;
    

 

 

&lt;div class=&quot;tag-list absolute&quot;&gt;
    
        
        &lt;div&gt;&lt;a href=&quot;https:&#x2F;&#x2F;abjork.land&#x2F;tags&#x2F;elixir&#x2F;&quot; class=&quot;hover-bold&quot;&gt;elixir&lt;&#x2F;a&gt;&lt;&#x2F;div&gt;
        
        &lt;div&gt;&lt;a href=&quot;https:&#x2F;&#x2F;abjork.land&#x2F;tags&#x2F;phoenix&#x2F;&quot; class=&quot;hover-bold&quot;&gt;phoenix&lt;&#x2F;a&gt;&lt;&#x2F;div&gt;
        
    
&lt;&#x2F;div&gt;



&lt;&#x2F;div&gt;
&lt;p&gt;Phoenix is a web development framework written in Elixir that uses a server-side model-view-controller (MVC) pattern. It’s perfect for building highly scalable and fault-tolerant applications. In this article, we’ll explore Phoenix by building a simple RESTful API with it. But not just any API - we’ll build a dad-joke machine! We’ll show you how to generate schemas and controllers in one fell swoop, add new fields to an API endpoint, and rediscover the ancient wisdom of dad-jokers before us.&lt;&#x2F;p&gt;

&lt;div class=&quot;reading-time&quot;&gt;
    Reading time: 8 minutes
&lt;&#x2F;div&gt;

    


&lt;div class=&quot;quote &quot;&gt;
    &lt;cite&gt;
        &lt;p&gt;What do you get when you cross a phoenix and a unicorn? A magical mystery tour!&lt;&#x2F;p&gt;

    &lt;&#x2F;cite&gt;
    
&lt;&#x2F;div&gt;&lt;h2 id=&quot;project-setup&quot;&gt;Project Setup&lt;&#x2F;h2&gt;
&lt;p&gt;To get smooth sailing with this discovery we will be using &lt;strong&gt;Elixir 1.14&lt;&#x2F;strong&gt; and &lt;strong&gt;Phoenix v1.7&lt;&#x2F;strong&gt;. If you don’t have it setup already you can &lt;a href=&quot;https:&#x2F;&#x2F;hexdocs.pm&#x2F;phoenix&#x2F;installation.html&quot;&gt;follow the instructions over at hexdocs&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;To create a new Phoenix project suitable for an API we will run the following command:&lt;br &#x2F;&gt;
&lt;code&gt;mix phx.new jokes_api --no-html --no-assets&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Here&#x27;s the anatomy of the command:&lt;&#x2F;p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;&lt;&#x2F;th&gt;&lt;th&gt;&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;mix&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;The Elixir build tool and dependency chief-coordinator&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;phx.new&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;A &lt;em&gt;Mix&lt;&#x2F;em&gt; build task that creates a Phoenix project&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;jokes_api&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;Our project’s name&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;--no-html&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;instructs &lt;em&gt;phx.new&lt;&#x2F;em&gt; to not create any templates for us&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;--no-assets&lt;&#x2F;strong&gt;   &lt;&#x2F;td&gt;&lt;td&gt;instructs &lt;em&gt;phx.new&lt;&#x2F;em&gt; to not create any static assets (such as CSS- and JS-files)&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;p&gt;After creating the project structure with all the necessary dependencies we can take our next step. As we will be doing some reading and writing to a database, let&#x27;s set it up. We want a PostgreSQL database for the project, so let&#x27;s add a docker-container for it. We move in to the project directory and create a &lt;em&gt;docker-compose.yaml&lt;&#x2F;em&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;yaml&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-yaml &quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;version&lt;&#x2F;span&gt;&lt;span&gt;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;3.7&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;services&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;db&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;image&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;postgres
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;environment&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;POSTGRES_USER&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;postgres
&lt;&#x2F;span&gt;&lt;span&gt;     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;POSTGRES_PASSWORD&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;postgres
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ports&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;     - &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;5432:5432&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;volumes&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;     - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;pg_db:&#x2F;var&#x2F;lib&#x2F;postgresql&#x2F;data
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;volumes&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;pg_db&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We specify that we want the database to have a user called &lt;code&gt;postgres&lt;&#x2F;code&gt; and the password &lt;code&gt;postgres&lt;&#x2F;code&gt;. We need to update (or confirm) that our Phoenix project has these credentails as well. We find the configuration for this in &lt;em&gt;config&#x2F;dev.exs&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ex&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-ex &quot;&gt;&lt;code class=&quot;language-ex&quot; data-lang=&quot;ex&quot;&gt;&lt;span&gt;config &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:jokes_api&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;JokesApi&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Repo&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;username: &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;postgres&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;password: &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;postgres&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;hostname: &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;localhost&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;database: &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;jokes_api_dev&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;stacktrace: true&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;show_sensitive_data_on_connection_error: true&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;pool_size: 10
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;It’s looking good. It has the correct credentials. It&#x27;s also referenceing a database, &lt;code&gt;jokes_api_dev&lt;&#x2F;code&gt;, which we will create now. From the command line:
&lt;code&gt;mix ecto.create&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;ecto is the database schema manager that Phoenix relies on. It creates our databases and database schemas. &lt;code&gt;ecto.create&lt;&#x2F;code&gt; is the &lt;code&gt;mix&lt;&#x2F;code&gt; build task which will create the database defined in our configuration. &lt;code&gt;ecto&lt;&#x2F;code&gt; can be used with other types of databases as well, such as MySQL and SQLite3.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h2 id=&quot;the-anatomy-of-a-joke&quot;&gt;The anatomy of a joke&lt;&#x2F;h2&gt;
&lt;p&gt;For our dad-joke machine to get going, we will want a schema for it. Let&#x27;s imagine that a joke has text-content, and that we will want to be able to rate it. Either we like it, or we dislike it. Our model should be something like this: &lt;&#x2F;p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;field&lt;&#x2F;th&gt;&lt;th&gt;type&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;text&lt;&#x2F;td&gt;&lt;td&gt;text&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;likes&lt;&#x2F;td&gt;&lt;td&gt;integer&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;dislikes  &lt;&#x2F;td&gt;&lt;td&gt;integer&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;





    







&lt;div class=&quot;image-text-overlay&quot;&gt;
    &lt;div class=&quot;image-text image-text--up&quot;&gt;What do you call a fish with no eye?&lt;&#x2F;div&gt;
    &lt;div class=&quot;image-text image-text--down&quot;&gt;Fsh&lt;&#x2F;div&gt;
    &lt;div class=&quot;image-container &quot;&gt;
        &lt;img
                alt=&quot;&quot;
                src=&quot;articles&amp;#x2F;exploration&amp;#x2F;discovering_phoenix&amp;#x2F;bad-joke-chick.png&quot;
                srcset=&quot;https:&amp;#x2F;&amp;#x2F;abjork.land&amp;#x2F;processed_images&amp;#x2F;bad-joke-chick.6a5bad3fb5b5159a.webp 240w,
                            https:&amp;#x2F;&amp;#x2F;abjork.land&amp;#x2F;processed_images&amp;#x2F;bad-joke-chick.45ebca12c729b7fa.webp 400w,
                            https:&amp;#x2F;&amp;#x2F;abjork.land&amp;#x2F;processed_images&amp;#x2F;bad-joke-chick.33a7d0e0feb13ad8.webp 600w,
                            https:&amp;#x2F;&amp;#x2F;abjork.land&amp;#x2F;processed_images&amp;#x2F;bad-joke-chick.0cef4de696ff3716.webp 800w&quot;
                sizes=&quot;(max-width: 240px) 200px,
                            (max-width: 400px) 360px,
                            (max-width: 600px) 550px,
                            800px&quot;
        &#x2F;&gt;
    &lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;We will now create both the database schema and the API schema for our Joke model. It&#x27;s all done with a single command from the terminal:&lt;br &#x2F;&gt;
&lt;code&gt;mix phx.gen.json Jokes Joke jokes text:text likes:integer dislikes:integer&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;p&gt;There are a lot of jokes going around, so what do they mean in this context? Again we are using &lt;code&gt;mix&lt;&#x2F;code&gt;, our Elixir build tool. We are employing Phoenix&#x27;s &lt;code&gt;phx.gen.json&lt;&#x2F;code&gt; for this task. It will create a controller, JSON API-schema, and via &lt;code&gt;ecto&lt;&#x2F;code&gt; it will also create a migration file to update the database schema. &lt;code&gt;Jokes Joke&lt;&#x2F;code&gt; will define the namespace for our model module. The name for its database table is &lt;code&gt;jokes&lt;&#x2F;code&gt;. And &lt;code&gt;text:text likes:integer dislikes:integer&lt;&#x2F;code&gt; will define the model&#x27;s fields and their types.&lt;&#x2F;p&gt;
&lt;p&gt;With a migration file we can update the database. We do that with:&lt;br &#x2F;&gt;
&lt;code&gt;mix ecto.migrate&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;p&gt;We have now defined how a Joke should look like in the API as well as prepared our database to handle it. We are ready for our next steps.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;a-server-walks-into-a-bar&quot;&gt;A server walks into a bar&lt;&#x2F;h2&gt;
&lt;p&gt;We may want to view our small project to get a feel for how far we have come. We will need a server to show our project. Thankfully, Phoenix has a great server that can be used in development as well as in production. We run it with this command:&lt;br &#x2F;&gt;
&lt;code&gt;mix phx.server&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;p&gt;This will per default serve our application to &lt;a href=&quot;http:&#x2F;&#x2F;localhost:4000&quot;&gt;localhost:4000&lt;&#x2F;a&gt;. As we do not have any HTML templates or assets, we will see Phoenix&#x27;s development debug view. Which will serve us great here. This is our view:&lt;&#x2F;p&gt;

    
    













    


&lt;div class=&quot;image-container center&quot;&gt;
    &lt;img
            alt=&quot;Phoenix debug view shows some debug routes present but no other routes.&quot;
            src=&quot;phoenix-no-routes.png&quot;
            srcset=&quot;https:&amp;#x2F;&amp;#x2F;abjork.land&amp;#x2F;processed_images&amp;#x2F;phoenix-no-routes.9fbb13852635405e.webp 240w,
                        https:&amp;#x2F;&amp;#x2F;abjork.land&amp;#x2F;processed_images&amp;#x2F;phoenix-no-routes.c0d9319805425d47.webp 400w,
                        https:&amp;#x2F;&amp;#x2F;abjork.land&amp;#x2F;processed_images&amp;#x2F;phoenix-no-routes.adde9e88ae9914a7.webp 600w&quot;
            sizes=&quot;(max-width: 240px) 200px,
                        (max-width: 400px) 360px,
                        600px&quot;
    &#x2F;&gt;
    &lt;div class=&quot;image-subtext&quot;&gt;&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;From what we see here, it does not look like we have any new API-endpoints. But we can easily expose the JSON-schema defined for us. We have to map them to a new route, is all.&lt;&#x2F;p&gt;
&lt;p&gt;In &lt;code&gt;lib&#x2F;jokes_api_web&#x2F;router.ex&lt;&#x2F;code&gt; we will expose the endpoints we like on a module called JokeController (which were generated by our earlier mix task):&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ex&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-ex &quot;&gt;&lt;code class=&quot;language-ex&quot; data-lang=&quot;ex&quot;&gt;&lt;span&gt; scope &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;api&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;JokesApiWeb &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;do
&lt;&#x2F;span&gt;&lt;span&gt;   pipe_through &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:api
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;   resources &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;jokes&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;JokeController&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;except: &lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:new&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:edit&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:delete&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Saving the file and reviewing what we have shows us a bunch of new routes:&lt;&#x2F;p&gt;

    
    













    


&lt;div class=&quot;image-container center&quot;&gt;
    &lt;img
            alt=&quot;Phoenix debug view shows the new joke routes.&quot;
            src=&quot;phoenix-joke-routes.png&quot;
            srcset=&quot;https:&amp;#x2F;&amp;#x2F;abjork.land&amp;#x2F;processed_images&amp;#x2F;phoenix-joke-routes.ff319ab15e82b500.webp 240w,
                        https:&amp;#x2F;&amp;#x2F;abjork.land&amp;#x2F;processed_images&amp;#x2F;phoenix-joke-routes.7ce2bc3ceeef2ec0.webp 400w,
                        https:&amp;#x2F;&amp;#x2F;abjork.land&amp;#x2F;processed_images&amp;#x2F;phoenix-joke-routes.0421b350381ed4d9.webp 600w&quot;
            sizes=&quot;(max-width: 240px) 200px,
                        (max-width: 400px) 360px,
                        600px&quot;
    &#x2F;&gt;
    &lt;div class=&quot;image-subtext&quot;&gt;&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;We can try to create a new file now. I’m using Postman, but you might as well use CRUD.&lt;&#x2F;p&gt;
&lt;p&gt;What do you feel about this:
“There are 10 types of people in the world: those who understand binary, and those who don’t”&lt;&#x2F;p&gt;
&lt;p&gt;Let’s try adding it to the database. We make a POST request to http:&#x2F;&#x2F;localhost:4000&#x2F;api&#x2F;jokes with the following payload:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;json&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-json &quot;&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;   &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;joke&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: {
&lt;&#x2F;span&gt;&lt;span&gt;       &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;text&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;There are 10 types of people in the world: those who understand binary, and those who don’t.&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;   }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;What may the result be? Here’s what:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;json&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-json &quot;&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;   &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;errors&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: {
&lt;&#x2F;span&gt;&lt;span&gt;       &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;dislikes&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: [
&lt;&#x2F;span&gt;&lt;span&gt;           &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;can&amp;#39;t be blank&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;       ],
&lt;&#x2F;span&gt;&lt;span&gt;       &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;likes&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: [
&lt;&#x2F;span&gt;&lt;span&gt;           &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;can&amp;#39;t be blank&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;       ]
&lt;&#x2F;span&gt;&lt;span&gt;   }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Our model requires dislikes and likes to be set. But we don’t want that. We want these to start off with 0 and only be modified incrementally. A way to do that is to define a default value for the model. &lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;lib&#x2F;jokes_api&#x2F;jokes&#x2F;joke.ex&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;exs&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-exs &quot;&gt;&lt;code class=&quot;language-exs&quot; data-lang=&quot;exs&quot;&gt;&lt;span&gt; schema &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;jokes&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;do
&lt;&#x2F;span&gt;&lt;span&gt;   field &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:dislikes&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:integer&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;default: 0
&lt;&#x2F;span&gt;&lt;span&gt;   field &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:likes&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:integer&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;default: 0
&lt;&#x2F;span&gt;&lt;span&gt;   field &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:text&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:string
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;   timestamps()
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;When we retry our POST-request this will be the result:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;json&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-json &quot;&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;   &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;data&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: {
&lt;&#x2F;span&gt;&lt;span&gt;       &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;dislikes&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;       &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;       &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;likes&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;       &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;text&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;There are 10 types of people in the world: those who understand binary, and those who don’t.&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;   }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;


    


&lt;div class=&quot;quote &quot;&gt;
    &lt;cite&gt;
        &lt;p&gt;Success!&lt;&#x2F;p&gt;

    &lt;&#x2F;cite&gt;
    
&lt;&#x2F;div&gt;&lt;h3 id=&quot;more-routes-and-fields&quot;&gt;More routes and fields!&lt;&#x2F;h3&gt;
&lt;p&gt;Let’s add two new endpoints. One for disliking a joke, and another for liking it!
In the controller &lt;code&gt;lib&#x2F;jokes_api_web&#x2F;controllers&#x2F;joke_controller.ex&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ex&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-ex &quot;&gt;&lt;code class=&quot;language-ex&quot; data-lang=&quot;ex&quot;&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;like&lt;&#x2F;span&gt;&lt;span&gt;(conn, %{&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; =&amp;gt; id}) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;do
&lt;&#x2F;span&gt;&lt;span&gt;   joke = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Jokes&lt;&#x2F;span&gt;&lt;span&gt;.get_joke!(id)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;   likes = joke.likes + &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1
&lt;&#x2F;span&gt;&lt;span&gt;   joke_params = %{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;likes:&lt;&#x2F;span&gt;&lt;span&gt; likes}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;with &lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:ok&lt;&#x2F;span&gt;&lt;span&gt;, %&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Joke&lt;&#x2F;span&gt;&lt;span&gt;{} = joke} &amp;lt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Jokes&lt;&#x2F;span&gt;&lt;span&gt;.update_joke(joke, joke_params) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;do
&lt;&#x2F;span&gt;&lt;span&gt;     render(conn, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:show&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;joke:&lt;&#x2F;span&gt;&lt;span&gt; joke)
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;dislike&lt;&#x2F;span&gt;&lt;span&gt;(conn, %{&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; =&amp;gt; id}) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;do
&lt;&#x2F;span&gt;&lt;span&gt;   joke = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Jokes&lt;&#x2F;span&gt;&lt;span&gt;.get_joke!(id)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;   dislikes = joke.dislikes + &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1
&lt;&#x2F;span&gt;&lt;span&gt;   joke_params = %{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;dislikes:&lt;&#x2F;span&gt;&lt;span&gt; dislikes}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;with &lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:ok&lt;&#x2F;span&gt;&lt;span&gt;, %&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Joke&lt;&#x2F;span&gt;&lt;span&gt;{} = joke} &amp;lt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Jokes&lt;&#x2F;span&gt;&lt;span&gt;.update_joke(joke, joke_params) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;do
&lt;&#x2F;span&gt;&lt;span&gt;     render(conn, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:show&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;joke:&lt;&#x2F;span&gt;&lt;span&gt; joke)
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;With these new endpoints we can now increment the dislikes or the likes to our hearts content.&lt;&#x2F;p&gt;
&lt;p&gt;And for a final touch. Let’s add a field to the JSON-response that shows the score, that is the difference between likes and dislikes. The API schema is defined in &lt;code&gt;lib&#x2F;jokes_api_web&#x2F;controllers&#x2F;joke_json.ex&lt;&#x2F;code&gt;. Let’s update it:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ex&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-ex &quot;&gt;&lt;code class=&quot;language-ex&quot; data-lang=&quot;ex&quot;&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;defp &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;data&lt;&#x2F;span&gt;&lt;span&gt;(%&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Joke&lt;&#x2F;span&gt;&lt;span&gt;{} = joke) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;do
&lt;&#x2F;span&gt;&lt;span&gt;   %{
&lt;&#x2F;span&gt;&lt;span&gt;     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;id:&lt;&#x2F;span&gt;&lt;span&gt; joke.id,
&lt;&#x2F;span&gt;&lt;span&gt;     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;text:&lt;&#x2F;span&gt;&lt;span&gt; joke.text,
&lt;&#x2F;span&gt;&lt;span&gt;     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;likes:&lt;&#x2F;span&gt;&lt;span&gt; joke.likes,
&lt;&#x2F;span&gt;&lt;span&gt;     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;dislikes:&lt;&#x2F;span&gt;&lt;span&gt; joke.dislikes,
&lt;&#x2F;span&gt;&lt;span&gt;     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;score:&lt;&#x2F;span&gt;&lt;span&gt; joke.likes - joke.dislikes
&lt;&#x2F;span&gt;&lt;span&gt;   }
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We can like any joke we like by making a &lt;code&gt;PATCH&lt;&#x2F;code&gt; request to &lt;code&gt;http:&#x2F;&#x2F;localhost:4000&#x2F;api&#x2F;jokes&#x2F;1&#x2F;like&lt;&#x2F;code&gt;. This will increment the joke&#x27;s &lt;code&gt;likes&lt;&#x2F;code&gt;. Similarly, we can dislike a joke by substituting &lt;code&gt;like&lt;&#x2F;code&gt; for &lt;code&gt;dislike&lt;&#x2F;code&gt; in the URL. After a couple of votes we can see its score at &lt;code&gt;4&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;json&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-json &quot;&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;   &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;data&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: {
&lt;&#x2F;span&gt;&lt;span&gt;       &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;dislikes&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;       &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;       &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;likes&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;       &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;score&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;       &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;text&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;There are 10 types of people in the world: those who understand binary, and those who don’t.&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;   }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We have successfully created a simple API with potential of becoming a fearsome dad-jokes machine. A couple of commands and some modifications to the code has gotten us here. In my opinion a pretty swell experience. With a tool like Phoenix it&#x27;s easy to feel top of your game.&lt;&#x2F;p&gt;





    







&lt;div class=&quot;image-text-overlay&quot;&gt;
    &lt;div class=&quot;image-text image-text--up&quot;&gt;&lt;&#x2F;div&gt;
    &lt;div class=&quot;image-text image-text--down&quot;&gt;I&amp;#x27;m outstanding in my field!&lt;&#x2F;div&gt;
    &lt;div class=&quot;image-container &quot;&gt;
        &lt;img
                alt=&quot;&quot;
                src=&quot;articles&amp;#x2F;exploration&amp;#x2F;discovering_phoenix&amp;#x2F;chicken-outstanding-in-a-field.png&quot;
                srcset=&quot;https:&amp;#x2F;&amp;#x2F;abjork.land&amp;#x2F;processed_images&amp;#x2F;chicken-outstanding-in-a-field.cbaf6e5bbdfad0b6.webp 240w,
                            https:&amp;#x2F;&amp;#x2F;abjork.land&amp;#x2F;processed_images&amp;#x2F;chicken-outstanding-in-a-field.30dbaf1303ce88b2.webp 400w,
                            https:&amp;#x2F;&amp;#x2F;abjork.land&amp;#x2F;processed_images&amp;#x2F;chicken-outstanding-in-a-field.0dedeb714f335959.webp 600w,
                            https:&amp;#x2F;&amp;#x2F;abjork.land&amp;#x2F;processed_images&amp;#x2F;chicken-outstanding-in-a-field.2c9f87b6aef46ddd.webp 800w&quot;
                sizes=&quot;(max-width: 240px) 200px,
                            (max-width: 400px) 360px,
                            (max-width: 600px) 550px,
                            800px&quot;
        &#x2F;&gt;
    &lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;</content>
    </entry>
    <entry xml:lang="en">
        <title>Remembering Limits</title>
        <published>2023-04-15T00:00:00+00:00</published>
        <updated>2024-03-28T00:00:00+00:00</updated>
        <author>
          <name>Anders Björkland</name>
        </author>
        <link rel="alternate" href="https://abjork.land/articles/mathematics/limits/" type="text/html"/>
        <id>https://abjork.land/articles/mathematics/limits/</id>
        <content type="html">&lt;div class=&quot;article-header&quot;&gt;
    










&lt;img
        alt=&quot;133&quot;
        src=&quot;https:&amp;#x2F;&amp;#x2F;abjork.land&amp;#x2F;processed_images&amp;#x2F;hero.5fa1a79f732ea847.jpg&quot;
        srcset=&quot;https:&amp;#x2F;&amp;#x2F;abjork.land&amp;#x2F;processed_images&amp;#x2F;hero.7f8a4e376b0ecdf0.jpg 240w,
                    https:&amp;#x2F;&amp;#x2F;abjork.land&amp;#x2F;processed_images&amp;#x2F;hero.5fa1a79f732ea847.jpg 400w,
                    https:&amp;#x2F;&amp;#x2F;abjork.land&amp;#x2F;processed_images&amp;#x2F;hero.c972485a31504455.jpg 600w&quot;
        sizes=&quot;(max-width: 240px) 200px,
                    (max-width: 400px) 360px,
                    600px&quot;
&#x2F;&gt;


    &lt;div class=&quot;text-content&quot;&gt;
        &lt;h1 class=&quot;article-title&quot;&gt;
            &lt;div class=&quot;title&quot;&gt;Remembering Limits&lt;&#x2F;div&gt;
            
        &lt;&#x2F;h1&gt;
    &lt;&#x2F;div&gt;
    

 

 

&lt;div class=&quot;tag-list absolute&quot;&gt;
    
        
        &lt;div&gt;&lt;a href=&quot;https:&#x2F;&#x2F;abjork.land&#x2F;tags&#x2F;calculus&#x2F;&quot; class=&quot;hover-bold&quot;&gt;calculus&lt;&#x2F;a&gt;&lt;&#x2F;div&gt;
        
        &lt;div&gt;&lt;a href=&quot;https:&#x2F;&#x2F;abjork.land&#x2F;tags&#x2F;limits&#x2F;&quot; class=&quot;hover-bold&quot;&gt;limits&lt;&#x2F;a&gt;&lt;&#x2F;div&gt;
        
    
&lt;&#x2F;div&gt;



&lt;&#x2F;div&gt;
&lt;p&gt;It’s been a long (loooooo-oooo-oooong) time since I studied mathematics. And with all the rage that is “AI” and machine learning (ML), I thought now would be a good time. I did an initial venture into ML but quickly realized that I do not know a knob from a steering wheel. That was when the YouTube Algo-monster figured I should look at a clip by &lt;a href=&quot;https:&#x2F;&#x2F;youtu.be&#x2F;wtolixa9XTg&quot;&gt;AssemblyAI: “How I would learn Machine Learning (if I could start over)”&lt;&#x2F;a&gt;. And it was just what I needed to hear. So here I am, learning ML by first investing time in… &lt;strong&gt;MATH!&lt;&#x2F;strong&gt; &lt;&#x2F;p&gt;
&lt;p&gt;Here are 3 points of why some mathematical skills would be an advantage to have going into ML:&lt;br &#x2F;&gt;
&lt;strong&gt;Calculus&lt;&#x2F;strong&gt; is used for optimization algorithms - a group of algorithms that try to find the best solution to a problem.
&lt;strong&gt;Linear Algebra&lt;&#x2F;strong&gt; deals with linear equations and matrices. In ML this is used in data preprocessing, feature extraction and dimensionality reduction. 
&lt;strong&gt;Probability and Statistics&lt;&#x2F;strong&gt; are used for modeling uncertainty and making predictions. &lt;&#x2F;p&gt;
&lt;p&gt;This will be a series of articles where I delve into some of these Mathematical concepts. Starting with Calculus’s core concept:  Limits!&lt;&#x2F;p&gt;
&lt;h2 id=&quot;limits&quot;&gt;Limits&lt;&#x2F;h2&gt;
&lt;p&gt;The essence to defining continuity, derivatives, and integrals comes down to limits. We will definitely see limits when we want to look at derivatives - or the rate of a change at a specific point. But even before we step into that realm, consider the function 
&lt;code&gt;f(x)=(x-4)&#x2F;(x-4)&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;







    



    
        
        
    
    

    
    
    
    
    &lt;div class=&quot;image-container center&quot;&gt;
        &lt;img
                alt=&quot;A linear function&quot;
                src=&quot;limit_1.png&quot;
                srcset=&quot;https:&amp;#x2F;&amp;#x2F;abjork.land&amp;#x2F;processed_images&amp;#x2F;limit_1.c9818369fc0dee9b.webp 240w,
                            https:&amp;#x2F;&amp;#x2F;abjork.land&amp;#x2F;processed_images&amp;#x2F;limit_1.f46690abd2e63827.webp 400w,
                            https:&amp;#x2F;&amp;#x2F;abjork.land&amp;#x2F;processed_images&amp;#x2F;limit_1.013953040fe08db3.webp 600w&quot;
                sizes=&quot;(max-width: 240px) 200px,
                            (max-width: 400px) 360px,
                            600px&quot;
        &#x2F;&gt;
        &lt;div class=&quot;image-subtext&quot;&gt;&lt;&#x2F;div&gt;
    &lt;&#x2F;div&gt;


&lt;p&gt;From a cursory glance, we see that the function will equal to 1, for whatever value of &lt;code&gt;x&lt;&#x2F;code&gt;. Well, almost. When we have &lt;code&gt;x=4&lt;&#x2F;code&gt; we will have a &lt;strong&gt;situation&lt;&#x2F;strong&gt;. &lt;&#x2F;p&gt;




    



    



    
    &lt;div class=&quot;image-container center&quot;&gt;
        &lt;div&gt;
            &lt;img
                alt=&quot;&quot;
                src=&quot;undefined-1.svg&quot;
                height=&quot;27&quot; 
                width=&quot;175&quot;
            &#x2F;&gt;
        &lt;&#x2F;div&gt;
        &lt;div&gt;&lt;&#x2F;div&gt;
    &lt;&#x2F;div&gt;


&lt;p&gt;This would mean that we would have 0 divided by 0 which is an undefined concept. We can’t divide anything with 0. But as &lt;code&gt;x&lt;&#x2F;code&gt; approaches &lt;code&gt;4&lt;&#x2F;code&gt; we see that we have &lt;code&gt;1&lt;&#x2F;code&gt;. With &lt;code&gt;x&lt;&#x2F;code&gt; really really close to that undefined, such as 3.9999, we see that we still have &lt;code&gt;y = 1&lt;&#x2F;code&gt;. On the other side we see that &lt;code&gt;y(4.0001) = 1&lt;&#x2F;code&gt;. While &lt;code&gt;x = 4&lt;&#x2F;code&gt; is undefined for our function, we can take the limit of &lt;code&gt;f&lt;&#x2F;code&gt; at &lt;code&gt;x = 4&lt;&#x2F;code&gt; and find that it is &lt;code&gt;1&lt;&#x2F;code&gt;. We will have this expression:&lt;&#x2F;p&gt;




    



    



    
    &lt;div class=&quot;image-container center&quot;&gt;
        &lt;div&gt;
            &lt;img
                alt=&quot;&quot;
                src=&quot;limit_2.svg&quot;
                height=&quot;22&quot; 
                width=&quot;84&quot;
            &#x2F;&gt;
        &lt;&#x2F;div&gt;
        &lt;div&gt;&lt;&#x2F;div&gt;
    &lt;&#x2F;div&gt;


&lt;p&gt;It’s like magic! But keep in mind, this does not say that &lt;code&gt;y(4) = 1&lt;&#x2F;code&gt;, rather it is saying that the equation will behave in such a way that &lt;code&gt;y&lt;&#x2F;code&gt; will be &lt;code&gt;1&lt;&#x2F;code&gt; as we are moving very very close to &lt;code&gt;x = 4&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;But this magic has its &lt;strong&gt;limits&lt;&#x2F;strong&gt;! If we find that as we increase &lt;code&gt;x&lt;&#x2F;code&gt; and moving closer to a point has one value, and decrease &lt;code&gt;x&lt;&#x2F;code&gt; to move closer to that same point from the other directions is moving us closer to a different value, then we have a situation where we can’t apply limits to find the value as we are moving closer to &lt;code&gt;x&lt;&#x2F;code&gt;. Consider the function &lt;code&gt;f(x)=x&#x2F;(x - 2)&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;







    



    
        
        
    
    

    
    
    
    
    &lt;div class=&quot;image-container center&quot;&gt;
        &lt;img
                alt=&quot;A symptotic function&quot;
                src=&quot;asymptot.png&quot;
                srcset=&quot;https:&amp;#x2F;&amp;#x2F;abjork.land&amp;#x2F;processed_images&amp;#x2F;asymptot.f8d978c6bafe164a.webp 240w,
                            https:&amp;#x2F;&amp;#x2F;abjork.land&amp;#x2F;processed_images&amp;#x2F;asymptot.664052c4bcf12337.webp 400w,
                            https:&amp;#x2F;&amp;#x2F;abjork.land&amp;#x2F;processed_images&amp;#x2F;asymptot.bdd0052eafdfc8a6.webp 600w&quot;
                sizes=&quot;(max-width: 240px) 200px,
                            (max-width: 400px) 360px,
                            600px&quot;
        &#x2F;&gt;
        &lt;div class=&quot;image-subtext&quot;&gt;&lt;&#x2F;div&gt;
    &lt;&#x2F;div&gt;


&lt;p&gt;As we increase &lt;code&gt;x&lt;&#x2F;code&gt; from &lt;code&gt;1&lt;&#x2F;code&gt; and get closer to &lt;code&gt;2&lt;&#x2F;code&gt;, we see that &lt;code&gt;y&lt;&#x2F;code&gt; will decrease dramatically. From the opposite side we see that when we decrease &lt;code&gt;x&lt;&#x2F;code&gt; from &lt;code&gt;3&lt;&#x2F;code&gt; and get closer to &lt;code&gt;2&lt;&#x2F;code&gt;, we see that &lt;code&gt;y&lt;&#x2F;code&gt; will increase dramatically. In this example we do not have a limit for when &lt;code&gt;x&lt;&#x2F;code&gt; gets closer to &lt;code&gt;2&lt;&#x2F;code&gt;, &lt;em&gt;the limit does not exist&lt;&#x2F;em&gt;. This actually showcases 2 ways that a limit does not exist:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;As we get closer to 2, the y-value moves in a different direction depending on the direction from which we approach 2.&lt;&#x2F;li&gt;
&lt;li&gt;As we get closer to 2, the y-value is unbounded. &lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h3 id=&quot;one-sided-limits&quot;&gt;One-sided limits&lt;&#x2F;h3&gt;
&lt;p&gt;We have described how a limit does not exist when the value of y approaches different values depending on the direction we are approaching a value of x from. We can however give ourselves more leeway by describing a one-sided limit. Take this example, a function would have the limit of x approach 4 when we move closer to x = 2. On the other side the x might approach -2. This give us the following expressions:&lt;br &#x2F;&gt;




    



    



    
    &lt;div class=&quot;image-container center&quot;&gt;
        &lt;div&gt;
            &lt;img
                alt=&quot;&quot;
                src=&quot;limit_3.svg&quot;
                height=&quot;22&quot; 
                width=&quot;84&quot;
            &#x2F;&gt;
        &lt;&#x2F;div&gt;
        &lt;div&gt;&lt;&#x2F;div&gt;
    &lt;&#x2F;div&gt;


&lt;br &#x2F;&gt;




    



    



    
    &lt;div class=&quot;image-container center&quot;&gt;
        &lt;div&gt;
            &lt;img
                alt=&quot;&quot;
                src=&quot;limit_4.svg&quot;
                height=&quot;23&quot; 
                width=&quot;105&quot;
            &#x2F;&gt;
        &lt;&#x2F;div&gt;
        &lt;div&gt;&lt;&#x2F;div&gt;
    &lt;&#x2F;div&gt;


&lt;&#x2F;p&gt;
&lt;p&gt;But as we have described earlier, the two-sided limit does not exist when we approach different values from the two directions.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;the-limit-when-the-function-s-value-do-exist&quot;&gt;The limit when the function’s value do exist&lt;&#x2F;h3&gt;
&lt;p&gt;The function &lt;code&gt;f(x)=x^2+3&lt;&#x2F;code&gt; is defined when &lt;code&gt;x=2&lt;&#x2F;code&gt;. This does not stop us from looking for its limit. In this case, we arrive at the limit approaching the same value as the defined value for &lt;code&gt;f(x)&lt;&#x2F;code&gt;. But this does not mean that the limit necessarily will approach the defined value.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;conclusion-confusion&quot;&gt;Conclusion confusion&lt;&#x2F;h2&gt;
&lt;p&gt;So there you have it! We’ve seen how limits can help us approach undefined positions in a function using different graphs. This is a really important concept in calculus and mathematical analysis, and it’s also relevant to machine learning. By understanding the basics of limits, we can better understand the math behind machine learning and its optimization algorithms. We hope you found this article helpful and that it encourages you to learn more about this fascinating topic!&lt;&#x2F;p&gt;





    







&lt;div class=&quot;image-text-overlay&quot;&gt;
    &lt;div class=&quot;image-text image-text--up&quot;&gt;Why did the limit go to infinity?&lt;&#x2F;div&gt;
    &lt;div class=&quot;image-text image-text--down&quot;&gt;To get away from the derivative&lt;&#x2F;div&gt;
    &lt;div class=&quot;image-container &quot;&gt;
        &lt;img
                alt=&quot;&quot;
                src=&quot;articles&amp;#x2F;mathematics&amp;#x2F;limits&amp;#x2F;kitten_joke.png&quot;
                srcset=&quot;https:&amp;#x2F;&amp;#x2F;abjork.land&amp;#x2F;processed_images&amp;#x2F;kitten_joke.e472ba7b5701eba5.webp 240w,
                            https:&amp;#x2F;&amp;#x2F;abjork.land&amp;#x2F;processed_images&amp;#x2F;kitten_joke.a20c2d153543b679.webp 400w,
                            https:&amp;#x2F;&amp;#x2F;abjork.land&amp;#x2F;processed_images&amp;#x2F;kitten_joke.279e79356964997f.webp 600w,
                            https:&amp;#x2F;&amp;#x2F;abjork.land&amp;#x2F;processed_images&amp;#x2F;kitten_joke.95288242ad1810ce.webp 800w&quot;
                sizes=&quot;(max-width: 240px) 200px,
                            (max-width: 400px) 360px,
                            (max-width: 600px) 550px,
                            800px&quot;
        &#x2F;&gt;
    &lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;</content>
    </entry>
    <entry xml:lang="en">
        <title>Stock Limits? No Problem! Add availability check to your Sylius Storefront</title>
        <published>2023-04-09T00:00:00+00:00</published>
        <updated>2023-04-09T00:00:00+00:00</updated>
        <author>
          <name>Anders Björkland</name>
        </author>
        <link rel="alternate" href="https://abjork.land/articles/eCommerce/stock-limit/" type="text/html"/>
        <id>https://abjork.land/articles/eCommerce/stock-limit/</id>
        <content type="html">&lt;div class=&quot;article-header&quot;&gt;
    










&lt;img
        alt=&quot;133&quot;
        src=&quot;https:&amp;#x2F;&amp;#x2F;abjork.land&amp;#x2F;processed_images&amp;#x2F;hero.528502d259687844.jpg&quot;
        srcset=&quot;https:&amp;#x2F;&amp;#x2F;abjork.land&amp;#x2F;processed_images&amp;#x2F;hero.4cf6c80342ceaf27.jpg 240w,
                    https:&amp;#x2F;&amp;#x2F;abjork.land&amp;#x2F;processed_images&amp;#x2F;hero.528502d259687844.jpg 400w,
                    https:&amp;#x2F;&amp;#x2F;abjork.land&amp;#x2F;processed_images&amp;#x2F;hero.a50db115ea4e853f.jpg 600w&quot;
        sizes=&quot;(max-width: 240px) 200px,
                    (max-width: 400px) 360px,
                    600px&quot;
&#x2F;&gt;


    &lt;div class=&quot;text-content&quot;&gt;
        &lt;h1 class=&quot;article-title&quot;&gt;
            &lt;div class=&quot;title&quot;&gt;Stock Limits? No Problem!&lt;&#x2F;div&gt;
            
                &lt;div class=&quot;subtitle&quot;&gt;Add availability check to your Sylius Storefront&lt;&#x2F;div&gt;
            
        &lt;&#x2F;h1&gt;
    &lt;&#x2F;div&gt;
    

 

 

&lt;div class=&quot;tag-list absolute&quot;&gt;
    
        
        &lt;div&gt;&lt;a href=&quot;https:&#x2F;&#x2F;abjork.land&#x2F;tags&#x2F;sylius&#x2F;&quot; class=&quot;hover-bold&quot;&gt;Sylius&lt;&#x2F;a&gt;&lt;&#x2F;div&gt;
        
    
&lt;&#x2F;div&gt;



&lt;&#x2F;div&gt;
&lt;p&gt;Are you missing a stock limit in your Sylius storefront? Say no more! In this article, we’ll show you how to add a Stock Limit to your Sylius Storefront with ease. With Sylius’ flexibility and malleability, you can enhance your inventory in ways you never thought possible. And who knows? You might even have some fun along the way 😉. 

&lt;div class=&quot;reading-time&quot;&gt;
    Reading time: 13 minutes
&lt;&#x2F;div&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Table of content&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;abjork.land&#x2F;articles&#x2F;eCommerce&#x2F;stock-limit&#x2F;#article-start&quot;&gt;How it starts&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;abjork.land&#x2F;articles&#x2F;eCommerce&#x2F;stock-limit&#x2F;#article-step-0&quot;&gt;Step 0&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;abjork.land&#x2F;articles&#x2F;eCommerce&#x2F;stock-limit&#x2F;#article-update-ui&quot;&gt;Behold the new field - update the UI&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;abjork.land&#x2F;articles&#x2F;eCommerce&#x2F;stock-limit&#x2F;#article-validate-stock&quot;&gt;Validating Stock Limit&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;article-start&quot;&gt;How it starts&lt;&#x2F;h2&gt;
The &#x27;Track&#x27; button is Sylius’ trusty sidekick to keep your inventory in check with. With it you can ensure that you only sell what is in your stock.  
&lt;p&gt;So what is it? It’s Sylius’ inventory feature! With this feature, you can set how many items are available for each product variant you have. By setting &#x27;Track&#x27; on it, Sylius will add a validation check when a customer wants to add that item to their cart. This way, you will never sell more than what you have. But is it enough?&lt;&#x2F;p&gt;
&lt;p&gt;Sometimes, you just need a little extra something to feel like a true eCommerce master. Perhaps you don&#x27;t want to sell all the items in stock, but keep some in store for later. Such a neat buffer-feature would be truly great to have. As this does not come out-of-the box for us, we will make it ourselves!&lt;&#x2F;p&gt;
&lt;p&gt;To reach our aim to feel like that eCommerce master we all strive to be, here is what we will do:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Create a &lt;code&gt;StockLimitInterface&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Implement the interface on &lt;code&gt;ProductVariant&lt;&#x2F;code&gt; and add a &lt;code&gt;stockLimit&lt;&#x2F;code&gt; field&lt;&#x2F;li&gt;
&lt;li&gt;Update the UI for setting the limit&lt;&#x2F;li&gt;
&lt;li&gt;Create an &lt;code&gt;AvailabilityCheckerDecorator&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;


    


&lt;div class=&quot;quote &quot;&gt;
    &lt;cite&gt;
        &lt;p&gt;I shop therefore I am. It’s like Descartes but with more bags.&lt;&#x2F;p&gt;

    &lt;&#x2F;cite&gt;
    
&lt;&#x2F;div&gt;
    
    













    


&lt;div class=&quot;image-container center&quot;&gt;
    &lt;img
            alt=&quot;A swan with sun glasses holding a shopping bag&quot;
            src=&quot;swan-with-bag1.png&quot;
            srcset=&quot;https:&amp;#x2F;&amp;#x2F;abjork.land&amp;#x2F;processed_images&amp;#x2F;swan-with-bag1.a7e136ce0b8abd03.webp 240w,
                        https:&amp;#x2F;&amp;#x2F;abjork.land&amp;#x2F;processed_images&amp;#x2F;swan-with-bag1.fddf246a1a08d747.webp 400w,
                        https:&amp;#x2F;&amp;#x2F;abjork.land&amp;#x2F;processed_images&amp;#x2F;swan-with-bag1.8ec21ad09c74e84f.webp 600w&quot;
            sizes=&quot;(max-width: 240px) 200px,
                        (max-width: 400px) 360px,
                        600px&quot;
    &#x2F;&gt;
    &lt;div class=&quot;image-subtext&quot;&gt;&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;By the end of this article, you’ll be able to take advantage of our new, fresh-from-the-press, feature: individual stock limits for each product variant. With this feature, you’ll be able to set limits on how many of each product variant can be added to a cart. You’ll also be able to see when a product variant has less than the limit in stock. This new feature is perfect for businesses that want to manage their inventory more effectively and avoid overselling products. So let’s dive in and see how it all works!&lt;&#x2F;p&gt;
&lt;h2 id=&quot;article-step-0&quot;&gt;Step 0&lt;&#x2F;h2&gt;  
&lt;p&gt;In this tutorial we will have PHP 8.1 and Sylius 1.12. If ever you need to compare your code, or rightfully snatch a whole lot of it, you can checkout the GitHub repository &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;andersbjorkland&#x2F;SomeLimitsShop&#x2F;tree&#x2F;start&quot;&gt;SomeLimitsShop:start&lt;&#x2F;a&gt; (the start-branch has the initial setup).&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Additional details:&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;A docker-container for serving a MariaDB database. Remove all the configurations in the docker-compose.yml if you are starting from scratch and keep configuration for the database. See the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;andersbjorkland&#x2F;SomeLimitsShop&#x2F;blob&#x2F;start&#x2F;docker-compose.yml&quot;&gt;GitHub repository for reference&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;As a development server we will use the Symfony development server. A good alternative is using the built-in PHP development server: &lt;code&gt;php -S localhost -t &#x2F;public&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;We will use Sylius default fixtures to load the database (&lt;code&gt;php bin&#x2F;console sylius:install&lt;&#x2F;code&gt; will set it up for us)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;creating-potential-with-a-stocklimitinterface&quot;&gt;Creating potential with a StockLimitInterface&lt;&#x2F;h2&gt;
&lt;p&gt;Our starting point is defining the means for which we will check stock limits. Let’s get this in writing with a new interface, &lt;code&gt;StockLimitInterface&lt;&#x2F;code&gt;. We create this file at &lt;code&gt;.&#x2F;src&#x2F;Inventory&#x2F;StockLimitInterface&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;php&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-php &quot;&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span style=&quot;color:#ab7967;&quot;&gt;&amp;lt;?php
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;namespace &lt;&#x2F;span&gt;&lt;span&gt;App\Inventory;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;interface &lt;&#x2F;span&gt;&lt;span&gt;StockLimitInterface
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;public function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;getStockLimit&lt;&#x2F;span&gt;&lt;span&gt;(): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;make-productvariant-meatier&quot;&gt;Make ProductVariant meatier&lt;&#x2F;h2&gt;
&lt;p&gt;We enhance ProductVariant with the StockLimitInterface and add the accompanying field &lt;code&gt;stockLimit&lt;&#x2F;code&gt;. We will let it be nullable in the database but we will check its value before returning it in the getter. This way we will stay true to the interface and avoid any beef with our code.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;php&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-php &quot;&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span style=&quot;color:#ab7967;&quot;&gt;&amp;lt;?php
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;declare&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;strict_types&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;namespace &lt;&#x2F;span&gt;&lt;span&gt;App\Entity\Product;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;App\Inventory\&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;StockLimitInterface&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;Doctrine\ORM\&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Mapping &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;ORM&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;Sylius\Component\Core\Model\&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;ProductVariant &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;BaseProductVariant&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;Sylius\Component\Product\Model\&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;ProductVariantTranslationInterface&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;**
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;* @ORM\Entity
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;* @ORM\Table(name=&amp;quot;sylius_product_variant&amp;quot;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;*&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;#[ORM\Entity]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;#[ORM\Table(name: &amp;#39;sylius_product_variant&amp;#39;)]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;ProductVariant &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;extends &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;BaseProductVariant &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;implements &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;StockLimitInterface
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;**
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;    * @ORM\Column(type=&amp;quot;integer&amp;quot;, nullable=true, options={&amp;quot;default&amp;quot; : 0})
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;    *&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;private &lt;&#x2F;span&gt;&lt;span&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;stockLimit&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;protected function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;createTranslation&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;ProductVariantTranslationInterface
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;   {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;       &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;ProductVariantTranslation&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;();
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;   }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;public function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;getStockLimit&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;   {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;       &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;stockLimit&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt; ?? &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;   }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;**
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;    * &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;@param&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt; mixed $stockLimit
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;    *&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;public function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;setStockLimit&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;?int &lt;&#x2F;span&gt;&lt;span&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;stockLimit&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;void
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;   {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;       &lt;&#x2F;span&gt;&lt;span&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;stockLimit &lt;&#x2F;span&gt;&lt;span&gt;= $&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;stockLimit&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;   }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Whenever we make a modification to an entity like this, we want to update the database schema accordingly. As Sylius is running with Doctrine, we have a couple of handy CLI commands at our disposal. Run these commands to update the database:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;php bin&#x2F;console doctrine:migrations:diff&lt;&#x2F;code&gt; - to create a migrations-file with details for Doctrine on how to update the schema.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;php bin&#x2F;console doctrine:migrations:migrate&lt;&#x2F;code&gt; - to run the migration file.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;article-update-ui&quot;&gt;Behold the new field - update the UI&lt;&#x2F;h2&gt;
If we go to the Sylius Admin view and navigate to a product variant and its inventory-tab, we see that they may have a stock value, and per the default fixture it will not be set to be “tracked”. We will add a field to this view to set the Stock Limit. We will also add a field to the variants list-view so we can at a glance see if current stock is below the limit.  

    
    













    


&lt;div class=&quot;image-container center&quot;&gt;
    &lt;img
            alt=&quot;An admin view for a product variant where Inventory is selected. It shows 9 items in current stock. &amp;quot;Tracked&amp;quot; is switched off.&quot;
            src=&quot;product-variant-000f-s.png&quot;
            srcset=&quot;https:&amp;#x2F;&amp;#x2F;abjork.land&amp;#x2F;processed_images&amp;#x2F;product-variant-000f-s.6de3c2361c7f1d1e.webp 240w,
                        https:&amp;#x2F;&amp;#x2F;abjork.land&amp;#x2F;processed_images&amp;#x2F;product-variant-000f-s.49d5677965526d72.webp 400w,
                        https:&amp;#x2F;&amp;#x2F;abjork.land&amp;#x2F;processed_images&amp;#x2F;product-variant-000f-s.a498ad55075f5264.webp 600w&quot;
            sizes=&quot;(max-width: 240px) 200px,
                        (max-width: 400px) 360px,
                        600px&quot;
    &#x2F;&gt;
    &lt;div class=&quot;image-subtext&quot;&gt;&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;While we are at the product variant view, let us update the Inventory to be tracked! Simply switch the slider and click “Save Changes”. When an inventory for a variant is tracked, we can see its current status in the product variants list. In the image below, we see that the first variant has 9 Available on hand. This field will also show the Stock Limit when we’re done here.&lt;&#x2F;p&gt;

    
    













    


&lt;div class=&quot;image-container center&quot;&gt;
    &lt;img
            alt=&quot;An admin view for a product variant where Inventory is selected. It shows 9 items in current stock. &amp;quot;Tracked&amp;quot; is switched off.&quot;
            src=&quot;product-variants.png&quot;
            srcset=&quot;https:&amp;#x2F;&amp;#x2F;abjork.land&amp;#x2F;processed_images&amp;#x2F;product-variants.b70449802b66bbb5.webp 240w,
                        https:&amp;#x2F;&amp;#x2F;abjork.land&amp;#x2F;processed_images&amp;#x2F;product-variants.afa411efe1faf487.webp 400w,
                        https:&amp;#x2F;&amp;#x2F;abjork.land&amp;#x2F;processed_images&amp;#x2F;product-variants.77ab2c691fc0274b.webp 600w&quot;
            sizes=&quot;(max-width: 240px) 200px,
                        (max-width: 400px) 360px,
                        600px&quot;
    &#x2F;&gt;
    &lt;div class=&quot;image-subtext&quot;&gt;&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;What we will need:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Enhance the form for ProductVariant to map the field &lt;code&gt;stockLimit&lt;&#x2F;code&gt; to a form field&lt;&#x2F;li&gt;
&lt;li&gt;Override the tab-template for inventory to add the form-field&lt;&#x2F;li&gt;
&lt;li&gt;Override the grid-template for inventory to show the stock-limit on variants-view&lt;&#x2F;li&gt;
&lt;li&gt;Also, we will add a translation field!&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;enhancing-productvariant-s-form-type&quot;&gt;Enhancing ProductVariant’s form type&lt;&#x2F;h3&gt;
&lt;p&gt;It is a nice day when we don’t have to start from scratch. Since Sylius already has defined a Form type for ProductVariant, we will extend it through form type extensions! This will let us define just the field we have added to the ProductVariant and specify what type of form-field it should be. Let&#x27;s create a new file at &lt;code&gt;src&#x2F;Form&#x2F;ProductVariantTypeExtension.php&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;php&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-php &quot;&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span style=&quot;color:#ab7967;&quot;&gt;&amp;lt;?php &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;declare&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;strict_types&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;namespace &lt;&#x2F;span&gt;&lt;span&gt;App\Form;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;Sylius\Bundle\ProductBundle\Form\Type\&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;ProductVariantType&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;Symfony\Component\Form\&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;AbstractTypeExtension&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;Symfony\Component\Form\Extension\Core\Type\&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;IntegerType&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;Symfony\Component\Form\&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;FormBuilderInterface&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;ProductVariantTypeExtension &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;extends &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;AbstractTypeExtension
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;public function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;__construct&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;   ){}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;public function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;buildForm&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;FormBuilderInterface &lt;&#x2F;span&gt;&lt;span&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;builder&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;array &lt;&#x2F;span&gt;&lt;span&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;options&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;void
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;   {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;       &lt;&#x2F;span&gt;&lt;span&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;builder&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;add&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;stockLimit&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;IntegerType&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;class&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;, [
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;           &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;label&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39; =&amp;gt; &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;app.ui.stock_limit&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;           &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;required&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39; =&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;       ]);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;   }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;public static function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;getExtendedTypes&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;iterable
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;   {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;       &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;ProductVariantType&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;class&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;];
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;   }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This declares that the &lt;code&gt;stockLimit&lt;&#x2F;code&gt; field should be an take integers as input. We also set its label to &lt;code&gt;app.ui.stock_limit&lt;&#x2F;code&gt;. This can be used when we want to add translations to it, but we could just have called it &lt;code&gt;Stock Limit&lt;&#x2F;code&gt; if we don&#x27;t want to use the translation feature.&lt;&#x2F;p&gt;




&lt;div class=&quot;quote mb-4&quot;&gt;
    &lt;cite&gt;
        &lt;p&gt;The only thing necessary for the triumph of bugs is for good developers to not specify data types&lt;&#x2F;p&gt;

    &lt;&#x2F;cite&gt;
    
&lt;&#x2F;div&gt;&lt;h3 id=&quot;override-tab-template-for-inventory&quot;&gt;Override tab-template for inventory&lt;&#x2F;h3&gt;
&lt;p&gt;If you ever want to update the Sylius admin view, there is a folder called &lt;code&gt;.&#x2F;templates&#x2F;bundles&#x2F;SyliusAdminBundle&lt;&#x2F;code&gt; in your Sylius project. Here we can override any template or partial-template we like. As long as we mirror its original folder structure. For our case, we want to override the inventory template on a ProductVariant. It’s original template lies at this location: &lt;code&gt;.&#x2F;vendor&#x2F;sylius&#x2F;sylius&#x2F;src&#x2F;Sylius&#x2F;Bundle&#x2F;AdminBundle&#x2F;Resources&#x2F;views&#x2F;ProductVariant&#x2F;Tab&#x2F;_inventoryContent.html.twig&lt;&#x2F;code&gt;. It may be a bit mouthful, but that’s where it lies. Luckily, when we mirror the structure, we can just take anything after &lt;code&gt;&#x2F;views&#x2F;&lt;&#x2F;code&gt; and replicate the structure to our project at &lt;code&gt;.&#x2F;templates&#x2F;bundles&#x2F;SyliusAdminBundle&lt;&#x2F;code&gt;.  So we will copy the file &lt;code&gt;_inventoryContent.html.twig&lt;&#x2F;code&gt; and paste it to &lt;code&gt;.&#x2F;templates&#x2F;bundles&#x2F;SyliusAdminBundle&#x2F;ProductVariant&#x2F;Tab&#x2F;&lt;&#x2F;code&gt;. Then We will add the line {{ form_row(form.stockLimit) }} to our &lt;code&gt;_inventoryContent.html.twig&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;html&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-html &quot;&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;h3 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;class&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;ui dividing header&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;gt;{{ &amp;#39;sylius.ui.inventory&amp;#39;|trans }}&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;h3&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;div &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;class&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;ui segment&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;   {{ form_row(form.onHand) }}
&lt;&#x2F;span&gt;&lt;span&gt;   {{ form_row(form.stockLimit) }}
&lt;&#x2F;span&gt;&lt;span&gt;   {{ form_row(form.tracked) }}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;   &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;div &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;class&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;ui pointing above ignored label&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;       {{ form_help(form.tracked) }}
&lt;&#x2F;span&gt;&lt;span&gt;   &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;div&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;   {{ form_row(form.version) }}
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;div&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;{{ sylius_template_event([&amp;#39;sylius.admin.product_variant.&amp;#39; ~ action ~ &amp;#39;.tab_inventory&amp;#39;, &amp;#39;sylius.admin.product_variant.tab_inventory&amp;#39;], {&amp;#39;form&amp;#39;: form}) }}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And Voila! We have just customized the admin view. Congrats! This will make it possible for us to set the Stock Limit. Let’s edit the same product variant as before, go to Inventory, and set Stock Limit to 10 (or whatever value is higher than current stock) and save the changes again.&lt;&#x2F;p&gt;

    
    













    


&lt;div class=&quot;image-container center&quot;&gt;
    &lt;img
            alt=&quot;An admin view for a product variant where Inventory is selected. It shows a new field with a label &amp;quot;app.ui.stock_limit&amp;quot; and its input field with a value of 10.&quot;
            src=&quot;update-stock-limit.png&quot;
            srcset=&quot;https:&amp;#x2F;&amp;#x2F;abjork.land&amp;#x2F;processed_images&amp;#x2F;update-stock-limit.6ca332c6916ad65c.webp 240w,
                        https:&amp;#x2F;&amp;#x2F;abjork.land&amp;#x2F;processed_images&amp;#x2F;update-stock-limit.7bf9f32050252f67.webp 400w,
                        https:&amp;#x2F;&amp;#x2F;abjork.land&amp;#x2F;processed_images&amp;#x2F;update-stock-limit.ba7a18392f5e8d8f.webp 600w&quot;
            sizes=&quot;(max-width: 240px) 200px,
                        (max-width: 400px) 360px,
                        600px&quot;
    &#x2F;&gt;
    &lt;div class=&quot;image-subtext&quot;&gt;&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;blockquote&gt;
&lt;p&gt;Notice our label “app.ui.stock_limit”? It’s not yet time, but soon we will update it to something speakable.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Next we will update the grid-view for product variants. In a similar fashion we find the template we want to override. Let’s create the file &lt;code&gt;.&#x2F;templates&#x2F;bundles&#x2F;SyliusAdminBundle&#x2F;ProductVariant&#x2F;Grid&#x2F;Field&#x2F;inventory.html.twig&lt;&#x2F;code&gt; and add this content:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;html&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-html &quot;&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span&gt;{% if data.isTracked %}
&lt;&#x2F;span&gt;&lt;span&gt;   &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;div &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;class&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;ui {{ (data.onHand - data.stockLimit) &amp;gt; 0 ? &amp;#39;green&amp;#39; : &amp;#39;red&amp;#39; }} icon label&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;       &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;class&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;cube icon&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;i&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;       &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;span &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;class&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;onHand&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;data-product-variant-id&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;{{ data.id }}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;gt;{{ data.onHand }}&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;span&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; {{ &amp;#39;sylius.ui.available_on_hand&amp;#39;|trans }}
&lt;&#x2F;span&gt;&lt;span&gt;       {% if data.onHold &amp;gt; 0 %}
&lt;&#x2F;span&gt;&lt;span&gt;           &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;div &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;class&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;detail&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;               &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;span &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;class&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;onHold&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;data-product-variant-id&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;{{ data.id }}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;gt;{{ data.onHold }}&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;span&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; {{ &amp;#39;sylius.ui.reserved&amp;#39;|trans }}
&lt;&#x2F;span&gt;&lt;span&gt;           &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;div&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;       {% endif %}
&lt;&#x2F;span&gt;&lt;span&gt;       {% if data.stockLimit &amp;gt; 0 %}
&lt;&#x2F;span&gt;&lt;span&gt;           &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;div &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;class&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;detail&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;               &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;span &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;class&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;onHold&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;data-product-variant-id&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;{{ data.id }}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;gt;{{ data.stockLimit }}&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;span&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; {{ &amp;#39;app.ui.stock_limit&amp;#39;|trans }}
&lt;&#x2F;span&gt;&lt;span&gt;           &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;div&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;       {% endif %}
&lt;&#x2F;span&gt;&lt;span&gt;   &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;div&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;{% else %}
&lt;&#x2F;span&gt;&lt;span&gt;   &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;span &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;class&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;ui red label&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;       &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;class&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;remove icon&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;i&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;       {{ &amp;#39;sylius.ui.not_tracked&amp;#39;|trans }}
&lt;&#x2F;span&gt;&lt;span&gt;   &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;span&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;{% endif %}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The Sylius grid-system will pass in a &lt;code&gt;data&lt;&#x2F;code&gt; twig object to the form. In this case it will be an instance of a ProductVariant. So we can access its fields by using &lt;code&gt;data.stockLimit&lt;&#x2F;code&gt;. With this template we will change the color from green to red if a tracked inventory has less items on hand than the limit.&lt;&#x2F;p&gt;
&lt;p&gt;This will be the result:&lt;&#x2F;p&gt;

    
    













    


&lt;div class=&quot;image-container center&quot;&gt;
    &lt;img
            alt=&quot;An admin view for a list of product variants. It shows Inventory column with 9 available on hand, and 10 &amp;quot;app.ui.stock_limit&amp;quot;. It is coloured red to indicate that it is unavailable.&quot;
            src=&quot;updated-variants-view.png&quot;
            srcset=&quot;https:&amp;#x2F;&amp;#x2F;abjork.land&amp;#x2F;processed_images&amp;#x2F;updated-variants-view.2cb5bab22ff998fa.webp 240w,
                        https:&amp;#x2F;&amp;#x2F;abjork.land&amp;#x2F;processed_images&amp;#x2F;updated-variants-view.d443263321610865.webp 400w,
                        https:&amp;#x2F;&amp;#x2F;abjork.land&amp;#x2F;processed_images&amp;#x2F;updated-variants-view.fb9a915c78f63e17.webp 600w&quot;
            sizes=&quot;(max-width: 240px) 200px,
                        (max-width: 400px) 360px,
                        600px&quot;
    &#x2F;&gt;
    &lt;div class=&quot;image-subtext&quot;&gt;&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;This is just cosmetic still but we will add a validation for it later. But now to translation!&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Add translation for &lt;em&gt;app.ui.stock_limit&lt;&#x2F;em&gt;&lt;&#x2F;strong&gt;&lt;br &#x2F;&gt;
As a Symfony project, we will use the same translation system as we can find at other places in the Symfony-world. We will create a new file for English translations &lt;code&gt;.&#x2F;translations&#x2F;messages.en.yaml&lt;&#x2F;code&gt; and add the translation:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;yaml&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-yaml &quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;app&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ui&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;       &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;stock_limit&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Stock Limit
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We can reload the page and find that &lt;code&gt;app.ui.stock_limit&lt;&#x2F;code&gt; is replaced with &lt;code&gt;Stock Limit&lt;&#x2F;code&gt;!&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Sometimes it is required to clear the cache with &lt;code&gt;php bin&#x2F;console cache:clear&lt;&#x2F;code&gt; for translations to show.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;




&lt;div class=&quot;quote mb-4&quot;&gt;
    &lt;cite&gt;
        &lt;p&gt;One language sets you in a corridor for life. Two languages open every door along the way. Three languages make you a target for Vogon poetry.&lt;&#x2F;p&gt;

    &lt;&#x2F;cite&gt;
    
&lt;&#x2F;div&gt;






    



    
        
        
    
    

    
    
    
    
    &lt;div class=&quot;image-container center&quot;&gt;
        &lt;img
                alt=&quot;An alien, looking like a Vogon reading poetry for an unwilling listener.&quot;
                src=&quot;vogan-poem.jpeg&quot;
                srcset=&quot;https:&amp;#x2F;&amp;#x2F;abjork.land&amp;#x2F;processed_images&amp;#x2F;vogan-poem.fe1383a4c11edc41.webp 240w,
                            https:&amp;#x2F;&amp;#x2F;abjork.land&amp;#x2F;processed_images&amp;#x2F;vogan-poem.fe4cae634588525c.webp 400w,
                            https:&amp;#x2F;&amp;#x2F;abjork.land&amp;#x2F;processed_images&amp;#x2F;vogan-poem.6f39a4fa3a5d066b.webp 600w&quot;
                sizes=&quot;(max-width: 240px) 200px,
                            (max-width: 400px) 360px,
                            600px&quot;
        &#x2F;&gt;
        &lt;div class=&quot;image-subtext&quot;&gt;&lt;&#x2F;div&gt;
    &lt;&#x2F;div&gt;


&lt;h2 id=&quot;article-validate-stock&quot;&gt;Validating Stock Limit&lt;&#x2F;h2&gt;
An item will appear as available for purchase as long as one item is available. And if a customer were to add multiple items to their cart, Sylius will first validate that it has that many items available before allowing the customer that purchase. In the example for “office grey jeans” we have 9 items in stock. So when adding 10 of these we get an error. But it will allow us to add 1. We want it to stop that as well, if it hits the Stock Limit.







    



    
        
        
    
    

    
    
    
    
    &lt;div class=&quot;image-container center&quot;&gt;
        &lt;img
                alt=&quot;An alien, looking like a Vogon reading poetry for an unwilling listener.&quot;
                src=&quot;add-to-cart-limited.png&quot;
                srcset=&quot;https:&amp;#x2F;&amp;#x2F;abjork.land&amp;#x2F;processed_images&amp;#x2F;add-to-cart-limited.6625e8f38590a36e.webp 240w,
                            https:&amp;#x2F;&amp;#x2F;abjork.land&amp;#x2F;processed_images&amp;#x2F;add-to-cart-limited.5286fae65f4204a8.webp 400w,
                            https:&amp;#x2F;&amp;#x2F;abjork.land&amp;#x2F;processed_images&amp;#x2F;add-to-cart-limited.242ba321a7d1b00a.webp 600w&quot;
                sizes=&quot;(max-width: 240px) 200px,
                            (max-width: 400px) 360px,
                            600px&quot;
        &#x2F;&gt;
        &lt;div class=&quot;image-subtext&quot;&gt;&lt;&#x2F;div&gt;
    &lt;&#x2F;div&gt;


&lt;p&gt;What we need is to enhance the default behaviour. We want to add a feature so it checks not only if the number of items in stock reaches 0, we want it to check if it reaches the Stock Limit. &lt;&#x2F;p&gt;
&lt;p&gt;There is a very good design pattern for this. It is called &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Decorator_pattern&quot;&gt;Decorator pattern&lt;&#x2F;a&gt;. This allows us to use the already present class that handles the validation of stock and add new features to it. The service used for this is called &lt;code&gt;sylius.availability_checker.default&lt;&#x2F;code&gt;. It is alias for the class &lt;code&gt;Sylius\Component\Inventory\Checker\AvailabilityChecker&lt;&#x2F;code&gt; which uses an interface called &lt;code&gt;Sylius\Component\Inventory\Checker\AvailabilityCheckerInterface&lt;&#x2F;code&gt;. We will create a decorator for this, which will implement the &lt;code&gt;AvailabilityCheckerInterface&lt;&#x2F;code&gt; and take an instance of &lt;code&gt;AvailabilityChecker&lt;&#x2F;code&gt; in its constructor. This will let our decorator use the already present class when we want just the default behaviour, otherwise we will enhance it. Here is how.&lt;&#x2F;p&gt;
&lt;p&gt;We create a new file &lt;code&gt;.&#x2F;src&#x2F;Inventory&#x2F;AvailabilityCheckerDecorator.php&lt;&#x2F;code&gt; with this content:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;php&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-php &quot;&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span style=&quot;color:#ab7967;&quot;&gt;&amp;lt;?php
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;declare&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;strict_types&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;namespace &lt;&#x2F;span&gt;&lt;span&gt;App\Inventory;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;Sylius\Component\Inventory\Checker\&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;AvailabilityCheckerInterface&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;Sylius\Component\Inventory\Model\&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;StockableInterface&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;AvailabilityCheckerDecorator &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;implements &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;AvailabilityCheckerInterface
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;public function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;__construct&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;       &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;private AvailabilityCheckerInterface &lt;&#x2F;span&gt;&lt;span&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;availabilityChecker
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;   ){}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;public function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;isStockAvailable&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;StockableInterface &lt;&#x2F;span&gt;&lt;span&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;stockable&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;bool
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;   {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;       &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;isStockSufficient&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;stockable&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;   }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;public function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;isStockSufficient&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;StockableInterface &lt;&#x2F;span&gt;&lt;span&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;stockable&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;quantity&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;bool
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;   {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;       &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;stockable&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;isTracked&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;() &lt;&#x2F;span&gt;&lt;span&gt;&amp;amp;&amp;amp; $&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;stockable &lt;&#x2F;span&gt;&lt;span&gt;instanceof &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;StockLimitInterface&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;           &lt;&#x2F;span&gt;&lt;span&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;currentStock &lt;&#x2F;span&gt;&lt;span&gt;= $&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;stockable&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;getOnHand&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;() &lt;&#x2F;span&gt;&lt;span&gt;- $&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;stockable&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;getOnHold&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;();
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;           &lt;&#x2F;span&gt;&lt;span&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;availableStock &lt;&#x2F;span&gt;&lt;span&gt;= $&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;currentStock &lt;&#x2F;span&gt;&lt;span&gt;- $&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;stockable&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;getStockLimit&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;();
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;           &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;quantity &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;= $&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;availableStock&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;       }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;       &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;availabilityChecker&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;isStockSufficient&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;stockable&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;quantity&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;   }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We see that we have two methods in this decorator. The first method is a simple availability check. It determines if at least 1 item is available. But instead of letting the default &lt;code&gt;AvailabilityChecker&lt;&#x2F;code&gt; handle it, we pass it to our second method; &lt;code&gt;isStockSufficient&lt;&#x2F;code&gt;. We add our logic to check that the Stock Limit is not surpassed if the item has implemented the &lt;code&gt;StockLimitInterface&lt;&#x2F;code&gt;. &lt;&#x2F;p&gt;
&lt;p&gt;To wire a decorator in a Symfony project (which Sylius is), is by defining it in our &lt;em&gt;services.yaml&lt;&#x2F;em&gt; and use an &lt;code&gt;@.inner&lt;&#x2F;code&gt;-argument, which will pass the decorated class to our decorator. Add the following decorator definition to &lt;code&gt;.&#x2F;config&#x2F;services.yaml&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;yaml&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-yaml &quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;App\Inventory\AvailabilityCheckerDecorator&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;decorates&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;sylius.availability_checker.default
&lt;&#x2F;span&gt;&lt;span&gt;     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;arguments&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;         - &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;@.inner&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;If we now were to try to add 1 item of “office grey jeans” we will get the same message as when we tried to add 10! &lt;&#x2F;p&gt;
&lt;p&gt;Sylius may not have a Stock Limit feature built-in, but that’s okay. We can bend it, tweak it, and make it do what we want. That’s why we love Sylius. It’s not just an eCommerce platform, it’s an eCommerce playground. And we are having fun playing with it and becoming eCommerce masters.&lt;&#x2F;p&gt;







    



    
        
        
    
    

    
    
    
    
    &lt;div class=&quot;image-container center&quot;&gt;
        &lt;img
                alt=&quot;An alien, looking like a Vogon reading poetry for an unwilling listener.&quot;
                src=&quot;king-swan.jpeg&quot;
                srcset=&quot;https:&amp;#x2F;&amp;#x2F;abjork.land&amp;#x2F;processed_images&amp;#x2F;king-swan.2c331a78e88ba28b.webp 240w,
                            https:&amp;#x2F;&amp;#x2F;abjork.land&amp;#x2F;processed_images&amp;#x2F;king-swan.801074af7c107380.webp 400w,
                            https:&amp;#x2F;&amp;#x2F;abjork.land&amp;#x2F;processed_images&amp;#x2F;king-swan.122bbea1dd32eab6.webp 600w&quot;
                sizes=&quot;(max-width: 240px) 200px,
                            (max-width: 400px) 360px,
                            600px&quot;
        &#x2F;&gt;
        &lt;div class=&quot;image-subtext&quot;&gt;&lt;&#x2F;div&gt;
    &lt;&#x2F;div&gt;


  </content>
    </entry>
    <entry xml:lang="en">
        <title>Retro Markdown Editor</title>
        <published>2023-03-30T00:00:00+00:00</published>
        <updated>2023-03-30T00:00:00+00:00</updated>
        <author>
          <name>Anders Björkland</name>
        </author>
        <link rel="alternate" href="https://abjork.land/showroom/retro-md/" type="text/html"/>
        <id>https://abjork.land/showroom/retro-md/</id>
        <content type="html">&lt;div class=&quot;article-header&quot;&gt;
    










&lt;img
        alt=&quot;133&quot;
        src=&quot;https:&amp;#x2F;&amp;#x2F;abjork.land&amp;#x2F;processed_images&amp;#x2F;meta-hero.0cce5fcdf085e624.png&quot;
        srcset=&quot;https:&amp;#x2F;&amp;#x2F;abjork.land&amp;#x2F;processed_images&amp;#x2F;meta-hero.770d2a3094e69bef.png 240w,
                    https:&amp;#x2F;&amp;#x2F;abjork.land&amp;#x2F;processed_images&amp;#x2F;meta-hero.0cce5fcdf085e624.png 400w,
                    https:&amp;#x2F;&amp;#x2F;abjork.land&amp;#x2F;processed_images&amp;#x2F;meta-hero.6b71646bd2dc1e89.png 600w&quot;
        sizes=&quot;(max-width: 240px) 200px,
                    (max-width: 400px) 360px,
                    600px&quot;
&#x2F;&gt;


    &lt;div class=&quot;text-content&quot;&gt;
        &lt;h1 class=&quot;article-title&quot;&gt;
            &lt;div class=&quot;title&quot;&gt;Retro Markdown Editor&lt;&#x2F;div&gt;
            
        &lt;&#x2F;h1&gt;
    &lt;&#x2F;div&gt;
    

 

 

&lt;div class=&quot;tag-list absolute&quot;&gt;
    
&lt;&#x2F;div&gt;



&lt;&#x2F;div&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;retro-markdown.netlify.app&#x2F;&quot;&gt;Retro Markdown&lt;&#x2F;a&gt; is a retro-inspired markdown editor with live preview. 
The source of inspiration is the Amos-editor on Amiga.&lt;&#x2F;p&gt;
&lt;p&gt;The project is a React app with state management handled by Redux.
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;andersbjorkland&#x2F;retro-md&#x2F;&quot;&gt;The source code is available for viewing on GitHub&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>Sylius Showcase Docker Image</title>
        <published>2023-03-30T00:00:00+00:00</published>
        <updated>2023-03-30T00:00:00+00:00</updated>
        <author>
          <name>Anders Björkland</name>
        </author>
        <link rel="alternate" href="https://abjork.land/showroom/sylius-showcase/" type="text/html"/>
        <id>https://abjork.land/showroom/sylius-showcase/</id>
        <content type="html">&lt;div class=&quot;article-header&quot;&gt;
    










&lt;img
        alt=&quot;133&quot;
        src=&quot;https:&amp;#x2F;&amp;#x2F;abjork.land&amp;#x2F;processed_images&amp;#x2F;hero.493610fbcb47c8c9.jpg&quot;
        srcset=&quot;https:&amp;#x2F;&amp;#x2F;abjork.land&amp;#x2F;processed_images&amp;#x2F;hero.683c1eb9f979b551.jpg 240w,
                    https:&amp;#x2F;&amp;#x2F;abjork.land&amp;#x2F;processed_images&amp;#x2F;hero.493610fbcb47c8c9.jpg 400w,
                    https:&amp;#x2F;&amp;#x2F;abjork.land&amp;#x2F;processed_images&amp;#x2F;hero.474857bd412a51fb.jpg 600w&quot;
        sizes=&quot;(max-width: 240px) 200px,
                    (max-width: 400px) 360px,
                    600px&quot;
&#x2F;&gt;


    &lt;div class=&quot;text-content&quot;&gt;
        &lt;h1 class=&quot;article-title&quot;&gt;
            &lt;div class=&quot;title&quot;&gt;Sylius Showcase Docker Image&lt;&#x2F;div&gt;
            
        &lt;&#x2F;h1&gt;
    &lt;&#x2F;div&gt;
    

 

 

&lt;div class=&quot;tag-list absolute&quot;&gt;
    
&lt;&#x2F;div&gt;



&lt;&#x2F;div&gt;
&lt;p&gt;A Docker Image built with ease of use in mind, to easily set up a showcase should the need arise.
The image uses supervisord to run the following services:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;PHP-FPM&lt;&#x2F;li&gt;
&lt;li&gt;Nginx&lt;&#x2F;li&gt;
&lt;li&gt;MariaDB&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;The image showcases the Sylius example shop and allows for loading its fixtures for example content. 
Check the image out on &lt;a href=&quot;https:&#x2F;&#x2F;hub.docker.com&#x2F;r&#x2F;abjorkland&#x2F;sylius-showcase&quot;&gt;Docker Hub&lt;&#x2F;a&gt; &lt;&#x2F;p&gt;
&lt;div class=&quot;layout-row center&quot;&gt;
    &lt;iframe
            width=&quot;560&quot;
            height=&quot;315&quot;
            src=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;embed&#x2F;kSjYe0zhnrQ&quot;
            title=&quot;YouTube video player&quot;
            frameborder=&quot;0&quot;
            allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share&quot;
            allowfullscreen
    &gt;&lt;&#x2F;iframe&gt;
&lt;&#x2F;div&gt;</content>
    </entry>
    <entry xml:lang="en">
        <title>Discovering the Elixir programming language</title>
        <published>2023-03-29T00:00:00+00:00</published>
        <updated>2024-03-28T00:00:00+00:00</updated>
        <author>
          <name>Anders Björkland</name>
        </author>
        <link rel="alternate" href="https://abjork.land/articles/exploration/discovering-elixir/" type="text/html"/>
        <id>https://abjork.land/articles/exploration/discovering-elixir/</id>
        <content type="html">&lt;div class=&quot;article-header&quot;&gt;
    










&lt;img
        alt=&quot;133&quot;
        src=&quot;https:&amp;#x2F;&amp;#x2F;abjork.land&amp;#x2F;processed_images&amp;#x2F;hero.072f529ca9d7e4ba.png&quot;
        srcset=&quot;https:&amp;#x2F;&amp;#x2F;abjork.land&amp;#x2F;processed_images&amp;#x2F;hero.90abc3a22c01bd40.png 240w,
                    https:&amp;#x2F;&amp;#x2F;abjork.land&amp;#x2F;processed_images&amp;#x2F;hero.072f529ca9d7e4ba.png 400w,
                    https:&amp;#x2F;&amp;#x2F;abjork.land&amp;#x2F;processed_images&amp;#x2F;hero.5552db772dc76c9d.png 600w&quot;
        sizes=&quot;(max-width: 240px) 200px,
                    (max-width: 400px) 360px,
                    600px&quot;
&#x2F;&gt;


    &lt;div class=&quot;text-content&quot;&gt;
        &lt;h1 class=&quot;article-title&quot;&gt;
            &lt;div class=&quot;title&quot;&gt;Discovering the Elixir programming language&lt;&#x2F;div&gt;
            
        &lt;&#x2F;h1&gt;
    &lt;&#x2F;div&gt;
    

 

 

&lt;div class=&quot;tag-list absolute&quot;&gt;
    
        
        &lt;div&gt;&lt;a href=&quot;https:&#x2F;&#x2F;abjork.land&#x2F;tags&#x2F;elixir&#x2F;&quot; class=&quot;hover-bold&quot;&gt;elixir&lt;&#x2F;a&gt;&lt;&#x2F;div&gt;
        
        &lt;div&gt;&lt;a href=&quot;https:&#x2F;&#x2F;abjork.land&#x2F;tags&#x2F;phoenix&#x2F;&quot; class=&quot;hover-bold&quot;&gt;phoenix&lt;&#x2F;a&gt;&lt;&#x2F;div&gt;
        
    
&lt;&#x2F;div&gt;



&lt;&#x2F;div&gt;
&lt;p&gt;Elixir is an exciting programming language to learn. Especially coming from an Object Oriented Programming (OOP) background. 
There is so much to discover, because for many, it has flown under the radar. Just look at this chart!&lt;br &#x2F;&gt;


    


&lt;div class=&quot;quote &quot;&gt;
    &lt;cite&gt;
        &lt;p&gt;Look at it 👇&lt;&#x2F;p&gt;

    &lt;&#x2F;cite&gt;
    
&lt;&#x2F;div&gt;

&lt;div class=&quot;layout-row center&quot;&gt;
    &lt;p&gt;(&lt;em&gt;ignore the cats&lt;&#x2F;em&gt;)&lt;&#x2F;p&gt;

&lt;&#x2F;div&gt;







    



    
        
        
    
    

    
    
    
    
    &lt;div class=&quot;image-container center&quot;&gt;
        &lt;img
                alt=&quot;Two charts, where one is clearly higher than the other.&quot;
                src=&quot;cute-cats-chart.jpeg&quot;
                srcset=&quot;https:&amp;#x2F;&amp;#x2F;abjork.land&amp;#x2F;processed_images&amp;#x2F;cute-cats-chart.0cf6bf35edc06f22.webp 240w,
                            https:&amp;#x2F;&amp;#x2F;abjork.land&amp;#x2F;processed_images&amp;#x2F;cute-cats-chart.db0b040b46682b14.webp 400w,
                            https:&amp;#x2F;&amp;#x2F;abjork.land&amp;#x2F;processed_images&amp;#x2F;cute-cats-chart.052e34af20870951.webp 600w&quot;
                sizes=&quot;(max-width: 240px) 200px,
                            (max-width: 400px) 360px,
                            600px&quot;
        &#x2F;&gt;
        &lt;div class=&quot;image-subtext&quot;&gt;&lt;&#x2F;div&gt;
    &lt;&#x2F;div&gt;


&lt;&#x2F;p&gt;
&lt;p&gt;While OOP is a popular thing, functional programming is growing in usage and being used in more contexts. While some 
languages allows for many approaches, Elixir locks you into its functional approach. We won&#x27;t see any classes or loops,
and we will soon find out why!&lt;&#x2F;p&gt;
&lt;p&gt;Today we will explore some basic structures of the language by building a &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Fibonacci_sequence&quot;&gt;Fibonacci sequence&lt;&#x2F;a&gt;
function and a few tests for it. But before we do. A quick run-down of the Fibonacci Sequence. It follows a principle of 
every number being the sum of the one just before and the one before that. To start off, it is stipulated that the first 
and second number are 1. This means that the third number is (1 + 1) = 2. The fourth will be (2 + 1) = 3. So the first 
7 numbers will be: &lt;code&gt;1 1 2 3 5 8 13&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;


    


&lt;div class=&quot;quote &quot;&gt;
    &lt;cite&gt;
        &lt;p&gt;Let&#x27;s &lt;em&gt;&lt;strong&gt;purr&lt;&#x2F;strong&gt;&lt;&#x2F;em&gt; some Elixir&lt;&#x2F;p&gt;

    &lt;&#x2F;cite&gt;
    
&lt;&#x2F;div&gt;






    



    
        
        
    
    

    
    
    
    
    &lt;div class=&quot;image-container center&quot;&gt;
        &lt;img
                alt=&quot;A cat in a lab coat is pouring a liquid out of a beaker.&quot;
                src=&quot;cat-pouring.jpeg&quot;
                srcset=&quot;https:&amp;#x2F;&amp;#x2F;abjork.land&amp;#x2F;processed_images&amp;#x2F;cat-pouring.fc11cd94ead8bda3.webp 240w,
                            https:&amp;#x2F;&amp;#x2F;abjork.land&amp;#x2F;processed_images&amp;#x2F;cat-pouring.ddf85dfd85303766.webp 400w,
                            https:&amp;#x2F;&amp;#x2F;abjork.land&amp;#x2F;processed_images&amp;#x2F;cat-pouring.b1bc23df413d1a5b.webp 600w&quot;
                sizes=&quot;(max-width: 240px) 200px,
                            (max-width: 400px) 360px,
                            600px&quot;
        &#x2F;&gt;
        &lt;div class=&quot;image-subtext&quot;&gt;&lt;&#x2F;div&gt;
    &lt;&#x2F;div&gt;


&lt;p&gt;We create a new file called &lt;code&gt;fibonacci.ex&lt;&#x2F;code&gt; and define a module called &lt;code&gt;Fibonacci&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;elixir&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-elixir &quot;&gt;&lt;code class=&quot;language-elixir&quot; data-lang=&quot;elixir&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;defmodule &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Fibonacci &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;do
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;fib&lt;&#x2F;span&gt;&lt;span&gt;(n) when &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;is_integer&lt;&#x2F;span&gt;&lt;span&gt;(n) and n &amp;gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;do
&lt;&#x2F;span&gt;&lt;span&gt;    fib_helper(n)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;defp &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;fib_helper&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;do: 0
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;defp &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;fib_helper&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;do: 1
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;defp &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;fib_helper&lt;&#x2F;span&gt;&lt;span&gt;(n), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;do:&lt;&#x2F;span&gt;&lt;span&gt; fib_helper(n - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;) + fib_helper(n - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The Module contains a function called &lt;code&gt;fib&lt;&#x2F;code&gt; with a &lt;a href=&quot;https:&#x2F;&#x2F;elixirschool.com&#x2F;en&#x2F;lessons&#x2F;basics&#x2F;functions#guards-6&quot;&gt;guard&lt;&#x2F;a&gt; 
defined for it. This means that the function will only be run on arguments that are positive integers. Inside the 
function is another function-call. We make use of a function called &lt;code&gt;fib_helper&lt;&#x2F;code&gt;. This function has 3 definitions;&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;One is matching an argument that is 0 and returns 0.&lt;&#x2F;li&gt;
&lt;li&gt;One is matching an argument that is 1 and returns 1.&lt;&#x2F;li&gt;
&lt;li&gt;One is the Fibonacci sequence logic all wrapped up in recursion.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;When we pass it 3, we will match with the third fib_helper, it will first call, fib_helper(2) + fib_helper(1). 
The first function call will again match the 3rd definition, so recursion, and the second function call will match the 
2nd definition. It will continue to do recursive calls until it does not call itself again. Such as is the case for the 
calls that match either the first or the second definition of &lt;code&gt;fib_helper&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;A fun detail about &lt;code&gt;fib_helper&lt;&#x2F;code&gt; is that it is private within the module. We can make functions private by using &lt;code&gt;defp&lt;&#x2F;code&gt;
instead of &lt;code&gt;def&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;An even more fun (as in fundamental) detail is how Elixir just returns values from our functions without us having to 
tell it to do so.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;


    


&lt;div class=&quot;quote &quot;&gt;
    &lt;cite&gt;
        &lt;p&gt;If you don&#x27;t like recursions, you gonna have a bad time&lt;&#x2F;p&gt;

    &lt;&#x2F;cite&gt;
    
&lt;&#x2F;div&gt;






    



    
        
        
    
    

    
    
    
    
    &lt;div class=&quot;image-container center&quot;&gt;
        &lt;img
                alt=&quot;A cat in a lab coat is pouring a liquid out of a beaker.&quot;
                src=&quot;cat-falling.jpeg&quot;
                srcset=&quot;https:&amp;#x2F;&amp;#x2F;abjork.land&amp;#x2F;processed_images&amp;#x2F;cat-falling.a8dc7fb87d48936c.webp 240w,
                            https:&amp;#x2F;&amp;#x2F;abjork.land&amp;#x2F;processed_images&amp;#x2F;cat-falling.fe35476c3a1c11e8.webp 400w,
                            https:&amp;#x2F;&amp;#x2F;abjork.land&amp;#x2F;processed_images&amp;#x2F;cat-falling.32a6f8a921adc492.webp 600w&quot;
                sizes=&quot;(max-width: 240px) 200px,
                            (max-width: 400px) 360px,
                            600px&quot;
        &#x2F;&gt;
        &lt;div class=&quot;image-subtext&quot;&gt;&lt;&#x2F;div&gt;
    &lt;&#x2F;div&gt;


&lt;p&gt;To run our function we can run &lt;code&gt;iex&lt;&#x2F;code&gt; from the terminal where the files are located. This will open up the interactive 
Elixir interface, or a &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Read%E2%80%93eval%E2%80%93print_loop&quot;&gt;REPL&lt;&#x2F;a&gt;. From this we will 
compile our file: &lt;code&gt;c(&amp;quot;fibonacci.ex&amp;quot;)&lt;&#x2F;code&gt;. This will compile the module for us so we can call the &lt;code&gt;fib&lt;&#x2F;code&gt; function on it.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;zsh&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-zsh &quot;&gt;&lt;code class=&quot;language-zsh&quot; data-lang=&quot;zsh&quot;&gt;&lt;span&gt; 
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;iex&lt;&#x2F;span&gt;&lt;span&gt;(1)&amp;gt; c(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;fibonacci.ex&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;[Fibonacci]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;iex&lt;&#x2F;span&gt;&lt;span&gt;(2)&amp;gt; Fibonacci.fib(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;5
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;iex&lt;&#x2F;span&gt;&lt;span&gt;(3)&amp;gt; Fibonacci.fib(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;7&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;13
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;How do we know that our function really works correctly? Usually we would write tests. While many programming languages has excellent 
unit testing frameworks available to them as third party libraries, this is not necessary in Elixir. &lt;strong&gt;Because every 
line of code in Elixir is perfect!&lt;&#x2F;strong&gt; Well, mine are. As long as I keep the number of lines to &lt;strong&gt;0&lt;&#x2F;strong&gt;. &lt;&#x2F;p&gt;
&lt;p&gt;Well, if we do really want tests (and we do), we have a built-in testing-tool called 
&lt;a href=&quot;https:&#x2F;&#x2F;hexdocs.pm&#x2F;ex_unit&#x2F;ExUnit.html&quot;&gt;ExUnit&lt;&#x2F;a&gt;. This means we can start writing tests just by starting a new file. 
Let&#x27;s create &lt;code&gt;fibonacci_test.exs&lt;&#x2F;code&gt;. It will start the ExUnit testing application and make some assertions with the help 
of a module called &lt;code&gt;ExUnit.Case&lt;&#x2F;code&gt;. This will make it possible for us to assert that we get the correct Fibonacci value 
for n-th position of the sequence.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;elixir&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-elixir &quot;&gt;&lt;code class=&quot;language-elixir&quot; data-lang=&quot;elixir&quot;&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Code&lt;&#x2F;span&gt;&lt;span&gt;.require_file(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;.&#x2F;fibonacci.ex&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;ExUnit&lt;&#x2F;span&gt;&lt;span&gt;.start()
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;defmodule &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;FibonacciTest &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;do
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;ExUnit&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Case
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  test &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;fibonacci of 0 is 0&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;do
&lt;&#x2F;span&gt;&lt;span&gt;    assert &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Fibonacci&lt;&#x2F;span&gt;&lt;span&gt;.fib(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;) == &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  test &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;fibonacci of 1 is 1&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;do
&lt;&#x2F;span&gt;&lt;span&gt;    assert &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Fibonacci&lt;&#x2F;span&gt;&lt;span&gt;.fib(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;) == &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  test &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;fibonacci of n is correct&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;do
&lt;&#x2F;span&gt;&lt;span&gt;    assert &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Fibonacci&lt;&#x2F;span&gt;&lt;span&gt;.fib(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span&gt;) == &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;55
&lt;&#x2F;span&gt;&lt;span&gt;    assert &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Fibonacci&lt;&#x2F;span&gt;&lt;span&gt;.fib(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;20&lt;&#x2F;span&gt;&lt;span&gt;) == &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;6765
&lt;&#x2F;span&gt;&lt;span&gt;    assert &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Fibonacci&lt;&#x2F;span&gt;&lt;span&gt;.fib(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;30&lt;&#x2F;span&gt;&lt;span&gt;) == &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;832040
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;span&gt;  
&lt;&#x2F;span&gt;&lt;span&gt;  test &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;fibonacci of float is not allowed&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;do
&lt;&#x2F;span&gt;&lt;span&gt;    catch_error &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Fibonacci&lt;&#x2F;span&gt;&lt;span&gt;.fib(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1.2&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  test &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;fibonacci of negative is not allowed&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;do
&lt;&#x2F;span&gt;&lt;span&gt;    catch_error &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Fibonacci&lt;&#x2F;span&gt;&lt;span&gt;.fib(-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;For the test file to be aware of the module we want to test, we first have to import the file. Next, we are starting the 
testing application in the file for it to be able to run the module&#x27;s test-cases. We define a few test-cases, just to 
see that we have defined the constraints for the sequence correctly, and that a few n-th positions returns correct values. &lt;&#x2F;p&gt;
&lt;p&gt;To run the test-file, we will run this in the terminal (not in &lt;em&gt;iex&lt;&#x2F;em&gt;):
&lt;code&gt;elixir fibonacci_test.exs&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Giving us the following output:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;zsh&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-zsh &quot;&gt;&lt;code class=&quot;language-zsh&quot; data-lang=&quot;zsh&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;.....
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Finished&lt;&#x2F;span&gt;&lt;span&gt; in 0.04 seconds (0.04s on load, 0.00s async, 0.00s sync)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt; tests, 0 failures
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;To dip a bit further into the Elixir pond, let&#x27;s create a function to return a list of all the values in a sequence up 
to a n-th number, but limit to maximum of 30 numbers. The test for it would look like this: &lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;elixir&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-elixir &quot;&gt;&lt;code class=&quot;language-elixir&quot; data-lang=&quot;elixir&quot;&gt;&lt;span&gt;  test &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;fibonacci sequence up to 8&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;do
&lt;&#x2F;span&gt;&lt;span&gt;    assert &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Fibonacci&lt;&#x2F;span&gt;&lt;span&gt;.seq(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;8&lt;&#x2F;span&gt;&lt;span&gt;) == [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;8&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;13&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;21&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;blockquote&gt;
&lt;p&gt;As a matter of the modern take on Fibonacci sequence, the 0-th number is included. &lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;We create the &lt;code&gt;seq&lt;&#x2F;code&gt; function in &lt;code&gt;fibonacci.ex&lt;&#x2F;code&gt;. It will make use of our already defined &lt;code&gt;fib&lt;&#x2F;code&gt; function. We will see some 
esoteric language, but we will be able to discern the meaning.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;elixir&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-elixir &quot;&gt;&lt;code class=&quot;language-elixir&quot; data-lang=&quot;elixir&quot;&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;seq&lt;&#x2F;span&gt;&lt;span&gt;(n) when &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;is_integer&lt;&#x2F;span&gt;&lt;span&gt;(n) and n &amp;gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span&gt;and n &amp;lt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;30 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;do
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Enum&lt;&#x2F;span&gt;&lt;span&gt;.map(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;..n, &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;fib&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We define the function &lt;code&gt;seq&lt;&#x2F;code&gt; to take an integer between (and including) 0 and 30. We then define a list of 
numbers from 0 up to the supplied number (&lt;code&gt;0..n&lt;&#x2F;code&gt;) and have a map-function (from &lt;code&gt;Enum&lt;&#x2F;code&gt;) to have a function 
applied for each number on the sequence (&lt;code&gt;&amp;amp;fib&#x2F;1&lt;&#x2F;code&gt;). Let&#x27;s unpack that series of characters a bit!&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;amp;&lt;&#x2F;code&gt; in this context means &lt;em&gt;(anonymous) function&lt;&#x2F;em&gt;. &lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;fib&#x2F;1&lt;&#x2F;code&gt; is the function with an 
&lt;a href=&quot;https:&#x2F;&#x2F;elixirschool.com&#x2F;en&#x2F;lessons&#x2F;basics&#x2F;functions&#x2F;#function-naming-and-arity-3&quot;&gt;arity of 1&lt;&#x2F;a&gt; - which means the 
function &lt;code&gt;fib&lt;&#x2F;code&gt; that takes 1 argument (no more or less)&lt;&#x2F;li&gt;
&lt;li&gt;Which means that &lt;code&gt;&amp;amp;fib&#x2F;1&lt;&#x2F;code&gt; is shorthand for writing &lt;code&gt;fn (n) -&amp;gt; fib n end&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;


    


&lt;div class=&quot;quote &quot;&gt;
    &lt;cite&gt;
        &lt;p&gt;Is that all it takes?&lt;&#x2F;p&gt;

    &lt;&#x2F;cite&gt;
    
&lt;&#x2F;div&gt;






    



    
        
        
    
    

    
    
    
    
    &lt;div class=&quot;image-container center&quot;&gt;
        &lt;img
                alt=&quot;Two cats looking up, a bit questioning.&quot;
                src=&quot;cat-puzzled.jpeg&quot;
                srcset=&quot;https:&amp;#x2F;&amp;#x2F;abjork.land&amp;#x2F;processed_images&amp;#x2F;cat-puzzled.874983017edfb2f5.webp 240w,
                            https:&amp;#x2F;&amp;#x2F;abjork.land&amp;#x2F;processed_images&amp;#x2F;cat-puzzled.5fc6b600441e7c91.webp 400w,
                            https:&amp;#x2F;&amp;#x2F;abjork.land&amp;#x2F;processed_images&amp;#x2F;cat-puzzled.093fbffab96394c7.webp 600w&quot;
                sizes=&quot;(max-width: 240px) 200px,
                            (max-width: 400px) 360px,
                            600px&quot;
        &#x2F;&gt;
        &lt;div class=&quot;image-subtext&quot;&gt;&lt;&#x2F;div&gt;
    &lt;&#x2F;div&gt;


&lt;p&gt;While this looks neat, let&#x27;s run the tests:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;zsh&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-zsh &quot;&gt;&lt;code class=&quot;language-zsh&quot; data-lang=&quot;zsh&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;elixir&lt;&#x2F;span&gt;&lt;span&gt; fibonacci_test.exs                                                                                                                                                                         
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;......
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Finished&lt;&#x2F;span&gt;&lt;span&gt; in 0.04 seconds (0.03s on load, 0.00s async, 0.01s sync)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;6&lt;&#x2F;span&gt;&lt;span&gt; tests, 0 failures
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;...and all was good!&lt;&#x2F;strong&gt;&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Let us now create a print function to print out each value in a sequence. We will see one &lt;em&gt;convoluted&lt;&#x2F;em&gt; way of doing it
and refine it later. What we will see is a &lt;a href=&quot;https:&#x2F;&#x2F;elixir-lang.org&#x2F;getting-started&#x2F;enumerables-and-streams.html#the-pipe-operator&quot;&gt;pipe operator&lt;&#x2F;a&gt; 
for passing the result of one function in to the other, &lt;a href=&quot;https:&#x2F;&#x2F;elixir-lang.org&#x2F;getting-started&#x2F;enumerables-and-streams.html#the-pipe-operator&quot;&gt;pattern matching&lt;&#x2F;a&gt; 
to unpack a list, the &lt;a href=&quot;https:&#x2F;&#x2F;elixir-lang.org&#x2F;getting-started&#x2F;case-cond-and-if.html#if-and-unless&quot;&gt;unless-condition&lt;&#x2F;a&gt; 
to check if a pattern match is not true and a perfectly good for-loop nowhere to be seen and in its place, &lt;strong&gt;recursion&lt;&#x2F;strong&gt;!&lt;&#x2F;p&gt;
&lt;p&gt;In the module &lt;code&gt;Fibonacci&lt;&#x2F;code&gt; (&lt;code&gt;fibonacci.ex&lt;&#x2F;code&gt;-file) we add these functions:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;elixir&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-elixir &quot;&gt;&lt;code class=&quot;language-elixir&quot; data-lang=&quot;elixir&quot;&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;print_seq&lt;&#x2F;span&gt;&lt;span&gt;(n) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;do
&lt;&#x2F;span&gt;&lt;span&gt;    seq(n) |&amp;gt; print_seq_helper
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;defp &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;print_seq_helper&lt;&#x2F;span&gt;&lt;span&gt;([head|tail]) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;do
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;IO&lt;&#x2F;span&gt;&lt;span&gt;.puts(head)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;unless &lt;&#x2F;span&gt;&lt;span&gt;[] == tail &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;do
&lt;&#x2F;span&gt;&lt;span&gt;      print_seq_helper(tail)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:ok
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The first function is the public facing function &lt;code&gt;print_seq&lt;&#x2F;code&gt;. This will take an argument and pass it to the &lt;code&gt;seq&lt;&#x2F;code&gt; function. 
With &lt;code&gt;n = 3&lt;&#x2F;code&gt; the &lt;code&gt;seq&lt;&#x2F;code&gt; function would return a list with the value &lt;code&gt;[0, 1, 2, 3]&lt;&#x2F;code&gt;. We &lt;strong&gt;pipe&lt;&#x2F;strong&gt; &lt;code&gt;|&amp;gt; &lt;&#x2F;code&gt; this to the next 
function; &lt;code&gt;print_seq_helper&lt;&#x2F;code&gt;. Something incredible happens when we do that. We will &lt;strong&gt;pattern match&lt;&#x2F;strong&gt;  the incoming 
argument and have the first element of the list signed onto &lt;code&gt;head&lt;&#x2F;code&gt; and keep the rest of the elements as a list in &lt;code&gt;tail&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;When we call &lt;code&gt;IO.puts(head)&lt;&#x2F;code&gt; it will print out the value that is currently in &lt;code&gt;head&lt;&#x2F;code&gt;. Next we check that the &lt;code&gt;tail&lt;&#x2F;code&gt; is 
not an empty list and again call &lt;code&gt;print_seq_helper&lt;&#x2F;code&gt; and let it take the next element in the list to the &lt;code&gt;head&lt;&#x2F;code&gt;. And so 
on it goes until the list is empty and a &amp;quot;simple&amp;quot; &lt;code&gt;:ok&lt;&#x2F;code&gt; is returned.&lt;&#x2F;p&gt;
&lt;p&gt;The &lt;code&gt;:ok&lt;&#x2F;code&gt; is called an 
&lt;a href=&quot;https:&#x2F;&#x2F;elixir-lang.org&#x2F;getting-started&#x2F;basic-types.html#atoms&quot;&gt;atom&lt;&#x2F;a&gt;. It is a constant that has the same value as it is 
named. The name can be most anything we want. We could return &lt;code&gt;:cat_in_a_hat&lt;&#x2F;code&gt; if we wanted to! &lt;&#x2F;p&gt;
&lt;p&gt;When we return to &lt;code&gt;iex&lt;&#x2F;code&gt; we can compile the latest changes and see what our output will be:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;zsh&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-zsh &quot;&gt;&lt;code class=&quot;language-zsh&quot; data-lang=&quot;zsh&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;iex&lt;&#x2F;span&gt;&lt;span&gt;(1)&amp;gt; c(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;fibonacci.ex&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;warning:&lt;&#x2F;span&gt;&lt;span&gt; redefining module Fibonacci (current version defined in memory)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;fibonacci.ex:1
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;[Fibonacci]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;iex&lt;&#x2F;span&gt;&lt;span&gt;(2)&amp;gt; Fibonacci.print_seq(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;8&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;0
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;2
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;3
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;5
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;8
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;13
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;21
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;:cat_in_a_hat
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;







    



    
        
        
    
    

    
    
    
    
    &lt;div class=&quot;image-container center&quot;&gt;
        &lt;img
                alt=&quot;A cat in a hat on top of a table with a few beakers surrounding it.&quot;
                src=&quot;cat-in-a-hat.jpeg&quot;
                srcset=&quot;https:&amp;#x2F;&amp;#x2F;abjork.land&amp;#x2F;processed_images&amp;#x2F;cat-in-a-hat.13cf91be1bb3dc19.webp 240w,
                            https:&amp;#x2F;&amp;#x2F;abjork.land&amp;#x2F;processed_images&amp;#x2F;cat-in-a-hat.e98eda4330b2eabe.webp 400w,
                            https:&amp;#x2F;&amp;#x2F;abjork.land&amp;#x2F;processed_images&amp;#x2F;cat-in-a-hat.cdbbc93023636d70.webp 600w&quot;
                sizes=&quot;(max-width: 240px) 200px,
                            (max-width: 400px) 360px,
                            600px&quot;
        &#x2F;&gt;
        &lt;div class=&quot;image-subtext&quot;&gt;&lt;&#x2F;div&gt;
    &lt;&#x2F;div&gt;


&lt;p&gt;Great! It&#x27;s just the way we wanted it. And we got a cat in a hat as well. But why no for loop to go through the list? 
The thing about Elixir is immutability. It just has a complete loathing of variables that are &lt;em&gt;&lt;strong&gt;variable&lt;&#x2F;strong&gt;&lt;&#x2F;em&gt;... anything 
that changes what they once have said they are. It rather have you trash your variable and replace it with a new than 
you were to change the value of the variable. A for-loop or a for-each-loop would have a variable hold the current 
iteration or element without replacing the variable. So a loop like this would constantly be changing the value of the 
loop variable. &lt;&#x2F;p&gt;
&lt;p&gt;With all of that now out of the way, how could we rewrite the print-function to be a bit more neat? How about this?!&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;elixir&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-elixir &quot;&gt;&lt;code class=&quot;language-elixir&quot; data-lang=&quot;elixir&quot;&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;print_seq&lt;&#x2F;span&gt;&lt;span&gt;(n) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;do
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Enum&lt;&#x2F;span&gt;&lt;span&gt;.each(seq(n), &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;IO&lt;&#x2F;span&gt;&lt;span&gt;.puts&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;No need for a helper-function and everything done in a single row. It looks very nice, and  it has a pretty good 
replacement for a for-each loop. The sad news though: we lost the &lt;code&gt;:cat_in_a_hat&lt;&#x2F;code&gt;, but it&#x27;s &lt;strong&gt;:ok&lt;&#x2F;strong&gt;!&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;zsh&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-zsh &quot;&gt;&lt;code class=&quot;language-zsh&quot; data-lang=&quot;zsh&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;iex&lt;&#x2F;span&gt;&lt;span&gt;(3)&amp;gt; r(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Fibonacci&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;warning:&lt;&#x2F;span&gt;&lt;span&gt; redefining module Fibonacci (current version defined in memory)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;fibonacci.ex:1
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;{:reloaded, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;Fibonacci&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;iex&lt;&#x2F;span&gt;&lt;span&gt;(4)&amp;gt; Fibonacci.print_seq(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;8&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;0
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;2
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;3
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;5
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;8
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;13
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;21
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;:ok
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;In this article, we have made some pretty astounding discoveries!&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;There are other programming languages out there beside [insert your favourite language here]&lt;&#x2F;li&gt;
&lt;li&gt;Functional programming is &lt;strong&gt;do-able&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;li&gt;For-loops are mutable, and mutations are loathed&lt;&#x2F;li&gt;
&lt;li&gt;Recursions everywhere!&lt;&#x2F;li&gt;
&lt;li&gt;Pattern matching can be used for unpacking values of a list&lt;&#x2F;li&gt;
&lt;li&gt;Functions can have guards&lt;&#x2F;li&gt;
&lt;li&gt;Arity is apparently a thing&lt;&#x2F;li&gt;
&lt;li&gt;Pipe operators gives this to that&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;fn&lt;&#x2F;code&gt; needs shortening to &lt;code&gt;&amp;amp;&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Tests are right there to be written, if you don&#x27;t write perfect code from line 0&lt;&#x2F;li&gt;
&lt;li&gt;The author of this article has a weird fixation to include cats in this article. It has nothing to do with Elixir, 
so why keep it going? Was it so he could have a cat_in_a_hat in the end? Or was it to end it with a pun? In either way,
Elixir looks &lt;strong&gt;purr&lt;&#x2F;strong&gt;fect!&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;







    



    
        
        
    
    

    
    
    
    
    &lt;div class=&quot;image-container center&quot;&gt;
        &lt;img
                alt=&quot;A happy cat in a top hat on top of a table holding up a vile with liquid in it. The cat, despite doing this, looks professional.&quot;
                src=&quot;happy-cat.jpeg&quot;
                srcset=&quot;https:&amp;#x2F;&amp;#x2F;abjork.land&amp;#x2F;processed_images&amp;#x2F;happy-cat.b4b575ef7388d6d6.webp 240w,
                            https:&amp;#x2F;&amp;#x2F;abjork.land&amp;#x2F;processed_images&amp;#x2F;happy-cat.f6f36f83b5f01b6e.webp 400w,
                            https:&amp;#x2F;&amp;#x2F;abjork.land&amp;#x2F;processed_images&amp;#x2F;happy-cat.74e253cd580364ee.webp 600w&quot;
                sizes=&quot;(max-width: 240px) 200px,
                            (max-width: 400px) 360px,
                            600px&quot;
        &#x2F;&gt;
        &lt;div class=&quot;image-subtext&quot;&gt;&lt;&#x2F;div&gt;
    &lt;&#x2F;div&gt;


</content>
    </entry>
    <entry xml:lang="en">
        <title>Discovering API Platform</title>
        <published>2023-03-27T00:00:00+00:00</published>
        <updated>2023-03-29T00:00:00+00:00</updated>
        <author>
          <name>Anders Björkland</name>
        </author>
        <link rel="alternate" href="https://abjork.land/articles/exploration/api-platform/" type="text/html"/>
        <id>https://abjork.land/articles/exploration/api-platform/</id>
        <content type="html">&lt;div class=&quot;article-header&quot;&gt;
    










&lt;img
        alt=&quot;133&quot;
        src=&quot;https:&amp;#x2F;&amp;#x2F;abjork.land&amp;#x2F;processed_images&amp;#x2F;hero.fdc4676c1de8a179.png&quot;
        srcset=&quot;https:&amp;#x2F;&amp;#x2F;abjork.land&amp;#x2F;processed_images&amp;#x2F;hero.496102a5a6f2550d.png 240w,
                    https:&amp;#x2F;&amp;#x2F;abjork.land&amp;#x2F;processed_images&amp;#x2F;hero.fdc4676c1de8a179.png 400w,
                    https:&amp;#x2F;&amp;#x2F;abjork.land&amp;#x2F;processed_images&amp;#x2F;hero.7e84ea726767b79a.png 600w&quot;
        sizes=&quot;(max-width: 240px) 200px,
                    (max-width: 400px) 360px,
                    600px&quot;
&#x2F;&gt;


    &lt;div class=&quot;text-content&quot;&gt;
        &lt;h1 class=&quot;article-title&quot;&gt;
            &lt;div class=&quot;title&quot;&gt;Discovering API Platform&lt;&#x2F;div&gt;
            
        &lt;&#x2F;h1&gt;
    &lt;&#x2F;div&gt;
    

 

 

&lt;div class=&quot;tag-list absolute&quot;&gt;
    
        
        &lt;div&gt;&lt;a href=&quot;https:&#x2F;&#x2F;abjork.land&#x2F;tags&#x2F;symfony&#x2F;&quot; class=&quot;hover-bold&quot;&gt;symfony&lt;&#x2F;a&gt;&lt;&#x2F;div&gt;
        
        &lt;div&gt;&lt;a href=&quot;https:&#x2F;&#x2F;abjork.land&#x2F;tags&#x2F;api-platform&#x2F;&quot; class=&quot;hover-bold&quot;&gt;api platform&lt;&#x2F;a&gt;&lt;&#x2F;div&gt;
        
    
&lt;&#x2F;div&gt;



&lt;&#x2F;div&gt;
&lt;p&gt;The story of API Platform is a story of standards. Some would say it is best-in-class API framework! 
It is a stand-alone library in the PHP flora, and is a popular pairing with Symfony projects. 
In this article we will discover what API Platform is, from initial setup to basic usage.
Let&#x27;s tickle some endpoints!&lt;&#x2F;p&gt;


    


&lt;div class=&quot;quote &quot;&gt;
    &lt;cite&gt;
        &lt;p&gt;REST is for data what SOAP is for dirt.&lt;&#x2F;p&gt;

    &lt;&#x2F;cite&gt;
    
    &lt;div&gt;&lt;p&gt;Dave Winer, pioneer of web services (including SOAP)&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
    
&lt;&#x2F;div&gt; 
&lt;p&gt;A RESTful API is the starting point for any API Framework project. 
While GraphQL may be related to REST the way that REST was to SOAP, RESTful API:s are still popular. And in fact,
API Platform supports both. So let&#x27;s get acquainted with this PHP library!&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-setup&quot;&gt;The setup&lt;&#x2F;h2&gt;
&lt;p&gt;We will leverage Symfony for building APIs. As API Platform is paired with Symfony the same way that wine and cheese is, 
this will be our starting point:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;composer create-project symfony&#x2F;skeleton:&amp;quot;6.2.*&amp;quot; apiplatform&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Symfony loves to make a developer&#x27;s life easy, something called &lt;code&gt;symfony&#x2F;flex&lt;&#x2F;code&gt; has been installed for us, so we can move 
in to the project directory (&lt;code&gt;cd apiplatform&lt;&#x2F;code&gt;) and install API Platform: &lt;code&gt;composer require api&lt;&#x2F;code&gt;. Not only will this 
install API Platform, it also adds some additional configurations such as exposing an api-route, such as &lt;code&gt;&#x2F;api&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Visiting the &lt;code&gt;api&lt;&#x2F;code&gt; route right now will display an OpenAPI (&lt;em&gt;swagger&lt;&#x2F;em&gt;) UI 👇&lt;&#x2F;p&gt;

    
    













    


&lt;div class=&quot;image-container center&quot;&gt;
    &lt;img
            alt=&quot;Swagger UI, but no resources available&quot;
            src=&quot;api-platform-0.jpeg&quot;
            srcset=&quot;https:&amp;#x2F;&amp;#x2F;abjork.land&amp;#x2F;processed_images&amp;#x2F;api-platform-0.d375a5e468755651.webp 240w,
                        https:&amp;#x2F;&amp;#x2F;abjork.land&amp;#x2F;processed_images&amp;#x2F;api-platform-0.f0f416398a939b69.webp 400w,
                        https:&amp;#x2F;&amp;#x2F;abjork.land&amp;#x2F;processed_images&amp;#x2F;api-platform-0.afd2d2ca38e12f03.webp 600w&quot;
            sizes=&quot;(max-width: 240px) 200px,
                        (max-width: 400px) 360px,
                        600px&quot;
    &#x2F;&gt;
    &lt;div class=&quot;image-subtext&quot;&gt;&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;

    


&lt;div class=&quot;quote &quot;&gt;
    &lt;cite&gt;
        &lt;p&gt;We don&#x27;t do this because it is easy, we do it because we thought it would be easy.&lt;&#x2F;p&gt;

    &lt;&#x2F;cite&gt;
    
&lt;&#x2F;div&gt;&lt;h2 id=&quot;adding-resources&quot;&gt;Adding resources&lt;&#x2F;h2&gt;
&lt;p&gt;Being a lazy developer, it is nice being spoiled by Symfony. We just saw that we have set up API Platform just by the virtue 
of having &lt;code&gt;symfony&#x2F;flex&lt;&#x2F;code&gt; handling setting up the configurations for us. We also saw that we do not have any resources or 
operations available in our API. So would it not be so very endearing to have another tool helping us out here? &lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Indeed&lt;&#x2F;strong&gt;, it would! It is called &lt;em&gt;maker-bundle&lt;&#x2F;em&gt; and it allows us to specify an entity, its fields, and if it should be available 
in our API. We install it with &lt;code&gt;symfony require maker&lt;&#x2F;code&gt; (again, &lt;code&gt;symfony&#x2F;flex&lt;&#x2F;code&gt; allows us to be so incredible lazy as not even 
typing out the whole package name).&lt;&#x2F;p&gt;
&lt;p&gt;Once it is installed, we will make use of it with &lt;code&gt;bin&#x2F;console make:entity&lt;&#x2F;code&gt; to create our first entity: a &lt;em&gt;cassette tape&lt;&#x2F;em&gt;.
It will be called &lt;code&gt;Cassette&lt;&#x2F;code&gt;, it will be exposed in the API, and it will have a single field to start with:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;apiplatform&lt;&#x2F;span&gt;&lt;span&gt; ➤ bin&#x2F;console make:entity
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Class&lt;&#x2F;span&gt;&lt;span&gt; name of the entity to create or update (e.g. AgreeableElephant)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; Cassette
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Mark&lt;&#x2F;span&gt;&lt;span&gt; this class as an API Platform resource (expose a CRUD API for it) (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;yes&#x2F;no&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;no&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; yes
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;created:&lt;&#x2F;span&gt;&lt;span&gt; src&#x2F;Entity&#x2F;Cassette.php
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;created:&lt;&#x2F;span&gt;&lt;span&gt; src&#x2F;Repository&#x2F;CassetteRepository.php
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Entity&lt;&#x2F;span&gt;&lt;span&gt; generated! Now lets add some fields!
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;You&lt;&#x2F;span&gt;&lt;span&gt; can always add more fields later manually or by re-running this command.
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;New&lt;&#x2F;span&gt;&lt;span&gt; property name (press &amp;lt;return&amp;gt; to stop adding fields)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; title
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Field&lt;&#x2F;span&gt;&lt;span&gt; type (enter ? to see all types) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;[string]:
&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Field&lt;&#x2F;span&gt;&lt;span&gt; length &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;255&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Can&lt;&#x2F;span&gt;&lt;span&gt; this field be null in the database (nullable) (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;yes&#x2F;no&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;no&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;updated:&lt;&#x2F;span&gt;&lt;span&gt; src&#x2F;Entity&#x2F;Cassette.php
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Add&lt;&#x2F;span&gt;&lt;span&gt; another property? Enter the property name (or press &amp;lt;return&amp;gt; to stop adding fields)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Success!
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Next:&lt;&#x2F;span&gt;&lt;span&gt; When you are ready, create a migration with php bin&#x2F;console make:migration
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We are about to start using a database. Our basic project comes with a Docker Compose setup configured to run a 
PostgreSQL database, so let&#x27;s get the container started: &lt;code&gt;docker-compose up -d&lt;&#x2F;code&gt; &lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Alternatively we can switch the database to a MariaDB from the comfort of the CLI:&lt;br &#x2F;&gt;
&lt;code&gt;bin&#x2F;console make:docker:database&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Our next task is to make a migration file. This will contain our Entity schema and will be available at &lt;code&gt;.&#x2F;migrations&#x2F;&lt;&#x2F;code&gt;. We create it with:&lt;br &#x2F;&gt;
&lt;code&gt;symfony php bin&#x2F;console make:migration&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;symfony&lt;&#x2F;code&gt; is a CLI-tool that in this context will infer docker environments for us, such as database connection details. Without it, you would get a &amp;quot;&lt;em&gt;connection refused&lt;&#x2F;em&gt;&amp;quot; error until you update your .env-file with the correct connection details.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Having a new migration-file, we will execute it by running &lt;code&gt;symfony php bin&#x2F;console doctrine:migrations:migrate&lt;&#x2F;code&gt;. If we revisit our &lt;code&gt;&#x2F;api&lt;&#x2F;code&gt; route, we will see that we have all the possible operations available to us that we might like. Maybe too many? 🤔&lt;&#x2F;p&gt;
&lt;p&gt;
    
    










    



    


&lt;div class=&quot;image-container &quot;&gt;
    &lt;img
            alt=&quot;Swagger UI with a cassette resource, and POST, GET, PUT, DELETE, PATCH operations available&quot;
            src=&quot;api-platform-cassette-1.jpeg&quot;
            srcset=&quot;https:&amp;#x2F;&amp;#x2F;abjork.land&amp;#x2F;processed_images&amp;#x2F;api-platform-cassette-1.770f7995b8d15af9.webp 240w,
                        https:&amp;#x2F;&amp;#x2F;abjork.land&amp;#x2F;processed_images&amp;#x2F;api-platform-cassette-1.376bfc902f034d42.webp 400w,
                        https:&amp;#x2F;&amp;#x2F;abjork.land&amp;#x2F;processed_images&amp;#x2F;api-platform-cassette-1.8b917b0d6563f910.webp 600w&quot;
            sizes=&quot;(max-width: 240px) 200px,
                        (max-width: 400px) 360px,
                        600px&quot;
    &#x2F;&gt;
    &lt;div class=&quot;image-subtext&quot;&gt;&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;&lt;br &#x2F;&gt;
&lt;em&gt;You might have noticed a spider in your API. Don&#x27;t worry, it&#x27;s just Webby.&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Either through an API client like Postman or from the comfort of the browser, API Platform is already allowing us to interact with our defined entity. And we haven&#x27;t written a line of code yet. Let&#x27;s give it a try! &lt;&#x2F;p&gt;



&lt;video width=&quot;600&quot; height=&quot;337&quot; muted controls&gt;
    &lt;source src=&quot;https:&amp;#x2F;&amp;#x2F;abjork.land&amp;#x2F;articles&amp;#x2F;exploration&amp;#x2F;api-platform&amp;#x2F;api-platform-create-cassette-1.webm&quot; type=&quot;video&amp;#x2F;webm&quot;&gt;
    
    Your browser does not support this video
&lt;&#x2F;video&gt;
&lt;p&gt;Now let&#x27;s imagine, this is just too much freedom for us. We rather not have all these options, or these &lt;em&gt;vocabularies&lt;&#x2F;em&gt; at our fingertips. Let&#x27;s say that we never ever want to replace a Cassette; &lt;strong&gt;PUT&lt;&#x2F;strong&gt; will not be in our API repertoire!&lt;&#x2F;p&gt;
&lt;p&gt;This is our current &lt;code&gt;Cassette&lt;&#x2F;code&gt; entity (previously generated by the &lt;code&gt;make:entity&lt;&#x2F;code&gt; command):&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;php&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-php &quot;&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span style=&quot;color:#ab7967;&quot;&gt;&amp;lt;?php
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;namespace &lt;&#x2F;span&gt;&lt;span&gt;App\Entity;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;ApiPlatform\Metadata\&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;ApiResource&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;App\Repository\&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;CassetteRepository&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;Doctrine\ORM\&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Mapping &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;ORM&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;#[ORM\Entity(repositoryClass: CassetteRepository::class)]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;#[ApiResource]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Cassette
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;#[ORM\Id]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;#[ORM\GeneratedValue]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;#[ORM\Column]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;private ?&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;id &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;#[ORM\Column(length: 255)]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;private ?&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;string &lt;&#x2F;span&gt;&lt;span&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;title &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;public function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;getId&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;?int
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;public function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;getTitle&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;?string
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;title&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;public function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;setTitle&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;string &lt;&#x2F;span&gt;&lt;span&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;title&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;self
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;title &lt;&#x2F;span&gt;&lt;span&gt;= $&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;title&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We see some metadata about this entity in the form of &lt;a href=&quot;https:&#x2F;&#x2F;www.php.net&#x2F;manual&#x2F;en&#x2F;language.attributes.overview.php&quot;&gt;PHP attributes&lt;&#x2F;a&gt;. We have ORM-mapping in the form of marking the class as an Entity along with which repository it should use. We also see that it is marked as an &lt;code&gt;ApiResource&lt;&#x2F;code&gt;. API Platform will infer all relevant fields to expose and the methods to interact with them. It really wants to help us. But how can we define that API Platform should not have a &lt;strong&gt;PUT&lt;&#x2F;strong&gt; request available for it?&lt;&#x2F;p&gt;
&lt;p&gt;By expanding the &lt;code&gt;ApiResource&lt;&#x2F;code&gt; attribute with an &lt;code&gt;operations&lt;&#x2F;code&gt; argument we can specify which requests we want to enable for the entity.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;php&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-php &quot;&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span style=&quot;color:#ab7967;&quot;&gt;&amp;lt;?php 
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;#[ApiResource(
&lt;&#x2F;span&gt;&lt;span&gt;    operations: [
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Get&lt;&#x2F;span&gt;&lt;span&gt;(),
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;GetCollection&lt;&#x2F;span&gt;&lt;span&gt;(),
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Post&lt;&#x2F;span&gt;&lt;span&gt;(),
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Delete&lt;&#x2F;span&gt;&lt;span&gt;(),
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Patch&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;    ]
&lt;&#x2F;span&gt;&lt;span&gt;)]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;These operations are brought from the &lt;code&gt;ApiPlatform\Metadata&lt;&#x2F;code&gt; namespace and correspond with each type of request we want to enable. We bring in all the operations here but for the &lt;strong&gt;PUT&lt;&#x2F;strong&gt; operation.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Most of these operations are straight forward, but they hint at something fundamental. There is something called Collection operations, so there are also something called Item operations. &lt;code&gt;Post&lt;&#x2F;code&gt; och &lt;code&gt;GetCollection&lt;&#x2F;code&gt; are collection operations. This means that they do not require any item identificator, which Item operations do. &lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;

    


&lt;div class=&quot;quote &quot;&gt;
    &lt;cite&gt;
        &lt;p&gt;No body puts &lt;strong&gt;PUT&lt;&#x2F;strong&gt; in a corner!&lt;&#x2F;p&gt;

    &lt;&#x2F;cite&gt;
    
&lt;&#x2F;div&gt;

    
    













    


&lt;div class=&quot;image-container center&quot;&gt;
    &lt;img
            alt=&quot;Swagger UI, but no resources available&quot;
            src=&quot;baby-in-a-corner.png&quot;
            srcset=&quot;https:&amp;#x2F;&amp;#x2F;abjork.land&amp;#x2F;processed_images&amp;#x2F;baby-in-a-corner.f06deb5b67f7f0dc.webp 240w,
                        https:&amp;#x2F;&amp;#x2F;abjork.land&amp;#x2F;processed_images&amp;#x2F;baby-in-a-corner.9a6de2f2c84b2aac.webp 400w,
                        https:&amp;#x2F;&amp;#x2F;abjork.land&amp;#x2F;processed_images&amp;#x2F;baby-in-a-corner.fba7fd250c1aacd5.webp 600w&quot;
            sizes=&quot;(max-width: 240px) 200px,
                        (max-width: 400px) 360px,
                        600px&quot;
    &#x2F;&gt;
    &lt;div class=&quot;image-subtext&quot;&gt;&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;&lt;&#x2F;p&gt;
&lt;p&gt;So a mixtape is not much without any songs. We will create an entity for this and create two collections on Cassette to relate to the songs. It will have a sideA collection of songs, and a sideB collection of songs. We will againg enjoy the ease that is the &lt;code&gt;bin&#x2F;console make:entity&lt;&#x2F;code&gt; command by adding the following fields:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;bin&#x2F;console make:entity Song&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;title&lt;&#x2F;em&gt; [&lt;code&gt;string&lt;&#x2F;code&gt;]&lt;&#x2F;li&gt;
&lt;li&gt;&lt;em&gt;artist&lt;&#x2F;em&gt; [&lt;code&gt;string&lt;&#x2F;code&gt;]&lt;&#x2F;li&gt;
&lt;li&gt;&lt;em&gt;duration&lt;&#x2F;em&gt; [&lt;code&gt;integer&lt;&#x2F;code&gt;] (duration in seconds)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;update database for the new entity:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;symfony php bin&#x2F;console make:entity&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;symfony php bin&#x2F;console doctrine:migrations:migrate&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;bin&#x2F;console make:entity Cassette&lt;&#x2F;code&gt; (allows us to update its fields): &lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;sideA&lt;&#x2F;em&gt; [&lt;code&gt;ManyToMany -&amp;gt; Song&lt;&#x2F;code&gt;, no corresponding field on &lt;code&gt;Song&lt;&#x2F;code&gt;]&lt;&#x2F;li&gt;
&lt;li&gt;&lt;em&gt;sideB&lt;&#x2F;em&gt; [&lt;code&gt;ManyToMany -&amp;gt; Song&lt;&#x2F;code&gt;, no corresponding field on &lt;code&gt;Song&lt;&#x2F;code&gt;]&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Modify the &lt;code&gt;ManyToMany&lt;&#x2F;code&gt; mapping on Cassette with &lt;code&gt;JoinTable&lt;&#x2F;code&gt; (&lt;em&gt;brought in from the &lt;code&gt;Doctrine\ORM\Mapping&lt;&#x2F;code&gt; namespace&lt;&#x2F;em&gt;):&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;php&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-php &quot;&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span&gt;    #[ORM\ManyToMany(targetEntity: Song::class)]
&lt;&#x2F;span&gt;&lt;span&gt;    #[JoinTable(name: &amp;#39;side_a_songs&amp;#39;)]
&lt;&#x2F;span&gt;&lt;span&gt;    private Collection $sideA;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    #[ORM\ManyToMany(targetEntity: Song::class)]
&lt;&#x2F;span&gt;&lt;span&gt;    #[JoinTable(name: &amp;#39;side_b_songs&amp;#39;)]
&lt;&#x2F;span&gt;&lt;span&gt;    private Collection $sideB;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;Update the new relations.
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;symfony php bin&#x2F;console make:entity&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;symfony php bin&#x2F;console doctrine:migrations:migrate&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;It may be that the new entity has not been marked as an ApiResource, to remedy that we will simply prepend the &lt;code&gt;Song&lt;&#x2F;code&gt; class with the &lt;code&gt;ApiResource&lt;&#x2F;code&gt; attribute. This will again expose all the operations we might want. So taking this opportunity to populate our database with some songs we can make a &lt;code&gt;POST&lt;&#x2F;code&gt; request to &lt;code&gt;https:&#x2F;&#x2F;localhost:8000&#x2F;api&#x2F;songs&lt;&#x2F;code&gt; (or whatever port you have your local server running at). May I suggest adding the following payload with the request:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;json&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-json &quot;&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;title&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Never Gonna Give You Up&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;artist&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Rick Astley&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;duration&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;214
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;After adding a few songs, we can fetch them at &lt;code&gt;https:&#x2F;&#x2F;localhost:8000&#x2F;api&#x2F;songs&lt;&#x2F;code&gt; with a &lt;code&gt;GET&lt;&#x2F;code&gt; request. It would return the following response:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;json&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-json &quot;&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;@context&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;api&#x2F;contexts&#x2F;Song&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;@id&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;api&#x2F;songs&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;@type&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;hydra:Collection&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;hydra:totalItems&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;hydra:member&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: [
&lt;&#x2F;span&gt;&lt;span&gt;    {
&lt;&#x2F;span&gt;&lt;span&gt;      &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;@id&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;api&#x2F;songs&#x2F;1&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;      &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;@type&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Song&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;      &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;      &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;title&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Never Gonna Give You Up&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;      &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;artist&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Rick Astley&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;      &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;duration&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;214
&lt;&#x2F;span&gt;&lt;span&gt;    },
&lt;&#x2F;span&gt;&lt;span&gt;    {
&lt;&#x2F;span&gt;&lt;span&gt;      &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;@id&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;api&#x2F;songs&#x2F;2&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;      &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;@type&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Song&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;      &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;      &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;title&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;If I Could Turn Back Time&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;      &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;artist&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Cher&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;      &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;duration&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;239
&lt;&#x2F;span&gt;&lt;span&gt;    },
&lt;&#x2F;span&gt;&lt;span&gt;    {
&lt;&#x2F;span&gt;&lt;span&gt;      &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;@id&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;api&#x2F;songs&#x2F;3&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;      &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;@type&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Song&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;      &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;      &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;title&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Walking On Sunshine&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;      &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;artist&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Katrina &amp;amp; The Waves&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;      &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;duration&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;239
&lt;&#x2F;span&gt;&lt;span&gt;    },
&lt;&#x2F;span&gt;&lt;span&gt;    {
&lt;&#x2F;span&gt;&lt;span&gt;      &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;@id&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;api&#x2F;songs&#x2F;4&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;      &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;@type&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Song&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;      &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;      &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;title&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Like a Virgin&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;      &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;artist&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Madonna&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;      &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;duration&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;219
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;  ]
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Perhaps we could improve the response for the songs so we could get duration in a minute:seconds format? We could do that by adding a dynamic field! As long as we use a language that API Platform understands, we won&#x27;t have to add any special configurations!&lt;&#x2F;p&gt;
&lt;p&gt;Add the following method to &lt;code&gt;App\Entity\Song&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;php&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-php &quot;&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span style=&quot;color:#ab7967;&quot;&gt;&amp;lt;?php
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;public function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;getFormattedDuration&lt;&#x2F;span&gt;&lt;span&gt;(): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;?string
&lt;&#x2F;span&gt;&lt;span&gt;    {
&lt;&#x2F;span&gt;&lt;span&gt;        $&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;duration &lt;&#x2F;span&gt;&lt;span&gt;= $&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;duration&lt;&#x2F;span&gt;&lt;span&gt; ?? &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        $&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;minutes &lt;&#x2F;span&gt;&lt;span&gt;= $&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;duration &lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;60&lt;&#x2F;span&gt;&lt;span&gt; ? (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;)($&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;duration &lt;&#x2F;span&gt;&lt;span&gt;&#x2F; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;60&lt;&#x2F;span&gt;&lt;span&gt;) : &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        $&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;seconds &lt;&#x2F;span&gt;&lt;span&gt;= $&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;duration &lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;60&lt;&#x2F;span&gt;&lt;span&gt; ? $&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;duration &lt;&#x2F;span&gt;&lt;span&gt;% &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;60&lt;&#x2F;span&gt;&lt;span&gt; : $&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;duration&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;sprintf&lt;&#x2F;span&gt;&lt;span&gt;(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;%d:%02d&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;, $&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;minutes&lt;&#x2F;span&gt;&lt;span&gt;, $&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;seconds&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And just like that we get back the following for the first &lt;em&gt;song&lt;&#x2F;em&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;json&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-json &quot;&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span&gt;    {
&lt;&#x2F;span&gt;&lt;span&gt;      &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;@id&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;api&#x2F;songs&#x2F;14&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;      &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;@type&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Song&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;      &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;14&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;      &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;title&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Never Gonna Give You Up&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;      &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;artist&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Rick Astley&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;      &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;duration&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;214&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;      &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;formattedDuration&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;3:34&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;So far, this has been a pleasant journey. But can we add a song at a time to the cassette and get a list of songs from the Cassette resource? This will require a bit more work. While we have an endpoint to setup the whole lists of songs with a one-off &lt;code&gt;PATCH&lt;&#x2F;code&gt; request, we do not have an endpoint to add one song at a time. Another challenge is the nature of cassettes! &lt;&#x2F;p&gt;







    



    
        
        
    
    

    
    
    
    
    &lt;div class=&quot;image-container center&quot;&gt;
        &lt;img
                alt=&quot;A cassette in a purple neon light&quot;
                src=&quot;cassette_1.jpeg&quot;
                srcset=&quot;https:&amp;#x2F;&amp;#x2F;abjork.land&amp;#x2F;processed_images&amp;#x2F;cassette_1.86d0c392f3547d63.webp 240w,
                            https:&amp;#x2F;&amp;#x2F;abjork.land&amp;#x2F;processed_images&amp;#x2F;cassette_1.7681e147129c5aa0.webp 400w,
                            https:&amp;#x2F;&amp;#x2F;abjork.land&amp;#x2F;processed_images&amp;#x2F;cassette_1.9e92702bfae211a7.webp 600w&quot;
                sizes=&quot;(max-width: 240px) 200px,
                            (max-width: 400px) 360px,
                            600px&quot;
        &#x2F;&gt;
        &lt;div class=&quot;image-subtext&quot;&gt;&lt;&#x2F;div&gt;
    &lt;&#x2F;div&gt;


&lt;p&gt;A traditional cassette has 2 sides; an A-side and a B-side. Each side can contain upto about 30 minutes of audio. We will add a method called &lt;code&gt;addSong&lt;&#x2F;code&gt; which will add songs to the A-side until it is full and then continue to add to the B-side. We will have a method to calculate the length occupied for each side called &lt;code&gt;totalLength&lt;&#x2F;code&gt; and another method called &lt;code&gt;sideAddable&lt;&#x2F;code&gt; to the &lt;code&gt;Cassette&lt;&#x2F;code&gt; class. We will modify the methods &lt;code&gt;addSideA&lt;&#x2F;code&gt; and &lt;code&gt;addSideB&lt;&#x2F;code&gt; to add the control if it can add another song.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;php&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-php &quot;&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span&gt;    &#x2F;&#x2F; .&#x2F;src&#x2F;Entity&#x2F;Cassette
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ab7967;&quot;&gt;&amp;lt;?php
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;public function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;addSong&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Song &lt;&#x2F;span&gt;&lt;span&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;song&lt;&#x2F;span&gt;&lt;span&gt;): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;self
&lt;&#x2F;span&gt;&lt;span&gt;    {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(!$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sideA&lt;&#x2F;span&gt;&lt;span&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;contains&lt;&#x2F;span&gt;&lt;span&gt;($&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;song&lt;&#x2F;span&gt;&lt;span&gt;) &amp;amp;&amp;amp; $&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sideAddable&lt;&#x2F;span&gt;&lt;span&gt;($&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;song&lt;&#x2F;span&gt;&lt;span&gt;, $&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sideA&lt;&#x2F;span&gt;&lt;span&gt;)) {
&lt;&#x2F;span&gt;&lt;span&gt;            $&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;addSideA&lt;&#x2F;span&gt;&lt;span&gt;($&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;song&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;        } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;            $&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;addSideB&lt;&#x2F;span&gt;&lt;span&gt;($&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;song&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;public function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;addSideA&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Song &lt;&#x2F;span&gt;&lt;span&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;song&lt;&#x2F;span&gt;&lt;span&gt;): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;self
&lt;&#x2F;span&gt;&lt;span&gt;    {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(!$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sideA&lt;&#x2F;span&gt;&lt;span&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;contains&lt;&#x2F;span&gt;&lt;span&gt;($&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;song&lt;&#x2F;span&gt;&lt;span&gt;) &amp;amp;&amp;amp; $&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sideAddable&lt;&#x2F;span&gt;&lt;span&gt;($&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;song&lt;&#x2F;span&gt;&lt;span&gt;, $&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sideA&lt;&#x2F;span&gt;&lt;span&gt;)) {
&lt;&#x2F;span&gt;&lt;span&gt;            $&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sideA&lt;&#x2F;span&gt;&lt;span&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;add&lt;&#x2F;span&gt;&lt;span&gt;($&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;song&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;public function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;addSideB&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Song &lt;&#x2F;span&gt;&lt;span&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;song&lt;&#x2F;span&gt;&lt;span&gt;): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;self
&lt;&#x2F;span&gt;&lt;span&gt;    {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(!$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sideB&lt;&#x2F;span&gt;&lt;span&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;contains&lt;&#x2F;span&gt;&lt;span&gt;($&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;song&lt;&#x2F;span&gt;&lt;span&gt;) &amp;amp;&amp;amp; $&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sideAddable&lt;&#x2F;span&gt;&lt;span&gt;($&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;song&lt;&#x2F;span&gt;&lt;span&gt;, $&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sideB&lt;&#x2F;span&gt;&lt;span&gt;)) {
&lt;&#x2F;span&gt;&lt;span&gt;            $&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sideB&lt;&#x2F;span&gt;&lt;span&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;add&lt;&#x2F;span&gt;&lt;span&gt;($&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;song&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;**
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;     * &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;@param&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt; Collection&amp;lt;Song&amp;gt; $songs
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;     * &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;@return&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt; int
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;     *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;public function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;totalLength&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Collection &lt;&#x2F;span&gt;&lt;span&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;songs&lt;&#x2F;span&gt;&lt;span&gt;): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int
&lt;&#x2F;span&gt;&lt;span&gt;    {
&lt;&#x2F;span&gt;&lt;span&gt;        $&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sum &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;foreach &lt;&#x2F;span&gt;&lt;span&gt;($&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;songs &lt;&#x2F;span&gt;&lt;span&gt;as $&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;song&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;            $&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sum &lt;&#x2F;span&gt;&lt;span&gt;+= $&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;song&lt;&#x2F;span&gt;&lt;span&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;getDuration&lt;&#x2F;span&gt;&lt;span&gt;() ?? &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sum&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;protected function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;sideAddable&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Song &lt;&#x2F;span&gt;&lt;span&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;candidateSong&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Collection &lt;&#x2F;span&gt;&lt;span&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sideSongs&lt;&#x2F;span&gt;&lt;span&gt;): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;bool
&lt;&#x2F;span&gt;&lt;span&gt;    {
&lt;&#x2F;span&gt;&lt;span&gt;        $&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;allowedLength &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;30 &lt;&#x2F;span&gt;&lt;span&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;60&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;allowedLength &lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; ($&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;totalLength&lt;&#x2F;span&gt;&lt;span&gt;($&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sideSongs&lt;&#x2F;span&gt;&lt;span&gt;) + $&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;candidateSong&lt;&#x2F;span&gt;&lt;span&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;getDuration&lt;&#x2F;span&gt;&lt;span&gt;());
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We will add a controller to handle when songs are added to a cassette. After this, we will use the controller when we register a new API route. You will see that we pass an EntityManagerInterface to the controller. This will be automaticallly resolved by Symsony&#x27;s Dependency Injection container. It will be used to loop up the song in the database and store it to a cassette. The controller will return a &lt;code&gt;201 OK&lt;&#x2F;code&gt; status for successful creation of a new relation, &lt;code&gt;400 BAD REQUEST&lt;&#x2F;code&gt; for requests without a required body parameter (&lt;em&gt;songId&lt;&#x2F;em&gt;), or &lt;code&gt;404 NOT FOUND&lt;&#x2F;code&gt; if a song is not found. If you look oveer the class you will see that we don&#x27;t look up the Cassette to see if it is present. In a __invoke method we assume a cassette has already been found, this means that Symfony in conjunction with the ORM will already have processed the lookup and will handle returning a &lt;code&gt;404&lt;&#x2F;code&gt; for us if it was not found. &lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;php&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-php &quot;&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span&gt;&#x2F;&#x2F;  .&#x2F;src&#x2F;Controller&#x2F;CassetteSongController.php
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ab7967;&quot;&gt;&amp;lt;?php
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;declare&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;strict_types&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;namespace &lt;&#x2F;span&gt;&lt;span&gt;App\Controller;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;App\Entity\&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Cassette&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;App\Entity\&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Song&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;Doctrine\ORM\&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;EntityManagerInterface&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;Symfony\Bundle\FrameworkBundle\Controller\&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;AbstractController&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;Symfony\Component\HttpFoundation\&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Request&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;Symfony\Component\HttpFoundation\&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Response&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;CassetteSongController &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;extends &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;AbstractController
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;public function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;__construct&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;private readonly EntityManagerInterface &lt;&#x2F;span&gt;&lt;span&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;entityManager
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    ){}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;public function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;__invoke&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Cassette &lt;&#x2F;span&gt;&lt;span&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cassette&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Request &lt;&#x2F;span&gt;&lt;span&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;request &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Response
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;request &lt;&#x2F;span&gt;&lt;span&gt;!== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;            &lt;&#x2F;span&gt;&lt;span&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;content &lt;&#x2F;span&gt;&lt;span&gt;= $&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;request&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;getContent&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;();
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;            &lt;&#x2F;span&gt;&lt;span&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;data &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;json_decode&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;content&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;            &lt;&#x2F;span&gt;&lt;span&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;songId &lt;&#x2F;span&gt;&lt;span&gt;= $&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;data&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;songId&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;] ?? &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;!$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;songId&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;json&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;                    [&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;description&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39; =&amp;gt; &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Missing required key &amp;quot;songId&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;],
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Response&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;HTTP_BAD_REQUEST
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;                );
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;            }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;            &lt;&#x2F;span&gt;&lt;span&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;songRepository &lt;&#x2F;span&gt;&lt;span&gt;= $&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;entityManager&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;getRepository&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Song&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;class&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;            &lt;&#x2F;span&gt;&lt;span&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;song &lt;&#x2F;span&gt;&lt;span&gt;= $&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;songRepository&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;findOneBy&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;([&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39; =&amp;gt; $&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;songId&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;]);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;song &lt;&#x2F;span&gt;&lt;span&gt;=== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;json&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;([&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;description&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39; =&amp;gt; &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Song was not found&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;], &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Response&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;HTTP_BAD_REQUEST&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;            }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;            &lt;&#x2F;span&gt;&lt;span&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cassette &lt;&#x2F;span&gt;&lt;span&gt;= $&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cassette&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;addSong&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;song&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;            &lt;&#x2F;span&gt;&lt;span&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;entityManager&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;flush&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cassette&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;        }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;json&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;            [
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;                &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;description&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39; =&amp;gt; &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Song was added!&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;            ],
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Response&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;HTTP_CREATED
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;        );
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;

    


&lt;div class=&quot;quote &quot;&gt;
    &lt;cite&gt;
        &lt;p&gt;To be or not to be, that is the question. Well, actually, there are many other questions, like &amp;quot;why that controller though?&amp;quot;&lt;&#x2F;p&gt;

    &lt;&#x2F;cite&gt;
    
&lt;&#x2F;div&gt;







    



    
        
        
    
    

    
    
    
    
    &lt;div class=&quot;image-container center&quot;&gt;
        &lt;img
                alt=&quot;A cassette in a purple neon light&quot;
                src=&quot;hamlet-controller.jpeg&quot;
                srcset=&quot;https:&amp;#x2F;&amp;#x2F;abjork.land&amp;#x2F;processed_images&amp;#x2F;hamlet-controller.c3d90a83de01d6fb.webp 240w,
                            https:&amp;#x2F;&amp;#x2F;abjork.land&amp;#x2F;processed_images&amp;#x2F;hamlet-controller.af6bda8255ee29b8.webp 400w,
                            https:&amp;#x2F;&amp;#x2F;abjork.land&amp;#x2F;processed_images&amp;#x2F;hamlet-controller.ab56874228dc6954.webp 600w&quot;
                sizes=&quot;(max-width: 240px) 200px,
                            (max-width: 400px) 360px,
                            600px&quot;
        &#x2F;&gt;
        &lt;div class=&quot;image-subtext&quot;&gt;&lt;&#x2F;div&gt;
    &lt;&#x2F;div&gt;


&lt;&#x2F;p&gt;
&lt;p&gt;So what to do with that controller? As we see, it will take an instance of the Cassette class and a request object. We will go into the Cassette class and expand the API definitions. This will be less magic (but not totally without some sourcery), and more definitions. We add a new Post-request to the API Resource, define its route, the controller to handle it, and its response values.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;php&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-php &quot;&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span style=&quot;color:#ab7967;&quot;&gt;&amp;lt;?php
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;#[ApiResource(
&lt;&#x2F;span&gt;&lt;span&gt;    operations: [
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; ... 
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Post&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;uriTemplate&lt;&#x2F;span&gt;&lt;span&gt;: &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;cassettes&#x2F;{id}&#x2F;songs&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;,
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;controller&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;CassetteSongController&lt;&#x2F;span&gt;&lt;span&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;class&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;openapiContext&lt;&#x2F;span&gt;&lt;span&gt;: [
&lt;&#x2F;span&gt;&lt;span&gt;                &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;summary&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39; =&amp;gt; &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Add a Song to a cassette&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;,
&lt;&#x2F;span&gt;&lt;span&gt;                &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;requestBody&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39; =&amp;gt; [
&lt;&#x2F;span&gt;&lt;span&gt;                    &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;content&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39; =&amp;gt; [
&lt;&#x2F;span&gt;&lt;span&gt;                        &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;application&#x2F;json&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39; =&amp;gt; [
&lt;&#x2F;span&gt;&lt;span&gt;                            &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;schema&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39; =&amp;gt; [
&lt;&#x2F;span&gt;&lt;span&gt;                                &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;type&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39; =&amp;gt; &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;object&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;,
&lt;&#x2F;span&gt;&lt;span&gt;                                &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;properties&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39; =&amp;gt; [
&lt;&#x2F;span&gt;&lt;span&gt;                                    &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;songId&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39; =&amp;gt; [
&lt;&#x2F;span&gt;&lt;span&gt;                                        &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;type&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39; =&amp;gt; &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;integer&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;                                    ]
&lt;&#x2F;span&gt;&lt;span&gt;                                ]
&lt;&#x2F;span&gt;&lt;span&gt;                            ]
&lt;&#x2F;span&gt;&lt;span&gt;                        ]
&lt;&#x2F;span&gt;&lt;span&gt;                    ]
&lt;&#x2F;span&gt;&lt;span&gt;                ],
&lt;&#x2F;span&gt;&lt;span&gt;                &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;responses&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39; =&amp;gt; [
&lt;&#x2F;span&gt;&lt;span&gt;                    &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;201&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39; =&amp;gt; [
&lt;&#x2F;span&gt;&lt;span&gt;                        &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;description&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39; =&amp;gt; &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Song added successfully&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;                    ],
&lt;&#x2F;span&gt;&lt;span&gt;                    &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;400&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39; =&amp;gt; [
&lt;&#x2F;span&gt;&lt;span&gt;                        &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;description&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39; =&amp;gt; &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Missing required key&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;                    ],
&lt;&#x2F;span&gt;&lt;span&gt;                    &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;404&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39; =&amp;gt; [
&lt;&#x2F;span&gt;&lt;span&gt;                        &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;description&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39; =&amp;gt; &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Cassette or Song not found&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;                    ]
&lt;&#x2F;span&gt;&lt;span&gt;                ]
&lt;&#x2F;span&gt;&lt;span&gt;            ]
&lt;&#x2F;span&gt;&lt;span&gt;        )
&lt;&#x2F;span&gt;&lt;span&gt;    ]
&lt;&#x2F;span&gt;&lt;span&gt;)]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Cassette
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;In the route for the endpoint we have added a placeholder, &lt;code&gt;{id}&lt;&#x2F;code&gt;. This id corresponds to the Cassette entity we want to add to, and Symfony will fetch the correct one for us and insert into the controller&#x27;s &lt;code&gt;__invoke&lt;&#x2F;code&gt; method. In the POST body we define the schema to have a &lt;code&gt;songId&lt;&#x2F;code&gt; with an &lt;code&gt;integer&lt;&#x2F;code&gt;. Having added this, we will see a new route and schema for it on &lt;code&gt;localhost:8000&#x2F;api&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;

    
    













    


&lt;div class=&quot;image-container center&quot;&gt;
    &lt;img
            alt=&quot;The swagger ui has an with the description &amp;quot;Add a Song to a cassette&amp;quot;&quot;
            src=&quot;new-post-route.jpeg&quot;
            srcset=&quot;https:&amp;#x2F;&amp;#x2F;abjork.land&amp;#x2F;processed_images&amp;#x2F;new-post-route.40ba0810d898ad53.webp 240w,
                        https:&amp;#x2F;&amp;#x2F;abjork.land&amp;#x2F;processed_images&amp;#x2F;new-post-route.12ea6c5c3e53614b.webp 400w,
                        https:&amp;#x2F;&amp;#x2F;abjork.land&amp;#x2F;processed_images&amp;#x2F;new-post-route.a00c21bfda3b6179.webp 600w&quot;
            sizes=&quot;(max-width: 240px) 200px,
                        (max-width: 400px) 360px,
                        600px&quot;
    &#x2F;&gt;
    &lt;div class=&quot;image-subtext&quot;&gt;&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;We can now create a Cassette, multiple songs, and add songs to a cassette. Having done that, when we fetch a Cassette with a GET request we will get back the songs it has. But something looks a bit off.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;GET https:&#x2F;&#x2F;127.0.0.1:8000&#x2F;api&#x2F;cassettes&#x2F;1&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;yaml&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-yaml &quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;@context&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;api&#x2F;contexts&#x2F;Cassette&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;@id&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;api&#x2F;cassettes&#x2F;1&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;@type&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Cassette&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;title&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Mix Tape #1&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;sideA&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: [
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;api&#x2F;songs&#x2F;1&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;api&#x2F;songs&#x2F;2&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;api&#x2F;songs&#x2F;3&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;api&#x2F;songs&#x2F;4&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;api&#x2F;songs&#x2F;5&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;api&#x2F;songs&#x2F;6&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;api&#x2F;songs&#x2F;7&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;api&#x2F;songs&#x2F;8&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;  ],
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;sideB&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: [
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;api&#x2F;songs&#x2F;10&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;api&#x2F;songs&#x2F;11&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;api&#x2F;songs&#x2F;12&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;api&#x2F;songs&#x2F;13&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;api&#x2F;songs&#x2F;14&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;  ]
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We can see that we have 8 songs on side A, and 5 on side B. But we would like to get the song, artist, and duration for each. So what are these strings we get? It looks like URLs, and while they functions as this too they are API Platform&#x27;s way to identify each entity, or IRIs (&lt;em&gt;International Resource Identifiers&lt;&#x2F;em&gt;).&lt;&#x2F;p&gt;
&lt;p&gt;We will modify how API Platform returns the songs when we fetch a cassette. We will do this by defining a normalization-group in Cassette and map the Song class to also use this group.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;php&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-php &quot;&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span&gt;&#x2F;&#x2F; .&#x2F;src&#x2F;Entity&#x2F;Cassette
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ab7967;&quot;&gt;&amp;lt;?php
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;Symfony\Component\Serializer\Annotation\&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Groups&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;#[ApiResource(
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span&gt;    normalizationContext: [
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;groups&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39; =&amp;gt; [&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;read:cassette&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;]
&lt;&#x2F;span&gt;&lt;span&gt;    ]
&lt;&#x2F;span&gt;&lt;span&gt;)]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Cassette
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; add this group to the fields you want to expose in the API
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;#[Groups([&amp;#39;read:cassette&amp;#39;])]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;private ?&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;string &lt;&#x2F;span&gt;&lt;span&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;title &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;#[Groups([&amp;#39;read:cassette&amp;#39;])]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;private &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Collection &lt;&#x2F;span&gt;&lt;span&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sideA&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;#[Groups([&amp;#39;read:cassette&amp;#39;])]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;private &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Collection &lt;&#x2F;span&gt;&lt;span&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sideB&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And for the magic of it all we will add this group in the Song class as well.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;php&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-php &quot;&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span&gt;&#x2F;&#x2F; .&#x2F;src&#x2F;Entity&#x2F;Song
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ab7967;&quot;&gt;&amp;lt;?php
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;Symfony\Component\Serializer\Annotation\&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Groups&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;#[Groups([&amp;#39;read:cassette&amp;#39;])]
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;private&lt;&#x2F;span&gt;&lt;span&gt; ?&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;string &lt;&#x2F;span&gt;&lt;span&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;title &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;#[Groups([&amp;#39;read:cassette&amp;#39;])]
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;private&lt;&#x2F;span&gt;&lt;span&gt; ?&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;string &lt;&#x2F;span&gt;&lt;span&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;artist &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;#[Groups([&amp;#39;read:cassette&amp;#39;])]
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;public function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;getFormattedDuration&lt;&#x2F;span&gt;&lt;span&gt;(): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;?string
&lt;&#x2F;span&gt;&lt;span&gt;    {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;So we did something odd here. We use a normalization-group defined in another API Resource and add it to the fields of the Song class. How would this ever be enough to get the behaviour that we want? The answer is magic! Or, &lt;a href=&quot;https:&#x2F;&#x2F;api-platform.com&#x2F;docs&#x2F;core&#x2F;serialization&#x2F;&quot;&gt;serialization process, you can read more about that in API Platform&#x27;s documention&lt;&#x2F;a&gt;. This is the result:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;yaml&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-yaml &quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;@context&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;api&#x2F;contexts&#x2F;Cassette&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;@id&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;api&#x2F;cassettes&#x2F;1&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;@type&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Cassette&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;title&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Mix Tape #1&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;sideA&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: [
&lt;&#x2F;span&gt;&lt;span&gt;    {
&lt;&#x2F;span&gt;&lt;span&gt;      &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;@id&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;api&#x2F;songs&#x2F;1&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;      &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;@type&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Song&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;      &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;title&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Never Gonna Give You Up&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;      &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;artist&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Rick Astley&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;      &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;formattedDuration&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;3:34&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    },
&lt;&#x2F;span&gt;&lt;span&gt;    {
&lt;&#x2F;span&gt;&lt;span&gt;      &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;@id&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;api&#x2F;songs&#x2F;2&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;      &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;@type&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Song&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;      &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;title&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;If I Could Turn Back Time&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;      &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;artist&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Cher&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;      &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;formattedDuration&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;3:59&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    },
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span&gt;  ]
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;    
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And that is exactly what we were working towards! But we have only been scratching the surface of API Platform. There are many other topics to discover, such as:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;api-platform.com&#x2F;docs&#x2F;core&#x2F;graphql&#x2F;&quot;&gt;RESTful to GraphQL&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;api-platform.com&#x2F;docs&#x2F;core&#x2F;security&#x2F;&quot;&gt;Securing resources and operations&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;api-platform.com&#x2F;docs&#x2F;admin&#x2F;&quot;&gt;The Admin component&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;api-platform.com&#x2F;docs&#x2F;core&#x2F;filters&#x2F;&quot;&gt;Filters&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;...and so much more!&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;


    


&lt;div class=&quot;quote &quot;&gt;
    &lt;cite&gt;
        &lt;p&gt;What thou seest is but the shadow of the truth; the substance lies beneath, and thou must scratch the surface to reveal it. But scratch not with thy nails, but with thy vinyl records!&lt;&#x2F;p&gt;

    &lt;&#x2F;cite&gt;
    
&lt;&#x2F;div&gt;






    



    
        
        
    
    

    
    
    
    
    &lt;div class=&quot;image-container center&quot;&gt;
        &lt;img
                alt=&quot;A classic writer as a DJ, scratching the surface of his mixtable&quot;
                src=&quot;shakespeare-dj.jpeg&quot;
                srcset=&quot;https:&amp;#x2F;&amp;#x2F;abjork.land&amp;#x2F;processed_images&amp;#x2F;shakespeare-dj.3bd5bb86e6e527f1.webp 240w,
                            https:&amp;#x2F;&amp;#x2F;abjork.land&amp;#x2F;processed_images&amp;#x2F;shakespeare-dj.147d5f6da0be4807.webp 400w,
                            https:&amp;#x2F;&amp;#x2F;abjork.land&amp;#x2F;processed_images&amp;#x2F;shakespeare-dj.a1d54aa84cbac8d3.webp 600w&quot;
                sizes=&quot;(max-width: 240px) 200px,
                            (max-width: 400px) 360px,
                            600px&quot;
        &#x2F;&gt;
        &lt;div class=&quot;image-subtext&quot;&gt;&lt;&#x2F;div&gt;
    &lt;&#x2F;div&gt;


</content>
    </entry>
</feed>
